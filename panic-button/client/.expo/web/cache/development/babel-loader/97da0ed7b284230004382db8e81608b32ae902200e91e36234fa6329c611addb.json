{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport { MaterialIcons } from '@expo/vector-icons';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Change = function Change() {\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isListVisible = _useState2[0],\n    setListVisible = _useState2[1];\n  var data = ['Boy', 'Girl', 'Girl', 'Boy', 'Adult'];\n  var toggleListVisibility = function toggleListVisibility() {\n    setListVisible(!isListVisible);\n  };\n  var renderItem = function renderItem(_ref) {\n    var item = _ref.item;\n    return _jsx(TouchableOpacity, {\n      onPress: function onPress() {\n        return handleItemPress(item);\n      },\n      style: styles.listItem,\n      children: _jsx(Text, {\n        children: item\n      })\n    });\n  };\n  var handleItemPress = function handleItemPress(selectedItem) {\n    console.log('Selected Item:', selectedItem);\n    setListVisible(false);\n  };\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsxs(TouchableOpacity, {\n      onPress: toggleListVisibility,\n      style: styles.button,\n      children: [_jsx(Text, {\n        style: styles.buttonText,\n        children: \"Select Gender\"\n      }), _jsx(MaterialIcons, {\n        name: \"check-circle\",\n        size: 24,\n        color: \"#4CAF50\"\n      })]\n    }), isListVisible && _jsx(FlatList, {\n      data: data,\n      renderItem: renderItem,\n      keyExtractor: function keyExtractor(item, index) {\n        return index.toString();\n      },\n      style: styles.list\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  button: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    backgroundColor: '#',\n    padding: 15,\n    borderRadius: 10,\n    alignItems: 'center'\n  },\n  buttonText: {\n    color: 'white',\n    fontSize: 18,\n    fontWeight: 'bold'\n  },\n  list: {\n    marginTop: 10,\n    width: '80%',\n    backgroundColor: 'white',\n    borderRadius: 10,\n    elevation: 5\n  },\n  listItem: {\n    padding: 15,\n    borderBottomWidth: 1,\n    borderBottomColor: '#e0e0e0',\n    alignItems: 'center'\n  }\n});\nexport default Change;","map":{"version":3,"names":["React","useState","View","Text","TouchableOpacity","StyleSheet","FlatList","MaterialIcons","jsx","_jsx","jsxs","_jsxs","Change","_useState","_useState2","_slicedToArray","isListVisible","setListVisible","data","toggleListVisibility","renderItem","_ref","item","onPress","handleItemPress","style","styles","listItem","children","selectedItem","console","log","container","button","buttonText","name","size","color","keyExtractor","index","toString","list","create","flex","justifyContent","alignItems","flexDirection","backgroundColor","padding","borderRadius","fontSize","fontWeight","marginTop","width","elevation","borderBottomWidth","borderBottomColor"],"sources":["C:/Users/n0548/Desktop/Abilisence Project/project1/panic-button/client/components/signUp/Change.js"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import { View, Text, TouchableOpacity, TextInput, ScrollView, StyleSheet, Modal } from 'react-native';\r\n// import { MaterialIcons } from '@expo/vector-icons';\r\n\r\n// const MedicalConditionsComponent = () => {\r\n//   const [selectedConditions, setSelectedConditions] = useState([]);\r\n//   const [newCondition, setNewCondition] = useState('');\r\n//   const [isModalVisible, setModalVisible] = useState(false);\r\n\r\n//   const toggleModal = () => {\r\n//     setModalVisible(!isModalVisible);\r\n//   };\r\n\r\n//   const addCondition = (condition) => {\r\n//     setSelectedConditions([...selectedConditions, condition]);\r\n//   };\r\n\r\n//   const removeCondition = (condition) => {\r\n//     const updatedConditions = selectedConditions.filter((c) => c !== condition);\r\n//     setSelectedConditions(updatedConditions);\r\n//   };\r\n\r\n//   const resetComponent = () => {\r\n//     setSelectedConditions([]);\r\n//     setNewCondition('');\r\n//     setModalVisible(false);\r\n//   };\r\n\r\n//   const renderConditions = () => {\r\n//     return selectedConditions.map((condition, index) => (\r\n//       <View key={index} style={styles.conditionBox}>\r\n//         <Text>{condition}</Text>\r\n//         <TouchableOpacity onPress={() => removeCondition(condition)}>\r\n//           <Text style={styles.removeButton}>X</Text>\r\n//         </TouchableOpacity>\r\n//       </View>\r\n//     ));\r\n//   };\r\n\r\n//   const renderMedicalConditions = () => {\r\n//     // Add your list of medical conditions here\r\n//     const medicalConditions = [\r\n//       'Gallstones',\r\n//       'Reddish Earth',\r\n//       'Myocardial Infarction',\r\n//       'Infertility in Men',\r\n//       // ... (Add other conditions similarly)\r\n//     ];\r\n\r\n//     return medicalConditions.map((condition, index) => (\r\n//       <TouchableOpacity key={index} onPress={() => addCondition(condition)}>\r\n//         <Text style={styles.medicalCondition}>{condition}</Text>\r\n//       </TouchableOpacity>\r\n//     ));\r\n//   };\r\n\r\n//   return (\r\n//     <View style={styles.container}>\r\n//       <TouchableOpacity onPress={toggleModal} style={styles.showConditionsButton}>\r\n//         <Text style={styles.showConditionsButtonText}>Select Medical Conditions</Text>\r\n//         <MaterialIcons name=\"check-circle\" size={24} color=\"#4CAF50\" />\r\n//       </TouchableOpacity>\r\n\r\n//       {/* Modal for displaying medical conditions */}\r\n//       <Modal visible={isModalVisible} animationType=\"slide\" transparent={true}>\r\n//         <View style={styles.modalContainer}>\r\n//           <ScrollView>\r\n//             {renderMedicalConditions()}\r\n//             {/* Close button for the modal */}\r\n//             <TouchableOpacity onPress={toggleModal} style={styles.closeModalButton}>\r\n//               <Text>Close</Text>\r\n//             </TouchableOpacity>\r\n//           </ScrollView>\r\n//         </View>\r\n//       </Modal>\r\n\r\n//       {/* Display selected conditions */}\r\n//       <View style={styles.selectedConditionsContainer}>{renderConditions()}</View>\r\n\r\n//       {/* Input for adding new condition */}\r\n//       <View style={styles.inputContainer}>\r\n//         <TextInput\r\n//           style={styles.input}\r\n//           placeholder=\"Add a new medical condition\"\r\n//           value={newCondition}\r\n//           onChangeText={(text) => setNewCondition(text)}\r\n//         />\r\n//         <TouchableOpacity onPress={() => addCondition(newCondition)}>\r\n//           <Text style={styles.addButton}>Add</Text>\r\n//         </TouchableOpacity>\r\n//       </View>\r\n\r\n//       {/* Login button */}\r\n//       <TouchableOpacity onPress={resetComponent} style={styles.loginButton}>\r\n//         <Text style={styles.loginButtonText}>Login</Text>\r\n//       </TouchableOpacity>\r\n//     </View>\r\n//   );\r\n// };\r\n\r\n// const styles = StyleSheet.create({\r\n//   container: {\r\n//     flex: 1,\r\n//     padding: 20,\r\n//   },\r\n//   showConditionsButton: {\r\n//     flexDirection: 'row',\r\n//     justifyContent: 'space-between',\r\n//     marginBottom: 20,\r\n//     backgroundColor: '#4CAF50', // Green color\r\n//     padding: 15,\r\n//     borderRadius: 10,\r\n//     alignItems: 'center',\r\n//   },\r\n//   showConditionsButtonText: {\r\n//     color: 'white',\r\n//     fontSize: 18,\r\n//     fontWeight: 'bold',\r\n//   },\r\n//   modalContainer: {\r\n//     flex: 1,\r\n//     backgroundColor: 'white',\r\n//     padding: 20,\r\n//   },\r\n//   medicalCondition: {\r\n//     fontSize: 16,\r\n//     marginBottom: 10,\r\n//   },\r\n//   closeModalButton: {\r\n//     marginTop: 10,\r\n//     padding: 10,\r\n//     backgroundColor: '#e0e0e0',\r\n//     borderRadius: 10,\r\n//     alignItems: 'center',\r\n//   },\r\n//   selectedConditionsContainer: {\r\n//     flexDirection: 'row',\r\n//     flexWrap: 'wrap',\r\n//     marginVertical: 10,\r\n//   },\r\n//   conditionBox: {\r\n//     backgroundColor: '#e0e0e0',\r\n//     borderRadius: 20,\r\n//     padding: 10,\r\n//     margin: 5,\r\n//     flexDirection: 'row',\r\n//     alignItems: 'center',\r\n//   },\r\n//   removeButton: {\r\n//     marginLeft: 5,\r\n//     color: 'red',\r\n//   },\r\n//   inputContainer: {\r\n//     flexDirection: 'row',\r\n//     alignItems: 'center',\r\n//     marginVertical: 10,\r\n//   },\r\n//   input: {\r\n//     flex: 1,\r\n//     borderWidth: 1,\r\n//     borderRadius: 10,\r\n//     padding: 10,\r\n//     marginRight: 10,\r\n//   },\r\n//   addButton: {\r\n//     color: 'blue',\r\n//   },\r\n//   loginButton: {\r\n//     backgroundColor: '#4CAF50', // Green color\r\n//     borderRadius: 10,\r\n//     padding: 15,\r\n//     alignItems: 'center',\r\n//     marginTop: 20,\r\n//   },\r\n//   loginButtonText: {\r\n//     color: 'white',\r\n//     fontSize: 18,\r\n//     fontWeight: 'bold',\r\n//   },\r\n// });\r\n\r\n// export default MedicalConditionsComponent;\r\n\r\n\r\n\r\n\r\n\r\n//\r\n\r\n\r\n\r\nimport React, { useState } from 'react';\r\nimport { View, Text, TouchableOpacity, StyleSheet, FlatList } from 'react-native';\r\nimport { MaterialIcons } from '@expo/vector-icons';\r\n\r\nconst Change = () => {\r\n  const [isListVisible, setListVisible] = useState(false);\r\n\r\n  const data = ['Boy', 'Girl', 'Girl', 'Boy', 'Adult'];\r\n\r\n  const toggleListVisibility = () => {\r\n    setListVisible(!isListVisible);\r\n  };\r\n\r\n  const renderItem = ({ item }) => (\r\n    <TouchableOpacity onPress={() => handleItemPress(item)} style={styles.listItem}>\r\n      <Text>{item}</Text>\r\n    </TouchableOpacity>\r\n  );\r\n\r\n  const handleItemPress = (selectedItem) => {\r\n    // Handle the selected item (you can perform actions based on the selected item)\r\n    console.log('Selected Item:', selectedItem);\r\n    setListVisible(false);\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <TouchableOpacity onPress={toggleListVisibility} style={styles.button}>\r\n        <Text style={styles.buttonText}>Select Gender</Text>\r\n        <MaterialIcons name=\"check-circle\" size={24} color=\"#4CAF50\" />\r\n      </TouchableOpacity>\r\n\r\n      {isListVisible && (\r\n        <FlatList\r\n          data={data}\r\n          renderItem={renderItem}\r\n          keyExtractor={(item, index) => index.toString()}\r\n          style={styles.list}\r\n        />\r\n      )}\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  button: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    backgroundColor: '#',\r\n    padding: 15,\r\n    borderRadius: 10,\r\n    alignItems: 'center',\r\n  },\r\n  buttonText: {\r\n    color: 'white',\r\n    fontSize: 18,\r\n    fontWeight: 'bold',\r\n  },\r\n  list: {\r\n    marginTop: 10,\r\n    width: '80%',\r\n    backgroundColor: 'white',\r\n    borderRadius: 10,\r\n    elevation: 5,\r\n  },\r\n  listItem: {\r\n    padding: 15,\r\n    borderBottomWidth: 1,\r\n    borderBottomColor: '#e0e0e0',\r\n    alignItems: 'center',\r\n  },\r\n});\r\n\r\nexport default Change;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}