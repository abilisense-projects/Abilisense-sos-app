{"ast":null,"code":"'use strict';\n\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { Animations, AnimationsData, TransitionType } from \"./config\";\nimport { convertAnimationObjectToKeyframes } from \"./animationParser\";\nimport { LinearTransition } from \"./transition/Linear.web\";\nimport { SequencedTransition } from \"./transition/Sequenced.web\";\nimport { FadingTransition } from \"./transition/Fading.web\";\nimport { insertWebAnimation } from \"./domUtils\";\nfunction addPxToTranslate(existingTransform) {\n  var newTransform = existingTransform.map(function (transformProp) {\n    var newTransformProp = {};\n    for (var _ref of Object.entries(transformProp)) {\n      var _ref2 = _slicedToArray(_ref, 2);\n      var key = _ref2[0];\n      var value = _ref2[1];\n      if (key.includes('translate')) {\n        newTransformProp[key] = `${value}px`;\n      } else {\n        newTransformProp[key] = value;\n      }\n    }\n    return newTransformProp;\n  });\n  return newTransform;\n}\nfunction addExistingTransform(newAnimationData, newTransform) {\n  for (var keyframeStepProperties of Object.values(newAnimationData.style)) {\n    if (!keyframeStepProperties.transform) {\n      keyframeStepProperties.transform = newTransform;\n    } else {\n      Array.prototype.unshift.apply(keyframeStepProperties.transform, newTransform);\n    }\n  }\n}\nexport function createAnimationWithExistingTransform(animationName, existingTransform, layoutTransition) {\n  var newAnimationData;\n  if (layoutTransition) {\n    newAnimationData = layoutTransition;\n  } else {\n    if (!(animationName in Animations)) {\n      return '';\n    }\n    newAnimationData = structuredClone(AnimationsData[animationName]);\n  }\n  var keyframeName = generateNextCustomKeyframeName();\n  newAnimationData.name = keyframeName;\n  var newTransform = addPxToTranslate(existingTransform);\n  addExistingTransform(newAnimationData, newTransform);\n  var keyframe = convertAnimationObjectToKeyframes(newAnimationData);\n  insertWebAnimation(keyframeName, keyframe);\n  return keyframeName;\n}\nvar customKeyframeCounter = 0;\nfunction generateNextCustomKeyframeName() {\n  return `REA${customKeyframeCounter++}`;\n}\nexport function TransitionGenerator(transitionType, transitionData, existingTransform) {\n  var transitionKeyframeName = generateNextCustomKeyframeName();\n  var transitionObject;\n  switch (transitionType) {\n    case TransitionType.LINEAR:\n      transitionObject = LinearTransition(transitionKeyframeName, transitionData);\n      break;\n    case TransitionType.SEQUENCED:\n      transitionObject = SequencedTransition(transitionKeyframeName, transitionData);\n      break;\n    case TransitionType.FADING:\n      transitionObject = FadingTransition(transitionKeyframeName, transitionData);\n      break;\n  }\n  if (existingTransform) {\n    return createAnimationWithExistingTransform('', existingTransform, transitionObject);\n  }\n  var transitionKeyframe = convertAnimationObjectToKeyframes(transitionObject);\n  insertWebAnimation(transitionKeyframeName, transitionKeyframe);\n  return transitionKeyframeName;\n}","map":{"version":3,"names":["_slicedToArray","Animations","AnimationsData","TransitionType","convertAnimationObjectToKeyframes","LinearTransition","SequencedTransition","FadingTransition","insertWebAnimation","addPxToTranslate","existingTransform","newTransform","map","transformProp","newTransformProp","_ref","Object","entries","_ref2","key","value","includes","addExistingTransform","newAnimationData","keyframeStepProperties","values","style","transform","Array","prototype","unshift","apply","createAnimationWithExistingTransform","animationName","layoutTransition","structuredClone","keyframeName","generateNextCustomKeyframeName","name","keyframe","customKeyframeCounter","TransitionGenerator","transitionType","transitionData","transitionKeyframeName","transitionObject","LINEAR","SEQUENCED","FADING","transitionKeyframe"],"sources":["C:\\Users\\inbal\\Documents\\abilisense-project\\project1\\panic-button\\client\\node_modules\\react-native-reanimated\\lib\\module\\reanimated2\\layoutReanimation\\web\\createAnimation.ts"],"sourcesContent":["'use strict';\n\nimport { Animations, AnimationsData, TransitionType } from './config';\nimport { convertAnimationObjectToKeyframes } from './animationParser';\nimport type {\n  AnimationData,\n  ReanimatedWebTransformProperties,\n  TransitionData,\n} from './animationParser';\nimport type { TransformsStyle } from 'react-native';\nimport { LinearTransition } from './transition/Linear.web';\nimport { SequencedTransition } from './transition/Sequenced.web';\nimport { FadingTransition } from './transition/Fading.web';\nimport { insertWebAnimation } from './domUtils';\n\n// Translate values are passed as numbers. However, if `translate` property receives number, it will not automatically\n// convert it to `px`. Therefore if we want to keep exisitng transform we have to add 'px' suffix to each of translate values\n// that are present inside transform.\nfunction addPxToTranslate(\n  existingTransform: NonNullable<TransformsStyle['transform']>\n) {\n  type RNTransformProp = (typeof existingTransform)[number];\n\n  // @ts-ignore `existingTransform` cannot be string because in that case\n  // we throw error in `extractTransformFromStyle`\n  const newTransform = existingTransform.map(\n    (transformProp: RNTransformProp) => {\n      const newTransformProp: ReanimatedWebTransformProperties = {};\n      for (const [key, value] of Object.entries(transformProp)) {\n        if (key.includes('translate')) {\n          // @ts-ignore After many trials we decided to ignore this error - it says that we cannot use 'key' to index this object.\n          // Sadly it doesn't go away after using cast `key as keyof TransformProperties`.\n          newTransformProp[key] = `${value}px`;\n        } else {\n          // @ts-ignore same as above.\n          newTransformProp[key] = value;\n        }\n      }\n      return newTransformProp;\n    }\n  );\n\n  return newTransform;\n}\n\n// In order to keep exisitng transform throughout animation, we have to add it to each of keyframe step.\nfunction addExistingTransform(\n  newAnimationData: AnimationData,\n  newTransform: ReanimatedWebTransformProperties[]\n) {\n  for (const keyframeStepProperties of Object.values(newAnimationData.style)) {\n    if (!keyframeStepProperties.transform) {\n      // If transform doesn't exist, we add only transform that already exists\n      keyframeStepProperties.transform = newTransform;\n    } else {\n      // We insert existing transformations before ours.\n      Array.prototype.unshift.apply(\n        keyframeStepProperties.transform,\n        newTransform\n      );\n    }\n  }\n}\n\n/**\n *  Modifies default animation by preserving transformations that given element already contains.\n *\n * @param animationName - Name of the animation to be modified (e.g. `FadeIn`).\n * @param existingTransform - Transform values that element already contains.\n * @returns Animation parsed to keyframe string.\n */\nexport function createAnimationWithExistingTransform(\n  animationName: string,\n  existingTransform: NonNullable<TransformsStyle['transform']>,\n  layoutTransition?: AnimationData\n) {\n  let newAnimationData;\n\n  if (layoutTransition) {\n    newAnimationData = layoutTransition;\n  } else {\n    if (!(animationName in Animations)) {\n      return '';\n    }\n    newAnimationData = structuredClone(AnimationsData[animationName]);\n  }\n\n  const keyframeName = generateNextCustomKeyframeName();\n\n  newAnimationData.name = keyframeName;\n\n  const newTransform = addPxToTranslate(existingTransform);\n\n  addExistingTransform(newAnimationData, newTransform);\n\n  const keyframe = convertAnimationObjectToKeyframes(newAnimationData);\n\n  insertWebAnimation(keyframeName, keyframe);\n\n  return keyframeName;\n}\n\nlet customKeyframeCounter = 0;\n\nfunction generateNextCustomKeyframeName() {\n  return `REA${customKeyframeCounter++}`;\n}\n\n/**\n * Creates transition of given type, appends it to stylesheet and returns keyframe name.\n *\n * @param transitionType - Type of transition (e.g. LINEAR).\n * @param transitionData - Object containing data for transforms (translateX, scaleX,...).\n * @returns Keyframe name that represents transition.\n */\nexport function TransitionGenerator(\n  transitionType: TransitionType,\n  transitionData: TransitionData,\n  existingTransform: TransformsStyle['transform'] | undefined\n) {\n  const transitionKeyframeName = generateNextCustomKeyframeName();\n  let transitionObject;\n\n  switch (transitionType) {\n    case TransitionType.LINEAR:\n      transitionObject = LinearTransition(\n        transitionKeyframeName,\n        transitionData\n      );\n      break;\n    case TransitionType.SEQUENCED:\n      transitionObject = SequencedTransition(\n        transitionKeyframeName,\n        transitionData\n      );\n      break;\n    case TransitionType.FADING:\n      transitionObject = FadingTransition(\n        transitionKeyframeName,\n        transitionData\n      );\n      break;\n  }\n\n  if (existingTransform) {\n    return createAnimationWithExistingTransform(\n      '',\n      existingTransform,\n      transitionObject\n    );\n  }\n\n  const transitionKeyframe =\n    convertAnimationObjectToKeyframes(transitionObject);\n\n  insertWebAnimation(transitionKeyframeName, transitionKeyframe);\n\n  return transitionKeyframeName;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}