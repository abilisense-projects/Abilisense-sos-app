{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport { MaterialIcons } from '@expo/vector-icons';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Change = function Change() {\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    selectedConditions = _useState2[0],\n    setSelectedConditions = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    newCondition = _useState4[0],\n    setNewCondition = _useState4[1];\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    isModalVisible = _useState6[0],\n    setModalVisible = _useState6[1];\n  var toggleModal = function toggleModal() {\n    setModalVisible(!isModalVisible);\n  };\n  var addCondition = function addCondition(condition) {\n    setSelectedConditions([].concat(_toConsumableArray(selectedConditions), [condition]));\n  };\n  var removeCondition = function removeCondition(condition) {\n    var updatedConditions = selectedConditions.filter(function (c) {\n      return c !== condition;\n    });\n    setSelectedConditions(updatedConditions);\n  };\n  var resetComponent = function resetComponent() {\n    setSelectedConditions([]);\n    setNewCondition('');\n    setModalVisible(false);\n  };\n  var renderConditions = function renderConditions() {\n    return selectedConditions.map(function (condition, index) {\n      return _jsxs(View, {\n        style: styles.conditionBox,\n        children: [_jsx(Text, {\n          children: condition\n        }), _jsx(TouchableOpacity, {\n          onPress: function onPress() {\n            return removeCondition(condition);\n          },\n          children: _jsx(Text, {\n            style: styles.removeButton,\n            children: \"X\"\n          })\n        })]\n      }, index);\n    });\n  };\n  var renderMedicalConditions = function renderMedicalConditions() {\n    var medicalConditions = ['Gallstones', 'Reddish Earth', 'Myocardial Infarction', 'Infertility in Men'];\n    return medicalConditions.map(function (condition, index) {\n      return _jsx(TouchableOpacity, {\n        onPress: function onPress() {\n          return addCondition(condition);\n        },\n        children: _jsx(Text, {\n          style: styles.medicalCondition,\n          children: condition\n        })\n      }, index);\n    });\n  };\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsxs(TouchableOpacity, {\n      onPress: toggleModal,\n      style: styles.showConditionsButton,\n      children: [_jsx(Text, {\n        style: styles.showConditionsButtonText,\n        children: \"Select Medical Conditions\"\n      }), _jsx(MaterialIcons, {\n        name: \"check-circle\",\n        size: 24,\n        color: \"#4CAF50\"\n      })]\n    }), _jsx(Modal, {\n      visible: isModalVisible,\n      animationType: \"slide\",\n      transparent: true,\n      children: _jsx(View, {\n        style: styles.modalContainer,\n        children: _jsxs(ScrollView, {\n          children: [renderMedicalConditions(), _jsx(TouchableOpacity, {\n            onPress: toggleModal,\n            style: styles.closeModalButton,\n            children: _jsx(Text, {\n              children: \"Close\"\n            })\n          })]\n        })\n      })\n    }), _jsx(View, {\n      style: styles.selectedConditionsContainer,\n      children: renderConditions()\n    }), _jsxs(View, {\n      style: styles.inputContainer,\n      children: [_jsx(TextInput, {\n        style: styles.input,\n        placeholder: \"Add a new medical condition\",\n        value: newCondition,\n        onChangeText: function onChangeText(text) {\n          return setNewCondition(text);\n        }\n      }), _jsx(TouchableOpacity, {\n        onPress: function onPress() {\n          return addCondition(newCondition);\n        },\n        children: _jsx(Text, {\n          style: styles.addButton,\n          children: \"Add\"\n        })\n      })]\n    }), _jsx(TouchableOpacity, {\n      onPress: resetComponent,\n      style: styles.loginButton,\n      children: _jsx(Text, {\n        style: styles.loginButtonText,\n        children: \"Login\"\n      })\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  showConditionsButton: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 20,\n    backgroundColor: '#4CAF50',\n    padding: 15,\n    borderRadius: 10,\n    alignItems: 'center'\n  },\n  showConditionsButtonText: {\n    color: 'white',\n    fontSize: 18,\n    fontWeight: 'bold'\n  }\n});\nexport default SignUpScreen;","map":{"version":3,"names":["React","useState","View","Text","TouchableOpacity","TextInput","ScrollView","StyleSheet","Modal","MaterialIcons","jsx","_jsx","jsxs","_jsxs","Change","_useState","_useState2","_slicedToArray","selectedConditions","setSelectedConditions","_useState3","_useState4","newCondition","setNewCondition","_useState5","_useState6","isModalVisible","setModalVisible","toggleModal","addCondition","condition","concat","_toConsumableArray","removeCondition","updatedConditions","filter","c","resetComponent","renderConditions","map","index","style","styles","conditionBox","children","onPress","removeButton","renderMedicalConditions","medicalConditions","medicalCondition","container","showConditionsButton","showConditionsButtonText","name","size","color","visible","animationType","transparent","modalContainer","closeModalButton","selectedConditionsContainer","inputContainer","input","placeholder","value","onChangeText","text","addButton","loginButton","loginButtonText","create","flexDirection","justifyContent","marginBottom","backgroundColor","padding","borderRadius","alignItems","fontSize","fontWeight","SignUpScreen"],"sources":["C:/Users/n0548/Desktop/Abilisence Project/project1/panic-button/client/components/signUp/Change.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { View, Text, TouchableOpacity, TextInput, ScrollView, StyleSheet, Modal } from 'react-native';\r\nimport { MaterialIcons } from '@expo/vector-icons'; // Import MaterialIcons from Expo\r\n\r\nconst Change = () => {\r\n    \r\n  const [selectedConditions, setSelectedConditions] = useState([]);\r\n  const [newCondition, setNewCondition] = useState('');\r\n  const [isModalVisible, setModalVisible] = useState(false);\r\n\r\n  const toggleModal = () => {\r\n    setModalVisible(!isModalVisible);\r\n  };\r\n\r\n  const addCondition = (condition) => {\r\n    setSelectedConditions([...selectedConditions, condition]);\r\n  };\r\n\r\n  const removeCondition = (condition) => {\r\n    const updatedConditions = selectedConditions.filter((c) => c !== condition);\r\n    setSelectedConditions(updatedConditions);\r\n  };\r\n\r\n  const resetComponent = () => {\r\n    setSelectedConditions([]);\r\n    setNewCondition('');\r\n    setModalVisible(false);\r\n  };\r\n\r\n  const renderConditions = () => {\r\n    return selectedConditions.map((condition, index) => (\r\n      <View key={index} style={styles.conditionBox}>\r\n        <Text>{condition}</Text>\r\n        <TouchableOpacity onPress={() => removeCondition(condition)}>\r\n          <Text style={styles.removeButton}>X</Text>\r\n        </TouchableOpacity>\r\n      </View>\r\n    ));\r\n  };\r\n\r\n  const renderMedicalConditions = () => {\r\n    // Add your list of medical conditions here\r\n    const medicalConditions = [\r\n      'Gallstones',\r\n      'Reddish Earth',\r\n      'Myocardial Infarction',\r\n      'Infertility in Men',\r\n      // ... (Add other conditions similarly)\r\n    ];\r\n\r\n    return medicalConditions.map((condition, index) => (\r\n      <TouchableOpacity key={index} onPress={() => addCondition(condition)}>\r\n        <Text style={styles.medicalCondition}>{condition}</Text>\r\n      </TouchableOpacity>\r\n    ));\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <TouchableOpacity onPress={toggleModal} style={styles.showConditionsButton}>\r\n        <Text style={styles.showConditionsButtonText}>Select Medical Conditions</Text>\r\n        <MaterialIcons name=\"check-circle\" size={24} color=\"#4CAF50\" />\r\n      </TouchableOpacity>\r\n\r\n      {/* Modal for displaying medical conditions */}\r\n      <Modal visible={isModalVisible} animationType=\"slide\" transparent={true}>\r\n        <View style={styles.modalContainer}>\r\n          <ScrollView>\r\n            {renderMedicalConditions()}\r\n            {/* Close button for the modal */}\r\n            <TouchableOpacity onPress={toggleModal} style={styles.closeModalButton}>\r\n              <Text>Close</Text>\r\n            </TouchableOpacity>\r\n          </ScrollView>\r\n        </View>\r\n      </Modal>\r\n\r\n      {/* Display selected conditions */}\r\n      <View style={styles.selectedConditionsContainer}>{renderConditions()}</View>\r\n\r\n      {/* Input for adding new condition */}\r\n      <View style={styles.inputContainer}>\r\n        <TextInput\r\n          style={styles.input}\r\n          placeholder=\"Add a new medical condition\"\r\n          value={newCondition}\r\n          onChangeText={(text) => setNewCondition(text)}\r\n        />\r\n        <TouchableOpacity onPress={() => addCondition(newCondition)}>\r\n          <Text style={styles.addButton}>Add</Text>\r\n        </TouchableOpacity>\r\n      </View>\r\n\r\n      {/* Login button */}\r\n      <TouchableOpacity onPress={resetComponent} style={styles.loginButton}>\r\n        <Text style={styles.loginButtonText}>Login</Text>\r\n      </TouchableOpacity>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  // ... (unchanged styles)\r\n\r\n  showConditionsButton: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    marginBottom: 20,\r\n    backgroundColor: '#4CAF50', // Green color\r\n    padding: 15,\r\n    borderRadius: 10,\r\n    alignItems: 'center',\r\n  },\r\n  showConditionsButtonText: {\r\n    color: 'white',\r\n    fontSize: 18,\r\n    fontWeight: 'bold',\r\n  },\r\n});\r\n\r\nexport default SignUpScreen;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}