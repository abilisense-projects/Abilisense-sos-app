{"ast":null,"code":"'use strict';\n\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport { useEffect } from 'react';\nimport { startMapper, stopMapper } from \"../core\";\nimport { useSharedValue } from \"./useSharedValue\";\nimport { shouldBeUseWeb } from \"../PlatformChecker\";\nexport function useAnimatedReaction(prepare, react, dependencies) {\n  var _prepare$__closure;\n  var previous = useSharedValue(null, true);\n  var inputs = Object.values((_prepare$__closure = prepare.__closure) != null ? _prepare$__closure : {});\n  if (shouldBeUseWeb()) {\n    var _dependencies;\n    if (!inputs.length && (_dependencies = dependencies) !== null && _dependencies !== void 0 && _dependencies.length) {\n      inputs = dependencies;\n    }\n  }\n  if (dependencies === undefined) {\n    var _prepare$__closure2, _react$__closure;\n    dependencies = [].concat(_toConsumableArray(Object.values((_prepare$__closure2 = prepare.__closure) != null ? _prepare$__closure2 : {})), _toConsumableArray(Object.values((_react$__closure = react.__closure) != null ? _react$__closure : {})), [prepare.__workletHash, react.__workletHash]);\n  } else {\n    dependencies.push(prepare.__workletHash, react.__workletHash);\n  }\n  useEffect(function () {\n    var fun = function fun() {\n      'worklet';\n\n      var input = prepare();\n      react(input, previous.value);\n      previous.value = input;\n    };\n    var mapperId = startMapper(fun, inputs, []);\n    return function () {\n      stopMapper(mapperId);\n    };\n  }, dependencies);\n}","map":{"version":3,"names":["_toConsumableArray","useEffect","startMapper","stopMapper","useSharedValue","shouldBeUseWeb","useAnimatedReaction","prepare","react","dependencies","_prepare$__closure","previous","inputs","Object","values","__closure","_dependencies","length","undefined","_prepare$__closure2","_react$__closure","concat","__workletHash","push","fun","input","value","mapperId"],"sources":["C:\\Users\\inbal\\Documents\\abilisense-project\\project1\\panic-button\\client\\node_modules\\react-native-reanimated\\lib\\module\\reanimated2\\hook\\useAnimatedReaction.ts"],"sourcesContent":["'use strict';\nimport { useEffect } from 'react';\nimport type { WorkletFunction } from '../commonTypes';\nimport { startMapper, stopMapper } from '../core';\nimport type { DependencyList } from './commonTypes';\nimport { useSharedValue } from './useSharedValue';\nimport { shouldBeUseWeb } from '../PlatformChecker';\n\n/**\n * Lets you to respond to changes in a [shared value](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#shared-value). It's especially useful when comparing values previously stored in the shared value with the current one.\n *\n * @param prepare - A function that should return a value to which you'd like to react.\n * @param react - A function that reacts to changes in the value returned by the `prepare` function.\n * @param dependencies - an optional array of dependencies. Only relevant when using Reanimated without the Babel plugin on the Web.\n * @see https://docs.swmansion.com/react-native-reanimated/docs/advanced/useAnimatedReaction\n */\n// @ts-expect-error This overload is required by our API.\nexport function useAnimatedReaction<PreparedResult>(\n  prepare: () => PreparedResult,\n  react: (prepared: PreparedResult, previous: PreparedResult | null) => void,\n  dependencies?: DependencyList\n): void;\n\nexport function useAnimatedReaction<PreparedResult>(\n  prepare: WorkletFunction<[], PreparedResult>,\n  react: WorkletFunction<\n    [prepare: PreparedResult, previous: PreparedResult | null],\n    void\n  >,\n  dependencies?: DependencyList\n) {\n  const previous = useSharedValue<PreparedResult | null>(null, true);\n\n  let inputs = Object.values(prepare.__closure ?? {});\n\n  if (shouldBeUseWeb()) {\n    if (!inputs.length && dependencies?.length) {\n      // let web work without a Reanimated Babel plugin\n      inputs = dependencies;\n    }\n  }\n\n  if (dependencies === undefined) {\n    dependencies = [\n      ...Object.values(prepare.__closure ?? {}),\n      ...Object.values(react.__closure ?? {}),\n      prepare.__workletHash,\n      react.__workletHash,\n    ];\n  } else {\n    dependencies.push(prepare.__workletHash, react.__workletHash);\n  }\n\n  useEffect(() => {\n    const fun = () => {\n      'worklet';\n      const input = prepare();\n      react(input, previous.value);\n      previous.value = input;\n    };\n    const mapperId = startMapper(fun, inputs, []);\n    return () => {\n      stopMapper(mapperId);\n    };\n  }, dependencies);\n}\n"],"mappings":"AAAA,YAAY;;AAAA,OAAAA,kBAAA;AACZ,SAASC,SAAS,QAAQ,OAAO;AAEjC,SAASC,WAAW,EAAEC,UAAU;AAEhC,SAASC,cAAc;AACvB,SAASC,cAAc;AAiBvB,OAAO,SAASC,mBAAmBA,CACjCC,OAA4C,EAC5CC,KAGC,EACDC,YAA6B,EAC7B;EAAA,IAAAC,kBAAA;EACA,IAAMC,QAAQ,GAAGP,cAAc,CAAwB,IAAI,EAAE,IAAI,CAAC;EAElE,IAAIQ,MAAM,GAAGC,MAAM,CAACC,MAAM,EAAAJ,kBAAA,GAACH,OAAO,CAACQ,SAAS,YAAAL,kBAAA,GAAI,CAAC,CAAC,CAAC;EAEnD,IAAIL,cAAc,EAAE,EAAE;IAAA,IAAAW,aAAA;IACpB,IAAI,CAACJ,MAAM,CAACK,MAAM,KAAAD,aAAA,GAAIP,YAAY,cAAAO,aAAA,eAAZA,aAAA,CAAcC,MAAM,EAAE;MAE1CL,MAAM,GAAGH,YAAY;IACvB;EACF;EAEA,IAAIA,YAAY,KAAKS,SAAS,EAAE;IAAA,IAAAC,mBAAA,EAAAC,gBAAA;IAC9BX,YAAY,MAAAY,MAAA,CAAArB,kBAAA,CACPa,MAAM,CAACC,MAAM,EAAAK,mBAAA,GAACZ,OAAO,CAACQ,SAAS,YAAAI,mBAAA,GAAI,CAAC,CAAC,CAAC,GAAAnB,kBAAA,CACtCa,MAAM,CAACC,MAAM,EAAAM,gBAAA,GAACZ,KAAK,CAACO,SAAS,YAAAK,gBAAA,GAAI,CAAC,CAAC,CAAC,IACvCb,OAAO,CAACe,aAAa,EACrBd,KAAK,CAACc,aAAa,EACpB;EACH,CAAC,MAAM;IACLb,YAAY,CAACc,IAAI,CAAChB,OAAO,CAACe,aAAa,EAAEd,KAAK,CAACc,aAAa,CAAC;EAC/D;EAEArB,SAAS,CAAC,YAAM;IACd,IAAMuB,GAAG,GAAG,SAANA,GAAGA,CAAA,EAAS;MAChB,SAAS;;MACT,IAAMC,KAAK,GAAGlB,OAAO,EAAE;MACvBC,KAAK,CAACiB,KAAK,EAAEd,QAAQ,CAACe,KAAK,CAAC;MAC5Bf,QAAQ,CAACe,KAAK,GAAGD,KAAK;IACxB,CAAC;IACD,IAAME,QAAQ,GAAGzB,WAAW,CAACsB,GAAG,EAAEZ,MAAM,EAAE,EAAE,CAAC;IAC7C,OAAO,YAAM;MACXT,UAAU,CAACwB,QAAQ,CAAC;IACtB,CAAC;EACH,CAAC,EAAElB,YAAY,CAAC;AAClB"},"metadata":{},"sourceType":"module","externalDependencies":[]}