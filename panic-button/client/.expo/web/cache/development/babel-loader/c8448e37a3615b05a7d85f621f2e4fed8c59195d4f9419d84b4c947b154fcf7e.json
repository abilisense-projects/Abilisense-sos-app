{"ast":null,"code":"import React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar MedicalConditionsList = function MedicalConditionsList(_ref) {\n  var route = _ref.route,\n    navigation = _ref.navigation,\n    onPrev = _ref.onPrev;\n  na;\n  var medicalConditions = ['Gallstones', 'Myocarditis', 'Infertility in Men', 'Infertility in Women', 'Chronic Instability of the Ankle', 'Alzheimer\\'s Disease', 'Endometriosis', 'Insulin', 'Asthma of the Skin in Children', 'Hammer Finger'];\n  var handleSelectCondition = function handleSelectCondition(condition) {\n    onSelectCondition(condition);\n  };\n  var handleStepChange = function handleStepChange() {\n    onPrev();\n  };\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      children: \"List of Medical Conditions:\"\n    }), medicalConditions.map(function (condition, index) {\n      return _jsx(TouchableOpacity, {\n        onPress: function onPress() {\n          return handleSelectCondition(condition);\n        },\n        style: styles.conditionButton,\n        children: _jsx(Text, {\n          children: condition\n        })\n      }, index);\n    }), _jsx(View, {\n      style: styles.closeButtonContainer,\n      children: _jsx(TouchableOpacity, {\n        style: styles.closeButton,\n        onPress: function onPress() {\n          return handleStepChange(1);\n        },\n        children: _jsx(Text, {\n          style: styles.closeButtonText,\n          children: \"Close\"\n        })\n      })\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 20\n  },\n  conditionButton: {\n    backgroundColor: '#e0e0e0',\n    borderRadius: 10,\n    padding: 10,\n    marginVertical: 5,\n    alignItems: 'center'\n  },\n  modalContainer: {\n    flex: 1,\n    backgroundColor: 'white',\n    padding: 20\n  },\n  closeModalButton: {\n    backgroundColor: '#454',\n    borderRadius: 10,\n    padding: 10,\n    marginVertical: 5,\n    alignItems: 'center'\n  },\n  buttonText: {\n    color: 'white',\n    fontWeight: 'bold',\n    textAlign: 'center'\n  },\n  closeButtonContainer: {\n    position: 'absolute',\n    bottom: 20,\n    width: '100%',\n    alignItems: 'center'\n  },\n  closeButton: {\n    backgroundColor: 'red',\n    padding: 15,\n    borderRadius: 10\n  },\n  closeButtonText: {\n    color: 'white',\n    fontSize: 16,\n    fontWeight: 'bold'\n  }\n});\nexport default MedicalConditionsList;","map":{"version":3,"names":["React","useState","View","Text","TouchableOpacity","StyleSheet","Modal","ScrollView","jsx","_jsx","jsxs","_jsxs","MedicalConditionsList","_ref","route","navigation","onPrev","na","medicalConditions","handleSelectCondition","condition","onSelectCondition","handleStepChange","style","styles","container","children","map","index","onPress","conditionButton","closeButtonContainer","closeButton","closeButtonText","create","flex","padding","backgroundColor","borderRadius","marginVertical","alignItems","modalContainer","closeModalButton","buttonText","color","fontWeight","textAlign","position","bottom","width","fontSize"],"sources":["C:/Users/n0548/Desktop/Abilisence Project/project1/panic-button/client/components/signUp/MedicalConditionsList.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { View, Text, TouchableOpacity, StyleSheet, Modal, ScrollView } from 'react-native';\r\n\r\nconst MedicalConditionsList = ({ route, navigation, onPrev}) => {\r\n  // const { onSelectCondition } = route.params;\r\n  // const [isModalVisible, setModalVisible] = useState(false);\r\nna\r\n  const medicalConditions = [\r\n    'Gallstones', 'Myocarditis', 'Infertility in Men', 'Infertility in Women', 'Chronic Instability of the Ankle', \r\n    'Alzheimer\\'s Disease', 'Endometriosis', 'Insulin', 'Asthma of the Skin in Children', 'Hammer Finger', /* ... add other conditions */\r\n  ];\r\n\r\n  const handleSelectCondition = (condition) => {\r\n    onSelectCondition(condition);\r\n  };\r\n\r\n  const handleStepChange = () => {\r\n      onPrev(); // Call the callback to move to the next step\r\n}\r\n//   \r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <Text>List of Medical Conditions:</Text>\r\n      {medicalConditions.map((condition, index) => (\r\n        <TouchableOpacity\r\n          key={index}\r\n          onPress={() => handleSelectCondition(condition)}\r\n          style={styles.conditionButton}\r\n        >\r\n          <Text>{condition}</Text>\r\n        </TouchableOpacity>\r\n      ))}  \r\n       <View style={styles.closeButtonContainer}>\r\n      <TouchableOpacity style={styles.closeButton} onPress={() => handleStepChange(1)}>\r\n        <Text style={styles.closeButtonText}>Close</Text>\r\n      </TouchableOpacity>\r\n    </View>\r\n\r\n      {/* <View style={styles.buttonContainer}>\r\n          <TouchableOpacity style={styles.buttonPrev} onPress={handleStepChange}>\r\n          <Text style={styles.buttonText}>Close</Text>\r\n          </TouchableOpacity>\r\n      </View> */}\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    padding: 20,\r\n  },\r\n  conditionButton: {\r\n    backgroundColor: '#e0e0e0',\r\n    borderRadius: 10,\r\n    padding: 10,\r\n    marginVertical: 5,\r\n    alignItems: 'center',\r\n  },\r\n  modalContainer: {\r\n    flex: 1,\r\n    backgroundColor: 'white',\r\n    padding: 20,\r\n  },\r\n  closeModalButton: {\r\n    backgroundColor: '#454',\r\n    borderRadius: 10,\r\n    padding: 10,\r\n    marginVertical: 5,\r\n    alignItems: 'center',\r\n  },\r\n  buttonText: {\r\n    color: 'white',\r\n    fontWeight: 'bold',\r\n    textAlign: 'center',\r\n  },\r\n  // buttonContainer: {\r\n  //   flexDirection: 'row',\r\n  //   justifyContent: 'space-between',\r\n  //   width: '80%',\r\n  //   marginTop: 20,\r\n  // },\r\n  // buttonPrev: {\r\n  //   backgroundColor: '#ccc', // Light gray\r\n  //   padding: 10,\r\n  //   borderRadius: 5,\r\n  //   flex: 1,\r\n  //   marginRight: 10,\r\n  // },\r\n  // buttonNext: {\r\n  //   backgroundColor: 'blue',\r\n  //   padding: 10,\r\n  //   borderRadius: 5,\r\n  //   flex: 1,\r\n  // },\r\n  closeButtonContainer: {\r\n    position: 'absolute',\r\n    bottom: 20, // Adjust the bottom distance as needed\r\n    width: '100%',\r\n    alignItems: 'center',\r\n  },\r\n  closeButton: {\r\n    backgroundColor: 'red', // Customize the background color\r\n    padding: 15,\r\n    borderRadius: 10,\r\n  },\r\n  closeButtonText: {\r\n    color: 'white', // Customize the text color\r\n    fontSize: 16,\r\n    fontWeight: 'bold',\r\n  },\r\n});\r\n\r\nexport default MedicalConditionsList;\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}