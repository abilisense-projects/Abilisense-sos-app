{"ast":null,"code":"'use strict';\n\nimport { hsvToColor, RGBtoHSV, rgbaColor, processColor, red, green, blue, opacity } from \"./Colors\";\nimport { makeMutable } from \"./core\";\nimport { Extrapolation, interpolate } from \"./interpolation\";\nimport { useSharedValue } from \"./hook/useSharedValue\";\nexport var Extrapolate = Extrapolation;\nvar interpolateColorsHSV = function interpolateColorsHSV(value, inputRange, colors, options) {\n  'worklet';\n\n  var h = 0;\n  var _options$useCorrected = options.useCorrectedHSVInterpolation,\n    useCorrectedHSVInterpolation = _options$useCorrected === void 0 ? true : _options$useCorrected;\n  if (useCorrectedHSVInterpolation) {\n    var correctedInputRange = [inputRange[0]];\n    var originalH = colors.h;\n    var correctedH = [originalH[0]];\n    for (var i = 1; i < originalH.length; ++i) {\n      var d = originalH[i] - originalH[i - 1];\n      if (originalH[i] > originalH[i - 1] && d > 0.5) {\n        correctedInputRange.push(inputRange[i]);\n        correctedInputRange.push(inputRange[i] + 0.00001);\n        correctedH.push(originalH[i] - 1);\n        correctedH.push(originalH[i]);\n      } else if (originalH[i] < originalH[i - 1] && d < -0.5) {\n        correctedInputRange.push(inputRange[i]);\n        correctedInputRange.push(inputRange[i] + 0.00001);\n        correctedH.push(originalH[i] + 1);\n        correctedH.push(originalH[i]);\n      } else {\n        correctedInputRange.push(inputRange[i]);\n        correctedH.push(originalH[i]);\n      }\n    }\n    h = (interpolate(value, correctedInputRange, correctedH, Extrapolation.CLAMP) + 1) % 1;\n  } else {\n    h = interpolate(value, inputRange, colors.h, Extrapolation.CLAMP);\n  }\n  var s = interpolate(value, inputRange, colors.s, Extrapolation.CLAMP);\n  var v = interpolate(value, inputRange, colors.v, Extrapolation.CLAMP);\n  var a = interpolate(value, inputRange, colors.a, Extrapolation.CLAMP);\n  return hsvToColor(h, s, v, a);\n};\nvar toLinearSpace = function toLinearSpace(x, gamma) {\n  'worklet';\n\n  return x.map(function (v) {\n    return Math.pow(v / 255, gamma);\n  });\n};\nvar toGammaSpace = function toGammaSpace(x, gamma) {\n  'worklet';\n\n  return Math.round(Math.pow(x, 1 / gamma) * 255);\n};\nvar interpolateColorsRGB = function interpolateColorsRGB(value, inputRange, colors, options) {\n  'worklet';\n\n  var _options$gamma = options.gamma,\n    gamma = _options$gamma === void 0 ? 2.2 : _options$gamma;\n  var outputR = colors.r,\n    outputG = colors.g,\n    outputB = colors.b;\n  if (gamma !== 1) {\n    outputR = toLinearSpace(outputR, gamma);\n    outputG = toLinearSpace(outputG, gamma);\n    outputB = toLinearSpace(outputB, gamma);\n  }\n  var r = interpolate(value, inputRange, outputR, Extrapolation.CLAMP);\n  var g = interpolate(value, inputRange, outputG, Extrapolation.CLAMP);\n  var b = interpolate(value, inputRange, outputB, Extrapolation.CLAMP);\n  var a = interpolate(value, inputRange, colors.a, Extrapolation.CLAMP);\n  if (gamma === 1) {\n    return rgbaColor(r, g, b, a);\n  }\n  return rgbaColor(toGammaSpace(r, gamma), toGammaSpace(g, gamma), toGammaSpace(b, gamma), a);\n};\nvar getInterpolateRGB = function getInterpolateRGB(colors) {\n  'worklet';\n\n  var r = [];\n  var g = [];\n  var b = [];\n  var a = [];\n  for (var i = 0; i < colors.length; ++i) {\n    var color = colors[i];\n    var processedColor = processColor(color);\n    if (processedColor !== null && processedColor !== undefined) {\n      r.push(red(processedColor));\n      g.push(green(processedColor));\n      b.push(blue(processedColor));\n      a.push(opacity(processedColor));\n    }\n  }\n  return {\n    r: r,\n    g: g,\n    b: b,\n    a: a\n  };\n};\nvar getInterpolateHSV = function getInterpolateHSV(colors) {\n  'worklet';\n\n  var h = [];\n  var s = [];\n  var v = [];\n  var a = [];\n  for (var i = 0; i < colors.length; ++i) {\n    var color = colors[i];\n    var processedColor = processColor(color);\n    if (typeof processedColor === 'number') {\n      var processedHSVColor = RGBtoHSV(red(processedColor), green(processedColor), blue(processedColor));\n      h.push(processedHSVColor.h);\n      s.push(processedHSVColor.s);\n      v.push(processedHSVColor.v);\n      a.push(opacity(processedColor));\n    }\n  }\n  return {\n    h: h,\n    s: s,\n    v: v,\n    a: a\n  };\n};\nexport function interpolateColor(value, inputRange, outputRange) {\n  'worklet';\n\n  var colorSpace = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'RGB';\n  var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n  if (colorSpace === 'HSV') {\n    return interpolateColorsHSV(value, inputRange, getInterpolateHSV(outputRange), options);\n  } else if (colorSpace === 'RGB') {\n    return interpolateColorsRGB(value, inputRange, getInterpolateRGB(outputRange), options);\n  }\n  throw new Error(`[Reanimated] Invalid color space provided: ${colorSpace}. Supported values are: ['RGB', 'HSV'].`);\n}\nexport var ColorSpace = function (ColorSpace) {\n  ColorSpace[ColorSpace[\"RGB\"] = 0] = \"RGB\";\n  ColorSpace[ColorSpace[\"HSV\"] = 1] = \"HSV\";\n  return ColorSpace;\n}({});\nexport function useInterpolateConfig(inputRange, outputRange) {\n  var colorSpace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ColorSpace.RGB;\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  return useSharedValue({\n    inputRange: inputRange,\n    outputRange: outputRange,\n    colorSpace: colorSpace,\n    cache: makeMutable(null),\n    options: options\n  });\n}","map":{"version":3,"names":["hsvToColor","RGBtoHSV","rgbaColor","processColor","red","green","blue","opacity","makeMutable","Extrapolation","interpolate","useSharedValue","Extrapolate","interpolateColorsHSV","value","inputRange","colors","options","h","_options$useCorrected","useCorrectedHSVInterpolation","correctedInputRange","originalH","correctedH","i","length","d","push","CLAMP","s","v","a","toLinearSpace","x","gamma","map","Math","pow","toGammaSpace","round","interpolateColorsRGB","_options$gamma","outputR","r","outputG","g","outputB","b","getInterpolateRGB","color","processedColor","undefined","getInterpolateHSV","processedHSVColor","interpolateColor","outputRange","colorSpace","arguments","Error","ColorSpace","useInterpolateConfig","RGB","cache"],"sources":["C:\\Users\\inbal\\Documents\\abilisense-project\\project1\\panic-button\\client\\node_modules\\react-native-reanimated\\lib\\module\\reanimated2\\interpolateColor.ts"],"sourcesContent":["'use strict';\nimport {\n  hsvToColor,\n  RGBtoHSV,\n  rgbaColor,\n  processColor,\n  red,\n  green,\n  blue,\n  opacity,\n} from './Colors';\nimport { makeMutable } from './core';\nimport { Extrapolation, interpolate } from './interpolation';\nimport type { SharedValue } from './commonTypes';\nimport { useSharedValue } from './hook/useSharedValue';\n\n/**\n * @deprecated Please use Extrapolation instead\n */\nexport const Extrapolate = Extrapolation;\n\n/**\n * Options for color interpolation.\n *\n * @param gamma - Gamma value used in gamma correction. Defaults to `2.2`.\n * @param useCorrectedHSVInterpolation - Whether to reduce the number of colors the interpolation has to go through. Defaults to `true`.\n */\nexport type InterpolationOptions = {\n  gamma?: number;\n  useCorrectedHSVInterpolation?: boolean;\n};\n\nconst interpolateColorsHSV = (\n  value: number,\n  inputRange: readonly number[],\n  colors: InterpolateHSV,\n  options: InterpolationOptions\n) => {\n  'worklet';\n  let h = 0;\n  const { useCorrectedHSVInterpolation = true } = options;\n  if (useCorrectedHSVInterpolation) {\n    // if the difference between hues in a range is > 180 deg\n    // then move the hue at the right end of the range +/- 360 deg\n    // and add the next point in the original place + 0.00001 with original hue\n    // to not break the next range\n    const correctedInputRange = [inputRange[0]];\n    const originalH = colors.h;\n    const correctedH = [originalH[0]];\n\n    for (let i = 1; i < originalH.length; ++i) {\n      const d = originalH[i] - originalH[i - 1];\n      if (originalH[i] > originalH[i - 1] && d > 0.5) {\n        correctedInputRange.push(inputRange[i]);\n        correctedInputRange.push(inputRange[i] + 0.00001);\n        correctedH.push(originalH[i] - 1);\n        correctedH.push(originalH[i]);\n      } else if (originalH[i] < originalH[i - 1] && d < -0.5) {\n        correctedInputRange.push(inputRange[i]);\n        correctedInputRange.push(inputRange[i] + 0.00001);\n        correctedH.push(originalH[i] + 1);\n        correctedH.push(originalH[i]);\n      } else {\n        correctedInputRange.push(inputRange[i]);\n        correctedH.push(originalH[i]);\n      }\n    }\n    h =\n      (interpolate(\n        value,\n        correctedInputRange,\n        correctedH,\n        Extrapolation.CLAMP\n      ) +\n        1) %\n      1;\n  } else {\n    h = interpolate(value, inputRange, colors.h, Extrapolation.CLAMP);\n  }\n  const s = interpolate(value, inputRange, colors.s, Extrapolation.CLAMP);\n  const v = interpolate(value, inputRange, colors.v, Extrapolation.CLAMP);\n  const a = interpolate(value, inputRange, colors.a, Extrapolation.CLAMP);\n  return hsvToColor(h, s, v, a);\n};\n\nconst toLinearSpace = (x: number[], gamma: number): number[] => {\n  'worklet';\n  return x.map((v) => Math.pow(v / 255, gamma));\n};\n\nconst toGammaSpace = (x: number, gamma: number): number => {\n  'worklet';\n  return Math.round(Math.pow(x, 1 / gamma) * 255);\n};\n\nconst interpolateColorsRGB = (\n  value: number,\n  inputRange: readonly number[],\n  colors: InterpolateRGB,\n  options: InterpolationOptions\n) => {\n  'worklet';\n  const { gamma = 2.2 } = options;\n  let { r: outputR, g: outputG, b: outputB } = colors;\n  if (gamma !== 1) {\n    outputR = toLinearSpace(outputR, gamma);\n    outputG = toLinearSpace(outputG, gamma);\n    outputB = toLinearSpace(outputB, gamma);\n  }\n  const r = interpolate(value, inputRange, outputR, Extrapolation.CLAMP);\n  const g = interpolate(value, inputRange, outputG, Extrapolation.CLAMP);\n  const b = interpolate(value, inputRange, outputB, Extrapolation.CLAMP);\n  const a = interpolate(value, inputRange, colors.a, Extrapolation.CLAMP);\n  if (gamma === 1) {\n    return rgbaColor(r, g, b, a);\n  }\n  return rgbaColor(\n    toGammaSpace(r, gamma),\n    toGammaSpace(g, gamma),\n    toGammaSpace(b, gamma),\n    a\n  );\n};\n\nexport interface InterpolateRGB {\n  r: number[];\n  g: number[];\n  b: number[];\n  a: number[];\n}\n\nconst getInterpolateRGB = (\n  colors: readonly (string | number)[]\n): InterpolateRGB => {\n  'worklet';\n\n  const r = [];\n  const g = [];\n  const b = [];\n  const a = [];\n  for (let i = 0; i < colors.length; ++i) {\n    const color = colors[i];\n    const processedColor = processColor(color);\n    // explicit check in case if processedColor is 0\n    if (processedColor !== null && processedColor !== undefined) {\n      r.push(red(processedColor));\n      g.push(green(processedColor));\n      b.push(blue(processedColor));\n      a.push(opacity(processedColor));\n    }\n  }\n  return { r, g, b, a };\n};\n\nexport interface InterpolateHSV {\n  h: number[];\n  s: number[];\n  v: number[];\n  a: number[];\n}\n\nconst getInterpolateHSV = (\n  colors: readonly (string | number)[]\n): InterpolateHSV => {\n  'worklet';\n  const h = [];\n  const s = [];\n  const v = [];\n  const a = [];\n  for (let i = 0; i < colors.length; ++i) {\n    const color = colors[i];\n    const processedColor = processColor(color) as any;\n    if (typeof processedColor === 'number') {\n      const processedHSVColor = RGBtoHSV(\n        red(processedColor),\n        green(processedColor),\n        blue(processedColor)\n      );\n\n      h.push(processedHSVColor.h);\n      s.push(processedHSVColor.s);\n      v.push(processedHSVColor.v);\n      a.push(opacity(processedColor));\n    }\n  }\n  return { h, s, v, a };\n};\n\n/**\n * Lets you map a value from a range of numbers to a range of colors using linear interpolation.\n *\n * @param value - A number from the `input` range that is going to be mapped to the color in the `output` range.\n * @param inputRange - An array of numbers specifying the input range of the interpolation.\n * @param outputRange - An array of output colors values (eg. \"red\", \"#00FFCC\", \"rgba(255, 0, 0, 0.5)\").\n * @param colorSpace - The color space to use for interpolation. Defaults to 'RGB'.\n * @param options - Additional options for interpolation - {@link InterpolationOptions}.\n * @returns The color after interpolation from within the output range in rgba(r, g, b, a) format.\n * @see https://docs.swmansion.com/react-native-reanimated/docs/utilities/interpolateColor\n */\nexport function interpolateColor(\n  value: number,\n  inputRange: readonly number[],\n  outputRange: readonly string[],\n  colorSpace?: 'RGB' | 'HSV',\n  options?: InterpolationOptions\n): string;\n\nexport function interpolateColor(\n  value: number,\n  inputRange: readonly number[],\n  outputRange: readonly number[],\n  colorSpace?: 'RGB' | 'HSV',\n  options?: InterpolationOptions\n): number;\n\nexport function interpolateColor(\n  value: number,\n  inputRange: readonly number[],\n  outputRange: readonly (string | number)[],\n  colorSpace: 'RGB' | 'HSV' = 'RGB',\n  options: InterpolationOptions = {}\n): string | number {\n  'worklet';\n  if (colorSpace === 'HSV') {\n    return interpolateColorsHSV(\n      value,\n      inputRange,\n      getInterpolateHSV(outputRange),\n      options\n    );\n  } else if (colorSpace === 'RGB') {\n    return interpolateColorsRGB(\n      value,\n      inputRange,\n      getInterpolateRGB(outputRange),\n      options\n    );\n  }\n  throw new Error(\n    `[Reanimated] Invalid color space provided: ${colorSpace}. Supported values are: ['RGB', 'HSV'].`\n  );\n}\n\nexport enum ColorSpace {\n  RGB = 0,\n  HSV = 1,\n}\n\nexport interface InterpolateConfig {\n  inputRange: readonly number[];\n  outputRange: readonly (string | number)[];\n  colorSpace: ColorSpace;\n  cache: SharedValue<InterpolateRGB | InterpolateHSV | null>;\n  options: InterpolationOptions;\n}\n\nexport function useInterpolateConfig(\n  inputRange: readonly number[],\n  outputRange: readonly (string | number)[],\n  colorSpace = ColorSpace.RGB,\n  options: InterpolationOptions = {}\n): SharedValue<InterpolateConfig> {\n  return useSharedValue<InterpolateConfig>({\n    inputRange,\n    outputRange,\n    colorSpace,\n    cache: makeMutable<InterpolateRGB | InterpolateHSV | null>(null),\n    options,\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}