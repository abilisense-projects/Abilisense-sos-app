{"ast":null,"code":"'use strict';\n\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport { useEffect, useRef } from 'react';\nimport { initialUpdaterRun } from \"../animation\";\nimport { makeMutable, startMapper, stopMapper } from \"../core\";\nimport { shouldBeUseWeb } from \"../PlatformChecker\";\nvar _worklet_4899742148771_init_data = {\n  code: \"function anonymous(){const{sharedValue,updater}=this.__closure;sharedValue.value=updater();}\",\n  location: \"C:\\\\Users\\\\inbal\\\\Documents\\\\abilisense-project\\\\project1\\\\panic-button\\\\client\\\\node_modules\\\\react-native-reanimated\\\\lib\\\\module\\\\reanimated2\\\\hook\\\\useDerivedValue.js\",\n  sourceMap: \"{\\\"version\\\":3,\\\"names\\\":[\\\"anonymous\\\",\\\"sharedValue\\\",\\\"updater\\\",\\\"__closure\\\",\\\"value\\\"],\\\"sources\\\":[\\\"C:/Users/inbal/Documents/abilisense-project/project1/panic-button/client/node_modules/react-native-reanimated/lib/module/reanimated2/hook/useDerivedValue.js\\\"],\\\"mappings\\\":\\\"AAuCgB,SAAAA,SAAMA,CAAA,QAAAC,WAAA,CAAAC,OAAA,OAAAC,SAAA,CAGhBF,WAAW,CAACG,KAAK,CAAGF,OAAO,CAAC,CAAC,CAC/B\\\"}\",\n  version: \"3.6.1\"\n};\nexport function useDerivedValue(updater, dependencies) {\n  var _updater$__closure;\n  var initRef = useRef(null);\n  var inputs = Object.values((_updater$__closure = updater.__closure) != null ? _updater$__closure : {});\n  if (shouldBeUseWeb()) {\n    var _dependencies;\n    if (!inputs.length && (_dependencies = dependencies) !== null && _dependencies !== void 0 && _dependencies.length) {\n      inputs = dependencies;\n    }\n  }\n  if (dependencies === undefined) {\n    dependencies = [].concat(_toConsumableArray(inputs), [updater.__workletHash]);\n  } else {\n    dependencies.push(updater.__workletHash);\n  }\n  if (initRef.current === null) {\n    initRef.current = makeMutable(initialUpdaterRun(updater));\n  }\n  var sharedValue = initRef.current;\n  useEffect(function () {\n    var fun = function () {\n      var _e = [new global.Error(), -3, -27];\n      var anonymous = function anonymous() {\n        sharedValue.value = updater();\n      };\n      anonymous.__closure = {\n        sharedValue: sharedValue,\n        updater: updater\n      };\n      anonymous.__workletHash = 4899742148771;\n      anonymous.__initData = _worklet_4899742148771_init_data;\n      anonymous.__stackDetails = _e;\n      return anonymous;\n    }();\n    var mapperId = startMapper(fun, inputs, [sharedValue]);\n    return function () {\n      stopMapper(mapperId);\n    };\n  }, dependencies);\n  useEffect(function () {\n    return function () {\n      initRef.current = null;\n    };\n  }, []);\n  return sharedValue;\n}","map":{"version":3,"names":["_toConsumableArray","useEffect","useRef","initialUpdaterRun","makeMutable","startMapper","stopMapper","shouldBeUseWeb","_worklet_4899742148771_init_data","code","location","sourceMap","version","useDerivedValue","updater","dependencies","_updater$__closure","initRef","inputs","Object","values","__closure","_dependencies","length","undefined","concat","__workletHash","push","current","sharedValue","fun","_e","global","Error","anonymous","value","__initData","__stackDetails","mapperId"],"sources":["C:\\Users\\inbal\\Documents\\abilisense-project\\project1\\panic-button\\client\\node_modules\\react-native-reanimated\\lib\\module\\reanimated2\\hook\\useDerivedValue.ts"],"sourcesContent":["'use strict';\nimport { useEffect, useRef } from 'react';\nimport { initialUpdaterRun } from '../animation';\nimport type { SharedValue, WorkletFunction } from '../commonTypes';\nimport { makeMutable, startMapper, stopMapper } from '../core';\nimport type { DependencyList } from './commonTypes';\nimport { shouldBeUseWeb } from '../PlatformChecker';\n\nexport type DerivedValue<Value> = Readonly<SharedValue<Value>>;\n\n/**\n * Lets you create new shared values based on existing ones while keeping them reactive.\n *\n * @param updater - A function called whenever at least one of the shared values or state used in the function body changes.\n * @param dependencies - An optional array of dependencies. Only relevant when using Reanimated without the Babel plugin on the Web.\n * @returns A new readonly shared value based on a value returned from the updater function\n * @see https://docs.swmansion.com/react-native-reanimated/docs/core/useDerivedValue\n */\n// @ts-expect-error This overload is required by our API.\nexport function useDerivedValue<Value>(\n  updater: () => Value,\n  dependencies?: DependencyList\n): DerivedValue<Value>;\n\nexport function useDerivedValue<Value>(\n  updater: WorkletFunction<[], Value>,\n  dependencies?: DependencyList\n): DerivedValue<Value> {\n  const initRef = useRef<SharedValue<Value> | null>(null);\n  let inputs = Object.values(updater.__closure ?? {});\n  if (shouldBeUseWeb()) {\n    if (!inputs.length && dependencies?.length) {\n      // let web work without a Babel/SWC plugin\n      inputs = dependencies;\n    }\n  }\n\n  // build dependencies\n  if (dependencies === undefined) {\n    dependencies = [...inputs, updater.__workletHash];\n  } else {\n    dependencies.push(updater.__workletHash);\n  }\n\n  if (initRef.current === null) {\n    initRef.current = makeMutable(initialUpdaterRun(updater));\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  const sharedValue: SharedValue<Value> = initRef.current!;\n\n  useEffect(() => {\n    const fun = () => {\n      'worklet';\n      sharedValue.value = updater();\n    };\n    const mapperId = startMapper(fun, inputs, [sharedValue]);\n    return () => {\n      stopMapper(mapperId);\n    };\n  }, dependencies);\n\n  useEffect(() => {\n    return () => {\n      initRef.current = null;\n    };\n  }, []);\n\n  return sharedValue;\n}\n"],"mappings":"AAAA,YAAY;;AAAA,OAAAA,kBAAA;AACZ,SAASC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AACzC,SAASC,iBAAiB;AAE1B,SAASC,WAAW,EAAEC,WAAW,EAAEC,UAAU;AAE7C,SAASC,cAAc;AAA4B,IAAAC,gCAAA;EAAAC,IAAA;EAAAC,QAAA;EAAAC,SAAA;EAAAC,OAAA;AAAA;AAkBnD,OAAO,SAASC,eAAeA,CAC7BC,OAAmC,EACnCC,YAA6B,EACR;EAAA,IAAAC,kBAAA;EACrB,IAAMC,OAAO,GAAGf,MAAM,CAA4B,IAAI,CAAC;EACvD,IAAIgB,MAAM,GAAGC,MAAM,CAACC,MAAM,EAAAJ,kBAAA,GAACF,OAAO,CAACO,SAAS,YAAAL,kBAAA,GAAI,CAAC,CAAC,CAAC;EACnD,IAAIT,cAAc,EAAE,EAAE;IAAA,IAAAe,aAAA;IACpB,IAAI,CAACJ,MAAM,CAACK,MAAM,KAAAD,aAAA,GAAIP,YAAY,cAAAO,aAAA,eAAZA,aAAA,CAAcC,MAAM,EAAE;MAE1CL,MAAM,GAAGH,YAAY;IACvB;EACF;EAGA,IAAIA,YAAY,KAAKS,SAAS,EAAE;IAC9BT,YAAY,MAAAU,MAAA,CAAAzB,kBAAA,CAAOkB,MAAM,IAAEJ,OAAO,CAACY,aAAa,EAAC;EACnD,CAAC,MAAM;IACLX,YAAY,CAACY,IAAI,CAACb,OAAO,CAACY,aAAa,CAAC;EAC1C;EAEA,IAAIT,OAAO,CAACW,OAAO,KAAK,IAAI,EAAE;IAC5BX,OAAO,CAACW,OAAO,GAAGxB,WAAW,CAACD,iBAAiB,CAACW,OAAO,CAAC,CAAC;EAC3D;EAGA,IAAMe,WAA+B,GAAGZ,OAAO,CAACW,OAAQ;EAExD3B,SAAS,CAAC,YAAM;IACd,IAAM6B,GAAG,GAAG;MAAA,IAAAC,EAAA,QAAAC,MAAA,CAAAC,KAAA;MAAA,IAAAC,SAAA,YAAAA,UAAA,EAAM;QAEhBL,WAAW,CAACM,KAAK,GAAGrB,OAAO,EAAE;MAC/B,CAAC;MAAAoB,SAAA,CAAAb,SAAA;QAAAQ,WAAA,EADCA,WAAW;QAAAf,OAAA,EAASA;MAAO;MAAAoB,SAAA,CAAAR,aAAA;MAAAQ,SAAA,CAAAE,UAAA,GAAA5B,gCAAA;MAAA0B,SAAA,CAAAG,cAAA,GAAAN,EAAA;MAAA,OAAAG,SAAA;IAAA,CAFjB,EAGX;IACD,IAAMI,QAAQ,GAAGjC,WAAW,CAACyB,GAAG,EAAEZ,MAAM,EAAE,CAACW,WAAW,CAAC,CAAC;IACxD,OAAO,YAAM;MACXvB,UAAU,CAACgC,QAAQ,CAAC;IACtB,CAAC;EACH,CAAC,EAAEvB,YAAY,CAAC;EAEhBd,SAAS,CAAC,YAAM;IACd,OAAO,YAAM;MACXgB,OAAO,CAACW,OAAO,GAAG,IAAI;IACxB,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,OAAOC,WAAW;AACpB"},"metadata":{},"sourceType":"module","externalDependencies":[]}