{"ast":null,"code":"'use strict';\n\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport { useEffect, useRef } from 'react';\nimport { initialUpdaterRun } from \"../animation\";\nimport { makeMutable, startMapper, stopMapper } from \"../core\";\nimport { shouldBeUseWeb } from \"../PlatformChecker\";\nexport function useDerivedValue(updater, dependencies) {\n  var _updater$__closure;\n  var initRef = useRef(null);\n  var inputs = Object.values((_updater$__closure = updater.__closure) != null ? _updater$__closure : {});\n  if (shouldBeUseWeb()) {\n    var _dependencies;\n    if (!inputs.length && (_dependencies = dependencies) !== null && _dependencies !== void 0 && _dependencies.length) {\n      inputs = dependencies;\n    }\n  }\n  if (dependencies === undefined) {\n    dependencies = [].concat(_toConsumableArray(inputs), [updater.__workletHash]);\n  } else {\n    dependencies.push(updater.__workletHash);\n  }\n  if (initRef.current === null) {\n    initRef.current = makeMutable(initialUpdaterRun(updater));\n  }\n  var sharedValue = initRef.current;\n  useEffect(function () {\n    var fun = function fun() {\n      'worklet';\n\n      sharedValue.value = updater();\n    };\n    var mapperId = startMapper(fun, inputs, [sharedValue]);\n    return function () {\n      stopMapper(mapperId);\n    };\n  }, dependencies);\n  useEffect(function () {\n    return function () {\n      initRef.current = null;\n    };\n  }, []);\n  return sharedValue;\n}","map":{"version":3,"names":["_toConsumableArray","useEffect","useRef","initialUpdaterRun","makeMutable","startMapper","stopMapper","shouldBeUseWeb","useDerivedValue","updater","dependencies","_updater$__closure","initRef","inputs","Object","values","__closure","_dependencies","length","undefined","concat","__workletHash","push","current","sharedValue","fun","value","mapperId"],"sources":["C:\\Users\\inbal\\Documents\\abilisense-project\\project1\\panic-button\\client\\node_modules\\react-native-reanimated\\lib\\module\\reanimated2\\hook\\useDerivedValue.ts"],"sourcesContent":["'use strict';\nimport { useEffect, useRef } from 'react';\nimport { initialUpdaterRun } from '../animation';\nimport type { SharedValue, WorkletFunction } from '../commonTypes';\nimport { makeMutable, startMapper, stopMapper } from '../core';\nimport type { DependencyList } from './commonTypes';\nimport { shouldBeUseWeb } from '../PlatformChecker';\n\nexport type DerivedValue<Value> = Readonly<SharedValue<Value>>;\n\n/**\n * Lets you create new shared values based on existing ones while keeping them reactive.\n *\n * @param updater - A function called whenever at least one of the shared values or state used in the function body changes.\n * @param dependencies - An optional array of dependencies. Only relevant when using Reanimated without the Babel plugin on the Web.\n * @returns A new readonly shared value based on a value returned from the updater function\n * @see https://docs.swmansion.com/react-native-reanimated/docs/core/useDerivedValue\n */\n// @ts-expect-error This overload is required by our API.\nexport function useDerivedValue<Value>(\n  updater: () => Value,\n  dependencies?: DependencyList\n): DerivedValue<Value>;\n\nexport function useDerivedValue<Value>(\n  updater: WorkletFunction<[], Value>,\n  dependencies?: DependencyList\n): DerivedValue<Value> {\n  const initRef = useRef<SharedValue<Value> | null>(null);\n  let inputs = Object.values(updater.__closure ?? {});\n  if (shouldBeUseWeb()) {\n    if (!inputs.length && dependencies?.length) {\n      // let web work without a Babel/SWC plugin\n      inputs = dependencies;\n    }\n  }\n\n  // build dependencies\n  if (dependencies === undefined) {\n    dependencies = [...inputs, updater.__workletHash];\n  } else {\n    dependencies.push(updater.__workletHash);\n  }\n\n  if (initRef.current === null) {\n    initRef.current = makeMutable(initialUpdaterRun(updater));\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  const sharedValue: SharedValue<Value> = initRef.current!;\n\n  useEffect(() => {\n    const fun = () => {\n      'worklet';\n      sharedValue.value = updater();\n    };\n    const mapperId = startMapper(fun, inputs, [sharedValue]);\n    return () => {\n      stopMapper(mapperId);\n    };\n  }, dependencies);\n\n  useEffect(() => {\n    return () => {\n      initRef.current = null;\n    };\n  }, []);\n\n  return sharedValue;\n}\n"],"mappings":"AAAA,YAAY;;AAAA,OAAAA,kBAAA;AACZ,SAASC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AACzC,SAASC,iBAAiB;AAE1B,SAASC,WAAW,EAAEC,WAAW,EAAEC,UAAU;AAE7C,SAASC,cAAc;AAkBvB,OAAO,SAASC,eAAeA,CAC7BC,OAAmC,EACnCC,YAA6B,EACR;EAAA,IAAAC,kBAAA;EACrB,IAAMC,OAAO,GAAGV,MAAM,CAA4B,IAAI,CAAC;EACvD,IAAIW,MAAM,GAAGC,MAAM,CAACC,MAAM,EAAAJ,kBAAA,GAACF,OAAO,CAACO,SAAS,YAAAL,kBAAA,GAAI,CAAC,CAAC,CAAC;EACnD,IAAIJ,cAAc,EAAE,EAAE;IAAA,IAAAU,aAAA;IACpB,IAAI,CAACJ,MAAM,CAACK,MAAM,KAAAD,aAAA,GAAIP,YAAY,cAAAO,aAAA,eAAZA,aAAA,CAAcC,MAAM,EAAE;MAE1CL,MAAM,GAAGH,YAAY;IACvB;EACF;EAGA,IAAIA,YAAY,KAAKS,SAAS,EAAE;IAC9BT,YAAY,MAAAU,MAAA,CAAApB,kBAAA,CAAOa,MAAM,IAAEJ,OAAO,CAACY,aAAa,EAAC;EACnD,CAAC,MAAM;IACLX,YAAY,CAACY,IAAI,CAACb,OAAO,CAACY,aAAa,CAAC;EAC1C;EAEA,IAAIT,OAAO,CAACW,OAAO,KAAK,IAAI,EAAE;IAC5BX,OAAO,CAACW,OAAO,GAAGnB,WAAW,CAACD,iBAAiB,CAACM,OAAO,CAAC,CAAC;EAC3D;EAGA,IAAMe,WAA+B,GAAGZ,OAAO,CAACW,OAAQ;EAExDtB,SAAS,CAAC,YAAM;IACd,IAAMwB,GAAG,GAAG,SAANA,GAAGA,CAAA,EAAS;MAChB,SAAS;;MACTD,WAAW,CAACE,KAAK,GAAGjB,OAAO,EAAE;IAC/B,CAAC;IACD,IAAMkB,QAAQ,GAAGtB,WAAW,CAACoB,GAAG,EAAEZ,MAAM,EAAE,CAACW,WAAW,CAAC,CAAC;IACxD,OAAO,YAAM;MACXlB,UAAU,CAACqB,QAAQ,CAAC;IACtB,CAAC;EACH,CAAC,EAAEjB,YAAY,CAAC;EAEhBT,SAAS,CAAC,YAAM;IACd,OAAO,YAAM;MACXW,OAAO,CAACW,OAAO,GAAG,IAAI;IACxB,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,OAAOC,WAAW;AACpB"},"metadata":{},"sourceType":"module","externalDependencies":[]}