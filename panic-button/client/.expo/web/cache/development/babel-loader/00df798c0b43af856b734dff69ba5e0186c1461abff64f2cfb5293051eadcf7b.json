{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { useNavigation } from '@react-navigation/native';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar MedicalConditionsComponent = function MedicalConditionsComponent() {\n  var navigation = useNavigation();\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    selectedConditions = _useState2[0],\n    setSelectedConditions = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    newCondition = _useState4[0],\n    setNewCondition = _useState4[1];\n  var addCondition = function addCondition(condition) {\n    setSelectedConditions([].concat(_toConsumableArray(selectedConditions), [condition]));\n  };\n  var removeCondition = function removeCondition(condition) {\n    var updatedConditions = selectedConditions.filter(function (c) {\n      return c !== condition;\n    });\n    setSelectedConditions(updatedConditions);\n  };\n  var renderConditions = function renderConditions() {\n    return selectedConditions.map(function (condition, index) {\n      return _jsxs(View, {\n        style: styles.conditionBox,\n        children: [_jsx(Text, {\n          children: condition\n        }), _jsx(TouchableOpacity, {\n          onPress: function onPress() {\n            return removeCondition(condition);\n          },\n          children: _jsx(Text, {\n            style: styles.removeButton,\n            children: \"X\"\n          })\n        })]\n      }, index);\n    });\n  };\n  var handleSelectConditions = function handleSelectConditions() {\n    navigation.navigate('MedicalConditionsList', {\n      onSelectCondition: addCondition\n    });\n  };\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(View, {\n      style: styles.selectedConditionsContainer,\n      children: renderConditions()\n    }), _jsxs(View, {\n      style: styles.inputContainer,\n      children: [_jsx(TextInput, {\n        style: styles.input,\n        placeholder: \"Add a new medical condition\",\n        value: newCondition,\n        onChangeText: function onChangeText(text) {\n          return setNewCondition(text);\n        }\n      }), _jsx(TouchableOpacity, {\n        onPress: function onPress() {\n          return addCondition(newCondition);\n        },\n        children: _jsx(Text, {\n          style: styles.addButton,\n          children: \"Add\"\n        })\n      })]\n    }), _jsx(TouchableOpacity, {\n      style: styles.loginButton,\n      children: _jsx(Text, {\n        style: {\n          color: 'white'\n        },\n        children: \"Login\"\n      })\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 20\n  },\n  selectedConditionsContainer: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    marginVertical: 10\n  },\n  conditionBox: {\n    backgroundColor: '#e0e0e0',\n    borderRadius: 20,\n    padding: 10,\n    margin: 5,\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  removeButton: {\n    marginLeft: 5,\n    color: 'red'\n  },\n  inputContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginVertical: 10\n  },\n  input: {\n    flex: 1,\n    borderWidth: 1,\n    borderRadius: 10,\n    padding: 10,\n    marginRight: 10\n  },\n  addButton: {\n    color: 'blue'\n  },\n  loginButton: {\n    backgroundColor: 'blue',\n    borderRadius: 10,\n    padding: 15,\n    alignItems: 'center',\n    marginTop: 20\n  },\n  selectConditionsButton: {\n    backgroundColor: 'yellow',\n    borderRadius: 10,\n    padding: 15,\n    alignItems: 'center',\n    marginTop: 20\n  },\n  selectConditionsButtonText: {\n    color: 'black',\n    fontSize: 18,\n    fontWeight: 'bold'\n  }\n});\nexport default MedicalConditionsComponent;","map":{"version":3,"names":["React","useState","View","Text","TouchableOpacity","TextInput","ScrollView","StyleSheet","useNavigation","jsx","_jsx","jsxs","_jsxs","MedicalConditionsComponent","navigation","_useState","_useState2","_slicedToArray","selectedConditions","setSelectedConditions","_useState3","_useState4","newCondition","setNewCondition","addCondition","condition","concat","_toConsumableArray","removeCondition","updatedConditions","filter","c","renderConditions","map","index","style","styles","conditionBox","children","onPress","removeButton","handleSelectConditions","navigate","onSelectCondition","container","selectedConditionsContainer","inputContainer","input","placeholder","value","onChangeText","text","addButton","loginButton","color","create","flex","padding","flexDirection","flexWrap","marginVertical","backgroundColor","borderRadius","margin","alignItems","marginLeft","borderWidth","marginRight","marginTop","selectConditionsButton","selectConditionsButtonText","fontSize","fontWeight"],"sources":["C:/Users/n0548/Desktop/Abilisence Project/project1/panic-button/client/components/signUp/SignUp3.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { View, Text, TouchableOpacity, TextInput, ScrollView, StyleSheet } from 'react-native';\r\nimport { useNavigation } from '@react-navigation/native';\r\n\r\nconst MedicalConditionsComponent = () => {\r\n  const navigation = useNavigation();\r\n\r\n  const [selectedConditions, setSelectedConditions] = useState([]);\r\n  const [newCondition, setNewCondition] = useState('');\r\n\r\n  const addCondition = (condition) => {\r\n    setSelectedConditions([...selectedConditions, condition]);\r\n  };\r\n\r\n  const removeCondition = (condition) => {\r\n    const updatedConditions = selectedConditions.filter((c) => c !== condition);\r\n    setSelectedConditions(updatedConditions);\r\n  };\r\n\r\n  const renderConditions = () => {\r\n    return selectedConditions.map((condition, index) => (\r\n      <View key={index} style={styles.conditionBox}>\r\n        <Text>{condition}</Text>\r\n        <TouchableOpacity onPress={() => removeCondition(condition)}>\r\n          <Text style={styles.removeButton}>X</Text>\r\n        </TouchableOpacity>\r\n      </View>\r\n    ));\r\n  };\r\n\r\n  const handleSelectConditions = () => {\r\n    navigation.navigate('MedicalConditionsList', {\r\n      onSelectCondition: addCondition,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      {/* Display selected conditions */}\r\n      <View style={styles.selectedConditionsContainer}>{renderConditions()}</View>\r\n\r\n      {/* Input for adding new condition */}\r\n      <View style={styles.inputContainer}>\r\n        <TextInput\r\n          style={styles.input}\r\n          placeholder=\"Add a new medical condition\"\r\n          value={newCondition}\r\n          onChangeText={(text) => setNewCondition(text)}\r\n        />\r\n        <TouchableOpacity onPress={() => addCondition(newCondition)}>\r\n          <Text style={styles.addButton}>Add</Text>\r\n        </TouchableOpacity>\r\n      </View>\r\n\r\n      {/* Login button */}\r\n      <TouchableOpacity style={styles.loginButton}>\r\n        <Text style={{ color: 'white' }}>Login</Text>\r\n      </TouchableOpacity>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    padding: 20,\r\n  },\r\n  selectedConditionsContainer: {\r\n    flexDirection: 'row',\r\n    flexWrap: 'wrap',\r\n    marginVertical: 10,\r\n  },\r\n  conditionBox: {\r\n    backgroundColor: '#e0e0e0',\r\n    borderRadius: 20,\r\n    padding: 10,\r\n    margin: 5,\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n  },\r\n  removeButton: {\r\n    marginLeft: 5,\r\n    color: 'red',\r\n  },\r\n  inputContainer: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    marginVertical: 10,\r\n  },\r\n  input: {\r\n    flex: 1,\r\n    borderWidth: 1,\r\n    borderRadius: 10,\r\n    padding: 10,\r\n    marginRight: 10,\r\n  },\r\n  addButton: {\r\n    color: 'blue',\r\n  },\r\n  loginButton: {\r\n    backgroundColor: 'blue',\r\n    borderRadius: 10,\r\n    padding: 15,\r\n    alignItems: 'center',\r\n    marginTop: 20,\r\n  },\r\n  selectConditionsButton: {\r\n    backgroundColor: 'yellow',\r\n    borderRadius: 10,\r\n    padding: 15,\r\n    alignItems: 'center',\r\n    marginTop: 20,\r\n  },\r\n  selectConditionsButtonText: {\r\n    color: 'black',\r\n    fontSize: 18,\r\n    fontWeight: 'bold',\r\n  },\r\n});\r\n\r\nexport default MedicalConditionsComponent;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}