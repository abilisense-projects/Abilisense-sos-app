{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React from 'react';\nimport axios from 'axios';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport { sendVerificationCode } from \"./verifyEmailFunctions\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar ResetPassword = function ResetPassword(_ref) {\n  var email = _ref.email,\n    onEmailChange = _ref.onEmailChange,\n    onStepChange = _ref.onStepChange;\n  var _React$useState = React.useState(''),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    messageToUser = _React$useState2[0],\n    onChangeMessageToUser = _React$useState2[1];\n  var _React$useState3 = React.useState(''),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    emailInput = _React$useState4[0],\n    setEmailInput = _React$useState4[1];\n  var checkIfEmailExists = function () {\n    var _ref2 = _asyncToGenerator(function* (email) {\n      try {\n        return yield axios.post(`http://localhost:3000/api/patients/get-by-email/`, {\n          email: email\n        }).then(function (response) {\n          console.log('Data:', response.data);\n          return response.data;\n        }).catch(function (error) {\n          console.error('Error:', error);\n        });\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    });\n    return function checkIfEmailExists(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var handleVerificationCode = function () {\n    var _ref3 = _asyncToGenerator(function* () {\n      var result = yield checkIfEmailExists(emailInput);\n      console.log(\"result:\", result);\n      if (!result) {\n        onChangeMessageToUser('not valid email');\n      } else {\n        onChangeMessageToUser('succeeded!');\n        yield sendVerificationCode(emailInput);\n        onEmailChange(emailInput);\n        onStepChange();\n      }\n    });\n    return function handleVerificationCode() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  return _jsxs(View, {\n    children: [_jsx(Text, {\n      children: \"enter an email address:\"\n    }), _jsx(TextInput, {\n      onChangeText: setEmailInput,\n      value: emailInput\n    }), _jsx(Button, {\n      title: \"send me verification code\",\n      onPress: handleVerificationCode\n    }), _jsx(Text, {\n      children: messageToUser\n    })]\n  });\n};\nexport default ResetPassword;","map":{"version":3,"names":["React","axios","View","Text","Button","TextInput","sendVerificationCode","jsx","_jsx","jsxs","_jsxs","ResetPassword","_ref","email","onEmailChange","onStepChange","_React$useState","useState","_React$useState2","_slicedToArray","messageToUser","onChangeMessageToUser","_React$useState3","_React$useState4","emailInput","setEmailInput","checkIfEmailExists","_ref2","_asyncToGenerator","post","then","response","console","log","data","catch","error","_x","apply","arguments","handleVerificationCode","_ref3","result","children","onChangeText","value","title","onPress"],"sources":["C:/Users/inbal/Documents/abilisense-project/project1/panic-button/client/components/forget_password/reset_password.js"],"sourcesContent":["import React from 'react';\r\nimport axios from 'axios';\r\nimport { View, Text, Button, TextInput } from 'react-native';\r\nimport { sendVerificationCode } from './verifyEmailFunctions';\r\nconst ResetPassword = ({email, onEmailChange, onStepChange}) => {\r\n    const [messageToUser, onChangeMessageToUser] = React.useState('');\r\n    const [emailInput, setEmailInput] = React.useState('');\r\n\r\n    const checkIfEmailExists = async (email) => {\r\n        try {\r\n            return await axios.post(`http://localhost:3000/api/patients/get-by-email/`, { email })\r\n                .then(response => {\r\n                    console.log('Data:', response.data);\r\n                    return response.data;\r\n                })\r\n                .catch(error => {\r\n                    console.error('Error:', error);\r\n                });\r\n        }\r\n        catch (error) {\r\n            console.error('Error fetching data:', error);\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    const handleVerificationCode = async () => {\r\n        const result = await checkIfEmailExists(emailInput);\r\n        console.log(\"result:\", result);\r\n        if (!result) {\r\n            onChangeMessageToUser('not valid email');\r\n        } else {\r\n            onChangeMessageToUser('succeeded!');\r\n            await sendVerificationCode(emailInput);\r\n            //nevigate to the next step and pass the email input to the parent component\r\n            onEmailChange(emailInput);\r\n            onStepChange()        }\r\n    }\r\n\r\n    return (\r\n        <View>\r\n            <Text>enter an email address:</Text>\r\n            <TextInput\r\n                onChangeText={setEmailInput}\r\n                value={emailInput}\r\n            />\r\n            <Button title='send me verification code' onPress={handleVerificationCode}></Button>\r\n            <Text>{messageToUser}</Text>\r\n        </View>\r\n    )\r\n}\r\n\r\nexport default ResetPassword;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,MAAM,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,MAAA;AAAA,OAAAC,SAAA;AAE1B,SAASC,oBAAoB;AAAiC,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAC9D,IAAMC,aAAa,GAAG,SAAhBA,aAAaA,CAAAC,IAAA,EAA6C;EAAA,IAAxCC,KAAK,GAAAD,IAAA,CAALC,KAAK;IAAEC,aAAa,GAAAF,IAAA,CAAbE,aAAa;IAAEC,YAAY,GAAAH,IAAA,CAAZG,YAAY;EACtD,IAAAC,eAAA,GAA+ChB,KAAK,CAACiB,QAAQ,CAAC,EAAE,CAAC;IAAAC,gBAAA,GAAAC,cAAA,CAAAH,eAAA;IAA1DI,aAAa,GAAAF,gBAAA;IAAEG,qBAAqB,GAAAH,gBAAA;EAC3C,IAAAI,gBAAA,GAAoCtB,KAAK,CAACiB,QAAQ,CAAC,EAAE,CAAC;IAAAM,gBAAA,GAAAJ,cAAA,CAAAG,gBAAA;IAA/CE,UAAU,GAAAD,gBAAA;IAAEE,aAAa,GAAAF,gBAAA;EAEhC,IAAMG,kBAAkB;IAAA,IAAAC,KAAA,GAAAC,iBAAA,CAAG,WAAOf,KAAK,EAAK;MACxC,IAAI;QACA,aAAaZ,KAAK,CAAC4B,IAAI,CAAE,kDAAiD,EAAE;UAAEhB,KAAK,EAALA;QAAM,CAAC,CAAC,CACjFiB,IAAI,CAAC,UAAAC,QAAQ,EAAI;UACdC,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEF,QAAQ,CAACG,IAAI,CAAC;UACnC,OAAOH,QAAQ,CAACG,IAAI;QACxB,CAAC,CAAC,CACDC,KAAK,CAAC,UAAAC,KAAK,EAAI;UACZJ,OAAO,CAACI,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;QAClC,CAAC,CAAC;MACV,CAAC,CACD,OAAOA,KAAK,EAAE;QACVJ,OAAO,CAACI,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAChD;IAEJ,CAAC;IAAA,gBAfKV,kBAAkBA,CAAAW,EAAA;MAAA,OAAAV,KAAA,CAAAW,KAAA,OAAAC,SAAA;IAAA;EAAA,GAevB;EAID,IAAMC,sBAAsB;IAAA,IAAAC,KAAA,GAAAb,iBAAA,CAAG,aAAY;MACvC,IAAMc,MAAM,SAAShB,kBAAkB,CAACF,UAAU,CAAC;MACnDQ,OAAO,CAACC,GAAG,CAAC,SAAS,EAAES,MAAM,CAAC;MAC9B,IAAI,CAACA,MAAM,EAAE;QACTrB,qBAAqB,CAAC,iBAAiB,CAAC;MAC5C,CAAC,MAAM;QACHA,qBAAqB,CAAC,YAAY,CAAC;QACnC,MAAMf,oBAAoB,CAACkB,UAAU,CAAC;QAEtCV,aAAa,CAACU,UAAU,CAAC;QACzBT,YAAY,CAAC,CAAC;MAAQ;IAC9B,CAAC;IAAA,gBAXKyB,sBAAsBA,CAAA;MAAA,OAAAC,KAAA,CAAAH,KAAA,OAAAC,SAAA;IAAA;EAAA,GAW3B;EAED,OACI7B,KAAA,CAACR,IAAI;IAAAyC,QAAA,GACDnC,IAAA,CAACL,IAAI;MAAAwC,QAAA,EAAC;IAAuB,CAAM,CAAC,EACpCnC,IAAA,CAACH,SAAS;MACNuC,YAAY,EAAEnB,aAAc;MAC5BoB,KAAK,EAAErB;IAAW,CACrB,CAAC,EACFhB,IAAA,CAACJ,MAAM;MAAC0C,KAAK,EAAC,2BAA2B;MAACC,OAAO,EAAEP;IAAuB,CAAS,CAAC,EACpFhC,IAAA,CAACL,IAAI;MAAAwC,QAAA,EAAEvB;IAAa,CAAO,CAAC;EAAA,CAC1B,CAAC;AAEf,CAAC;AAED,eAAeT,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}