{"ast":null,"code":"import * as Yup from 'yup';\nexport var signUpValidationSchema = Yup.object().shape({\n  firstname: Yup.string().required('First name is required').matches(/^[A-Za-zא-ת]+$/, 'First name should only contain alphabets').max(50, 'First name is too long'),\n  lastname: Yup.string().required('Last name is required').matches(/^[A-Za-zא-ת]+$/, 'Last name should only contain alphabets').max(50, 'Last name is too long'),\n  email: Yup.string().required('Email is required').email('Invalid email address'),\n  password: Yup.string().required('Password is required').min(12, 'Your password must contain at least 12 characters').matches(/^(?=.*[a-zA-Zא-ת])(?=.*\\d)/, 'Password must contain at least:\\n  one letter and one number'),\n  phoneNumber: Yup.string().required('Phone Number is required').matches(/^[0-9]+$/, 'Phone number should only contain digits'),\n  country: Yup.string(),\n  city: Yup.string(),\n  street: Yup.string(),\n  buildingNumber: Yup.n,\n  entrance: Yup.string(),\n  floor: Yup.string(),\n  apartmentNumber: Yup.string(),\n  additionalNotes: Yup.string(),\n  dob: Yup.string().required('Date of Birth is required').matches(/^(19|20)\\d\\d-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/, 'Invalid Date of Birth format. Please use YYYY-MM-DD')\n});","map":{"version":3,"names":["Yup","signUpValidationSchema","object","shape","firstname","string","required","matches","max","lastname","email","password","min","phoneNumber","country","city","street","buildingNumber","n","entrance","floor","apartmentNumber","additionalNotes","dob"],"sources":["C:/Users/n0548/Desktop/Abilisence Project/project1/panic-button/client/config/validations.js"],"sourcesContent":["import * as Yup from 'yup';\r\n\r\nexport const signUpValidationSchema = Yup.object().shape({\r\n  firstname: Yup.string()\r\n    .required('First name is required')\r\n    .matches(/^[A-Za-zא-ת]+$/, 'First name should only contain alphabets')\r\n    .max(50, 'First name is too long'),\r\n\r\n  lastname: Yup.string()\r\n    .required('Last name is required')\r\n    .matches(/^[A-Za-zא-ת]+$/, 'Last name should only contain alphabets')\r\n    .max(50, 'Last name is too long'),\r\n\r\n  email: Yup.string().required('Email is required').email('Invalid email address'),\r\n\r\n  password: Yup.string()\r\n    .required('Password is required')\r\n    .min(12, 'Your password must contain at least 12 characters')\r\n    .matches(/^(?=.*[a-zA-Zא-ת])(?=.*\\d)/, 'Password must contain at least:\\n  one letter and one number'),\r\n\r\n\r\n  phoneNumber: Yup.string()\r\n    .required('Phone Number is required')\r\n    .matches(/^[0-9]+$/, 'Phone number should only contain digits'),\r\n\r\n  country: Yup.string(),\r\n  city: Yup.string(),\r\n  street: Yup.string(),\r\n  buildingNumber: Yup.n,\r\n  entrance: Yup.string(),\r\n  floor: Yup.string(),\r\n  apartmentNumber: Yup.string(),\r\n  additionalNotes: Yup.string(),\r\n\r\n  dob: Yup.string()\r\n    .required('Date of Birth is required')\r\n    .matches(/^(19|20)\\d\\d-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/, 'Invalid Date of Birth format. Please use YYYY-MM-DD'),\r\n  });\r\n\r\n\r\n    // phoneNumber: Yup.string().matches(/^\\d+$/, 'Phone number should only contain digits').required('Phone number is required'),\r\n    // country: Yup.string().required('Country is required'),\r\n    // city: Yup.string().required('City is required'),\r\n    // street: Yup.string().required('Street is required'),\r\n    // streetNum: Yup.string().required('Street number is required'),\r\n    // entrance: Yup.string().required('Entrance is required'),\r\n    // houseNumber: Yup.string().required('House number is required'),\r\n    // dob: Yup.date().required('Date of birth is required').nullable(),\r\n  // });\r\n\r\n  //   phoneNumber: Yup.string()\r\n  //   .required('Phone Number is required')\r\n  //   .matches(/^[0-9]+$/, 'Phone number should only contain digits'),\r\n\r\n  // country: Yup.string(),\r\n  // city: Yup.string(),\r\n  // street: Yup.string(),\r\n  // streetNum: Yup.string(),\r\n  // entrance: Yup.string(),\r\n  // houseNumber: Yup.string(),\r\n\r\n  // dob: Yup.string()\r\n  //   .required('Date of Birth is required')\r\n  //   .matches(/^(19|20)\\d\\d-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/, 'Invalid Date of Birth format. Please use YYYY-MM-DD'),\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import * as Yup from 'yup';\r\n\r\n// export const signUpValidationSchema = Yup.object().shape({\r\n//   firstname: Yup.string()\r\n//     .required('First name is required')\r\n//     .matches(/^[A-Za-zא-ת]+$/, 'First name should only contain alphabets')\r\n//     .max(50, 'First name is too long'),\r\n\r\n//   lastname: Yup.string()\r\n//     .required('Last name is required')\r\n//     .matches(/^[A-Za-zא-ת]+$/, 'Last name should only contain alphabets')\r\n//     .max(50, 'Last name is too long'),\r\n\r\n//   email: Yup.string().required('Email is required').email('Invalid email address'),\r\n\r\n//   password: Yup.string()\r\n//     .required('Password is required')\r\n//     .min(12, 'Your password must contain at least 12 characters')\r\n//     .matches(/^(?=.*[a-zA-Zא-ת])(?=.*\\d)/, 'Password must contain at least:\\n  one letter and one number'),\r\n\r\n//   phoneNumber: Yup.string()\r\n//     .required('Phone Number is required')\r\n//     .matches(/^[0-9]+$/, 'Phone number should only contain digits'),\r\n\r\n//   country: Yup.string(),\r\n//   city: Yup.string(),\r\n//   street: Yup.string(),\r\n//   streetNum: Yup.string(),\r\n//   entrance: Yup.string(),\r\n//   houseNumber: Yup.string(),\r\n\r\n//   dob: Yup.string()\r\n//     .required('Date of Birth is required')\r\n//     .matches(/^(19|20)\\d\\d-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/, 'Invalid Date of Birth format. Please use YYYY-MM-DD'),\r\n// });\r\n\r\n\r\n//ישן\r\n// import * as Yup from 'yup';\r\n\r\n// export const signUpValidationSchema = Yup.object().shape({\r\n//     firstname: Yup.string()\r\n//         .required('First name is required')\r\n//         .matches(/^[A-Za-zא-ת]+$/, 'First name should only contain alphabets')\r\n//         .max(50, 'First name is too long'),\r\n    \r\n//     lastname: Yup.string()\r\n//         .required('Last name is required')\r\n//         .matches(/^[A-Za-zא-ת]+$/, 'Last name should only contain alphabets')\r\n//         .max(50, 'Last name is too long'),\r\n\r\n//     email: Yup.string().required('Email is required').email('Invalid email address'),\r\n\r\n//     password: Yup.string()\r\n//         .required('Password is required')\r\n//         .min(12, 'Your password must contain at least 12 characters')\r\n//         .matches(\r\n//             /^(?=.*[a-zA-Zא-ת])(?=.*\\d)/,\r\n//             'Password must contain at least:\\n  one letter and one number'\r\n//         ),\r\n// });"],"mappings":"AAAA,OAAO,KAAKA,GAAG,MAAM,KAAK;AAE1B,OAAO,IAAMC,sBAAsB,GAAGD,GAAG,CAACE,MAAM,CAAC,CAAC,CAACC,KAAK,CAAC;EACvDC,SAAS,EAAEJ,GAAG,CAACK,MAAM,CAAC,CAAC,CACpBC,QAAQ,CAAC,wBAAwB,CAAC,CAClCC,OAAO,CAAC,gBAAgB,EAAE,0CAA0C,CAAC,CACrEC,GAAG,CAAC,EAAE,EAAE,wBAAwB,CAAC;EAEpCC,QAAQ,EAAET,GAAG,CAACK,MAAM,CAAC,CAAC,CACnBC,QAAQ,CAAC,uBAAuB,CAAC,CACjCC,OAAO,CAAC,gBAAgB,EAAE,yCAAyC,CAAC,CACpEC,GAAG,CAAC,EAAE,EAAE,uBAAuB,CAAC;EAEnCE,KAAK,EAAEV,GAAG,CAACK,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,mBAAmB,CAAC,CAACI,KAAK,CAAC,uBAAuB,CAAC;EAEhFC,QAAQ,EAAEX,GAAG,CAACK,MAAM,CAAC,CAAC,CACnBC,QAAQ,CAAC,sBAAsB,CAAC,CAChCM,GAAG,CAAC,EAAE,EAAE,mDAAmD,CAAC,CAC5DL,OAAO,CAAC,4BAA4B,EAAE,8DAA8D,CAAC;EAGxGM,WAAW,EAAEb,GAAG,CAACK,MAAM,CAAC,CAAC,CACtBC,QAAQ,CAAC,0BAA0B,CAAC,CACpCC,OAAO,CAAC,UAAU,EAAE,yCAAyC,CAAC;EAEjEO,OAAO,EAAEd,GAAG,CAACK,MAAM,CAAC,CAAC;EACrBU,IAAI,EAAEf,GAAG,CAACK,MAAM,CAAC,CAAC;EAClBW,MAAM,EAAEhB,GAAG,CAACK,MAAM,CAAC,CAAC;EACpBY,cAAc,EAAEjB,GAAG,CAACkB,CAAC;EACrBC,QAAQ,EAAEnB,GAAG,CAACK,MAAM,CAAC,CAAC;EACtBe,KAAK,EAAEpB,GAAG,CAACK,MAAM,CAAC,CAAC;EACnBgB,eAAe,EAAErB,GAAG,CAACK,MAAM,CAAC,CAAC;EAC7BiB,eAAe,EAAEtB,GAAG,CAACK,MAAM,CAAC,CAAC;EAE7BkB,GAAG,EAAEvB,GAAG,CAACK,MAAM,CAAC,CAAC,CACdC,QAAQ,CAAC,2BAA2B,CAAC,CACrCC,OAAO,CAAC,wDAAwD,EAAE,qDAAqD;AAC1H,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}