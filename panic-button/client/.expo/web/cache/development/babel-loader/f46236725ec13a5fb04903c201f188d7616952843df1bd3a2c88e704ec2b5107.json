{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar MedicalConditionsList = function MedicalConditionsList(_ref) {\n  var route = _ref.route,\n    navigation = _ref.navigation;\n  var onSelectCondition = route.params.onSelectCondition;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isModalVisible = _useState2[0],\n    setModalVisible = _useState2[1];\n  var medicalConditions = ['Gallstones', 'Myocarditis', 'Infertility in Men', 'Infertility in Women', 'Chronic Instability of the Ankle', 'Alzheimer\\'s Disease', 'Endometriosis', 'Insulin', 'Asthma of the Skin in Children', 'Hammer Finger'];\n  var handleSelectCondition = function handleSelectCondition(condition) {\n    onSelectCondition(condition);\n  };\n  var toggleModal = function toggleModal() {\n    console.log(\"Close button!!!!!!!!!\");\n    setModalVisible(!isModalVisible);\n  };\n  var renderMedicalConditions = function renderMedicalConditions() {\n    return medicalConditions.map(function (condition, index) {\n      return _jsx(TouchableOpacity, {\n        onPress: function onPress() {\n          return handleSelectCondition(condition);\n        },\n        style: styles.conditionButton,\n        children: _jsx(Text, {\n          children: condition\n        })\n      }, index);\n    });\n  };\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      children: \"List of Medical Conditions:\"\n    }), medicalConditions.map(function (condition, index) {\n      return _jsx(TouchableOpacity, {\n        onPress: function onPress() {\n          return handleSelectCondition(condition);\n        },\n        style: styles.conditionButton,\n        children: _jsx(Text, {\n          children: condition\n        })\n      }, index);\n    }), \"Modal for displaying medical conditions\", _jsx(Modal, {\n      visible: isModalVisible,\n      animationType: \"slide\",\n      transparent: true,\n      children: _jsx(View, {\n        style: styles.modalContainer,\n        children: _jsxs(ScrollView, {\n          children: [renderMedicalConditions(), _jsx(TouchableOpacity, {\n            onPress: function onPress() {\n              toggleModal();\n              navigation.goBack();\n            },\n            style: styles.closeModalButton,\n            children: _jsx(Text, {\n              children: \"Close1!!!!!!!!!!!!\"\n            })\n          })]\n        })\n      })\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 20\n  },\n  conditionButton: {\n    backgroundColor: '#e0e0e0',\n    borderRadius: 10,\n    padding: 10,\n    marginVertical: 5,\n    alignItems: 'center'\n  },\n  modalContainer: {\n    flex: 1,\n    backgroundColor: 'white',\n    padding: 20\n  },\n  closeModalButton: {\n    backgroundColor: '#454',\n    borderRadius: 10,\n    padding: 10,\n    marginVertical: 5,\n    alignItems: 'center'\n  }\n});\nexport default MedicalConditionsList;","map":{"version":3,"names":["React","useState","View","Text","TouchableOpacity","StyleSheet","Modal","ScrollView","jsx","_jsx","jsxs","_jsxs","MedicalConditionsList","_ref","route","navigation","onSelectCondition","params","_useState","_useState2","_slicedToArray","isModalVisible","setModalVisible","medicalConditions","handleSelectCondition","condition","toggleModal","console","log","renderMedicalConditions","map","index","onPress","style","styles","conditionButton","children","container","visible","animationType","transparent","modalContainer","goBack","closeModalButton","create","flex","padding","backgroundColor","borderRadius","marginVertical","alignItems"],"sources":["C:/Users/n0548/Desktop/Abilisence Project/project1/panic-button/client/components/signUp/MedicalConditionsList.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { View, Text, TouchableOpacity, StyleSheet, Modal, ScrollView } from 'react-native';\r\n\r\nconst MedicalConditionsList = ({ route, navigation }) => {\r\n  const { onSelectCondition } = route.params;\r\n  const [isModalVisible, setModalVisible] = useState(false);\r\n\r\n  const medicalConditions = [\r\n    'Gallstones', 'Myocarditis', 'Infertility in Men', 'Infertility in Women', 'Chronic Instability of the Ankle', \r\n    'Alzheimer\\'s Disease', 'Endometriosis', 'Insulin', 'Asthma of the Skin in Children', 'Hammer Finger', /* ... add other conditions */\r\n  ];\r\n\r\n  const handleSelectCondition = (condition) => {\r\n    onSelectCondition(condition);\r\n  };\r\n\r\n  const toggleModal = () => {\r\n    console.log(\"Close button!!!!!!!!!\");\r\n    setModalVisible(!isModalVisible);\r\n  };\r\n\r\n  const renderMedicalConditions = () => {\r\n    return medicalConditions.map((condition, index) => (\r\n      <TouchableOpacity\r\n        key={index}\r\n        onPress={() => handleSelectCondition(condition)}\r\n        style={styles.conditionButton}\r\n      >\r\n        <Text>{condition}</Text>\r\n      </TouchableOpacity>\r\n    ));\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <Text>List of Medical Conditions:</Text>\r\n      {medicalConditions.map((condition, index) => (\r\n        <TouchableOpacity\r\n          key={index}\r\n          onPress={() => handleSelectCondition(condition)}\r\n          style={styles.conditionButton}\r\n        >\r\n          <Text>{condition}</Text>\r\n        </TouchableOpacity>\r\n      ))}\r\n\r\n      Modal for displaying medical conditions\r\n      <Modal visible={isModalVisible} animationType=\"slide\" transparent={true}>\r\n        <View style={styles.modalContainer}>\r\n          <ScrollView>\r\n            {renderMedicalConditions()}\r\n            {/* Close button for the modal */}\r\n            <TouchableOpacity onPress={() => { toggleModal(); navigation.goBack(); }} style={styles.closeModalButton}>\r\n              <Text>Close1!!!!!!!!!!!!</Text>\r\n            </TouchableOpacity>\r\n          </ScrollView>\r\n        </View>\r\n      </Modal>\r\n      \r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    padding: 20,\r\n  },\r\n  conditionButton: {\r\n    backgroundColor: '#e0e0e0',\r\n    borderRadius: 10,\r\n    padding: 10,\r\n    marginVertical: 5,\r\n    alignItems: 'center',\r\n  },\r\n  modalContainer: {\r\n    flex: 1,\r\n    backgroundColor: 'white',\r\n    padding: 20,\r\n  },\r\n  closeModalButton: {\r\n    backgroundColor: '#454',\r\n    borderRadius: 10,\r\n    padding: 10,\r\n    marginVertical: 5,\r\n    alignItems: 'center',\r\n  },\r\n});\r\n\r\nexport default MedicalConditionsList;\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}