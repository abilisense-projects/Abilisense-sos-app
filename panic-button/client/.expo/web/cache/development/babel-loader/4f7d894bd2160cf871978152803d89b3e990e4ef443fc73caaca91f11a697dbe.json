{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { AsyncStorage } from \"react-native-web/dist/index\";\nimport * as Yup from 'yup';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar LoginSchema = Yup.object().shape({\n  email: Yup.string().email('Invalid email format').required('Email is required'),\n  password: Yup.string().min(6, 'Password must be at least 6 characters').matches(/^(?=.*[0-9])(?=.*[!@#$%^&*(),.?\":{}|<>])/, 'Password must include at least one special character and one number').required('Password is required')\n});\nvar Login = function Login(_ref) {\n  var navigation = _ref.navigation;\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    email = _useState2[0],\n    setEmail = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    password = _useState4[0],\n    setPassword = _useState4[1];\n  var _useState5 = useState({}),\n    _useState6 = _slicedToArray(_useState5, 2),\n    errors = _useState6[0],\n    setErrors = _useState6[1];\n  var handleLogin = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      try {\n        yield LoginSchema.validate({\n          email: email,\n          password: password\n        }, {\n          abortEarly: false\n        });\n        var user = {\n          username: 'test'\n        };\n        if (!user) {\n          console.error('Invalid credentials');\n          return;\n        }\n        console.log(user);\n        var token = 'example_token';\n        console.log('Login successful');\n        navigation.navigate('Home');\n      } catch (error) {\n        if (error instanceof Yup.ValidationError) {\n          var yupErrors = {};\n          error.inner.forEach(function (e) {\n            yupErrors[e.path] = e.message;\n          });\n          setErrors(yupErrors);\n        }\n        console.error(error.message);\n      }\n    });\n    return function handleLogin() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(TextInput, {\n      style: [styles.input, errors.email && styles.invalidInput],\n      placeholder: \"Email\",\n      onChangeText: function onChangeText(text) {\n        setEmail(text);\n        setErrors(_objectSpread(_objectSpread({}, errors), {}, {\n          email: ''\n        }));\n      },\n      value: email\n    }), errors.email && _jsx(Text, {\n      style: styles.warningText,\n      children: errors.email\n    }), _jsx(TextInput, {\n      style: [styles.input, errors.password && styles.invalidInput],\n      placeholder: \"Password\",\n      secureTextEntry: true,\n      onChangeText: function onChangeText(text) {\n        setPassword(text);\n        setErrors(_objectSpread(_objectSpread({}, errors), {}, {\n          password: ''\n        }));\n      },\n      value: password\n    }), errors.password && _jsx(Text, {\n      style: styles.warningText,\n      children: errors.password\n    })]\n  });\n};\nexport default Login;","map":{"version":3,"names":["React","useState","View","Text","TextInput","Button","StyleSheet","AsyncStorage","Yup","jsx","_jsx","jsxs","_jsxs","LoginSchema","object","shape","email","string","required","password","min","matches","Login","_ref","navigation","_useState","_useState2","_slicedToArray","setEmail","_useState3","_useState4","setPassword","_useState5","_useState6","errors","setErrors","handleLogin","_ref2","_asyncToGenerator","validate","abortEarly","user","username","console","error","log","token","navigate","ValidationError","yupErrors","inner","forEach","e","path","message","apply","arguments","style","styles","container","children","input","invalidInput","placeholder","onChangeText","text","_objectSpread","value","warningText","secureTextEntry"],"sources":["C:/Users/user1/Desktop/Abilicence/project1/panic-button/client/pages/Login.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { View, Text, TextInput, Button, StyleSheet, AsyncStorage } from 'react-native';\r\nimport * as Yup from 'yup';\r\n\r\nconst LoginSchema = Yup.object().shape({\r\n  email: Yup.string().email('Invalid email format').required('Email is required'),\r\n  password: Yup.string()\r\n    .min(6, 'Password must be at least 6 characters')\r\n    .matches(\r\n      /^(?=.*[0-9])(?=.*[!@#$%^&*(),.?\":{}|<>])/,\r\n      'Password must include at least one special character and one number'\r\n    )\r\n    .required('Password is required'),\r\n});\r\n\r\nconst Login = ({ navigation }) => {\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [errors, setErrors] = useState({});\r\n\r\n  const handleLogin = async () => {\r\n    try {\r\n      await LoginSchema.validate({ email, password }, { abortEarly: false });\r\n\r\n      // Connect to MongoDB and verify user credentials\r\n      // Replace the next lines with the actual logic for connecting to MongoDB\r\n      // const user = await usersCollection.findOne({ email, password });\r\n      const user = { username: 'test' }; // Example user object\r\n      if (!user) {\r\n        console.error('Invalid credentials');\r\n        return;\r\n      }\r\n\r\n      console.log(user);\r\n      // Create JWT token\r\n      // Replace the next line with the actual logic for creating a JWT token\r\n      // const token = jwt.sign({ username: user.username }, process.env.JWT_SECRET, { expiresIn: '1h' });\r\n      const token = 'example_token'; // Example token\r\n      // Store token in local storage and navigate to the home screen\r\n      // Replace the next line with the actual logic for storing the token\r\n      // await AsyncStorage.setItem('token', token);\r\n      console.log('Login successful');\r\n      navigation.navigate('Home');\r\n    } catch (error) {\r\n      if (error instanceof Yup.ValidationError) {\r\n        const yupErrors = {};\r\n        error.inner.forEach((e) => {\r\n          yupErrors[e.path] = e.message;\r\n        });\r\n        setErrors(yupErrors);\r\n      }\r\n      console.error(error.message);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      {/* ... (rest of your JSX code) ... */}\r\n\r\n      <TextInput\r\n        style={[styles.input, errors.email && styles.invalidInput]}\r\n        placeholder=\"Email\"\r\n        onChangeText={(text) => {\r\n          setEmail(text);\r\n          setErrors({ ...errors, email: '' });\r\n        }}\r\n        value={email}\r\n      />\r\n      {errors.email && <Text style={styles.warningText}>{errors.email}</Text>}\r\n\r\n      <TextInput\r\n        style={[styles.input, errors.password && styles.invalidInput]}\r\n        placeholder=\"Password\"\r\n        secureTextEntry\r\n        onChangeText={(text) => {\r\n          setPassword(text);\r\n          setErrors({ ...errors, password: '' });\r\n        }}\r\n        value={password}\r\n      />\r\n      {errors.password && <Text style={styles.warningText}>{errors.password}</Text>}\r\n\r\n      {/* ... (rest of your JSX code) ... */}\r\n    </View>\r\n  );\r\n};\r\n\r\n// ... (rest of your code remains unchanged) ...\r\n\r\nexport default Login;\r\n\r\n//login good validations not nice\r\n// import React, { useState } from 'react';\r\n// import { View, Text, TextInput, Button, StyleSheet, AsyncStorage } from 'react-native';\r\n\r\n\r\n// const Login = ({ navigation }) => {\r\n//   const [email, setEmail] = useState('');\r\n//   const [password, setPassword] = useState('');\r\n//   const [isEmailValid, setIsEmailValid] = useState(true); // State to track email validation\r\n//   const [isPasswordValid, setIsPasswordValid] = useState(true); // State to track password validation\r\n//   const validateEmail = (email) => {\r\n//     const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;888\r\n//     return emailRegex.test(email);\r\n//   };\r\n//   const validatePassword = (password) => {\r\n//     // Password length validation (minimum 6 characters)\r\n//     const isLengthValid = password.length >= 6;\r\n//     // Password special character validation\r\n//     const specialCharacterRegex = /[!@#$%^&*(),.?\":{}|<>]/;\r\n//     const hasSpecialCharacter = specialCharacterRegex.test(password);\r\n//     // Password alphanumeric validation\r\n//     const alphanumericRegex = /^(?=.*[0-9])(?=.*[a-zA-Z])/;\r\n//     const isAlphanumeric = alphanumericRegex.test(password);\r\n//     // Update password validation state\r\n//     setIsPasswordValid(isLengthValid && hasSpecialCharacter && isAlphanumeric);\r\n//     return isLengthValid && hasSpecialCharacter && isAlphanumeric;\r\n//   };\r\n//   const handleLogin = async () => {\r\n//     try {\r\n//       // Validate email format\r\n//       setIsEmailValid(validateEmail(email));\r\n//       if (!isEmailValid) {\r\n//         console.error('Invalid email format');\r\n//         return;\r\n//       }\r\n//       // Validate password\r\n//       if (!validatePassword(password)) {\r\n//         console.error('Invalid password format');\r\n//         return;\r\n//       }\r\n//       // Connect to MongoDB and verify user credentials\r\n//       // Replace the next line with the actual logic for connecting to MongoDB\r\n//       // const user = await usersCollection.findOne({ email, password });\r\n//       const user = { username: 'test' }; // Example user object\r\n//       if (!user) {\r\n//         console.error('Invalid credentials');\r\n//         return;\r\n//       }\r\n\r\n//       console.log(state)\r\n//       // Create JWT token\r\n//       // Replace the next line with the actual logic for creating a JWT token\r\n//       // const token = jwt.sign({ username: user.username }, process.env.JWT_SECRET, { expiresIn: '1h' });\r\n//       const token = 'example_token'; // Example token\r\n//       // Store token in local storage and navigate to the home screen\r\n//       // Replace the next line with the actual logic for storing the token\r\n//       // await AsyncStorage.setItem('token', token);\r\n//       console.log('Login successful');\r\n//       navigation.navigate('Home');\r\n//     } catch (error) {\r\n//       console.error(error.message);5\r\n//     }\r\n//   };\r\n//   return (\r\n//     <View style={styles.container}>\r\n//       <View style={{ flexDirection: 'row', justifyContent: 'flex-end' }}>\r\n//         <Button title=\"Register\" style={styles.register} onPress={() => navigation.navigate('Register')}>\r\n//         </Button>\r\n//       </View>\r\n//       <Text style={styles.header}>Login</Text>\r\n//       <TextInput\r\n//         style={[styles.input, !isEmailValid && styles.invalidInput]}\r\n//         placeholder=\"Email\"\r\n//         onChangeText={(text) => {\r\n//           setEmail(text);\r\n//           // Reset email validation on input change\r\n//           setIsEmailValid(true);\r\n//         }}\r\n//         value={email}\r\n//       />\r\n//       {!isEmailValid && <Text style={styles.warningText}>Invalid email format</Text>}\r\n//       <TextInput\r\n//         style={[styles.input, !isPasswordValid && styles.invalidInput]}\r\n//         placeholder=\"Password\"\r\n//         secureTextEntry\r\n//         onChangeText={(text) => {\r\n//           setPassword(text);\r\n//           // Reset password validation on input change\r\n//           setIsPasswordValid(true);\r\n//         }}\r\n//         value={password}\r\n//       />\r\n//       {!isPasswordValid && (\r\n//         <Text style={styles.warningText}>\r\n//           Password must be at least 6 characters long and include at least one special character and one number.\r\n//         </Text>\r\n//       )}\r\n//       <Text style={styles.forgotPassword} onPress={() => navigation.navigate('ForgotPassword')}>\r\n//         Forgot Password?\r\n//       </Text>\r\n//       <Button title=\"Login\" onPress={handleLogin} />\r\n//     </View>\r\n//   );\r\n// };\r\n// const styles = StyleSheet.create({\r\n//   container: {\r\n//     fle5x: 1,\r\n//     justifyContent: 'center',\r\n//     alignItems: 'center',\r\n//   },\r\n//   header: {\r\n//     fontSize: 24,\r\n//     marginBottom: 20,\r\n//   },\r\n//   input: {\r\n//     width: '25%',\r\n//     height: 20,\r\n//     borderColor: 'gray',\r\n//     borderWidth: 1,\r\n//     marginBottom: 10,\r\n//     padding: 10,\r\n//   },\r\n//   invalidInput: {\r\n//     borderColor: 'red',\r\n//   },\r\n//   warningText: {\r\n//     color: 'red',\r\n//     fontSize: 12,\r\n//     marginBottom: 5,\r\n//   },\r\n//   forgotPassword: {\r\n//     fontSize: 16,\r\n//     color: 'blue',\r\n//     textDecorationLine: 'underline',\r\n//     marginBottom: 10,\r\n//   },\r\n//   register: {\r\n//     fontSize: 16,\r\n//     color: 'blue',\r\n//     flex: 1,\r\n//     justifyContent: \"flex-start\",\r\n//     // alignSelf: \"flex-end\"\r\n\r\n//   },\r\n// });\r\n// export default Login;\r\n\r\n\r\n// /validations with yup-not work well\r\n// import React, { useState } from 'react';\r\n// import { View, Text, TextInput, Button, StyleSheet, AsyncStorage } from 'react-native';\r\n// import * as Yup from 'yup';\r\n\r\n// const loginValidationSchema = Yup.object().shape({\r\n//   email: Yup.string().required('Email is required').email('Invalid email address'),\r\n\r\n//   password: Yup.string()\r\n//     .required('Password is required')\r\n//     .min(12, 'Your password must contain at least 12 characters')\r\n//     .matches(/^(?=.*[a-zA-Zא-ת])(?=.*\\d)/, 'Password must contain at least:\\n  one letter and one number'),\r\n// });\r\n\r\n// const Login = ({ navigation }) => {\r\n//   const [email, setEmail] = useState('');\r\n//   const [password, setPassword] = useState('');\r\n//   const [errors, setErrors] = useState({}); 9\r\n\r\n//   const handleChangeEmail = (text) => {\r\n//     const isValid = Yup.string().email().validate(text);\r\n//     setEmail(text);\r\n//     if (!isValid) {\r\n//       setError('email', isValid.errors.email);\r\n//     } else {\r\n//       setError('email', null);\r\n//     }\r\n//   };\r\n\r\n//   const handleChangePassword = (text) => {\r\n//     const isValid = Yup.string().min(6).validate(text);\r\n//     setPassword(text);\r\n//     if (!isValid) {\r\n//       setError('password', isValid.errors.password);\r\n//     } else {\r\n//       setError('password', null);\r\n//     }\r\n//   };\r\n\r\n//   const setError = (field, message) => {\r\n//     const errors = { ...errors };\r\n//     errors[field] = message;\r\n//     setErrors(errors);\r\n//   };\r\n\r\n//   const handleLogin = async () => {\r\n//     try {\r\n//       // Validate user input with Yup\r\n//       const isValid = await loginValidationSchema.validate({ email, password });\r\n\r\n//       if (!isValid) {\r\n//         // Show warnings in TextInput\r\n//         for (const [field, message] of Object.entries(errors)) {\r\n//           switch (field) {\r\n//             case 'email':\r\n//               // Change the border color of the email input\r\n//               setEmailInputBorderColor('red');\r\n//               break;\r\n//             case 'password':\r\n//               // Change the border color of the password input\r\n//               setPasswordInputBorderColor('red');\r\n//               break;\r\n//           }\r\n//           // Add the warning to the input\r\n//           const warning = <Text style={styles.warningText}>{message}</Text>;\r\n//           {\r\n//             switch (field) {\r\n//               case 'email':\r\n//                 <TextInput\r\n//                   style={styles.input}\r\n//                   placeholder=\"Email\"\r\n//                   onChangeText={handleChangeEmail}\r\n//                   value={email}\r\n//                 >\r\n//                   {warning}\r\n//                 </TextInput>\r\n//                 break;\r\n//               case 'password':\r\n//                 <TextInput\r\n//                   style={styles.input}\r\n//                   placeholder=\"Password\"\r\n//                   secureTextEntry\r\n//                   onChangeText={handleChangePassword}\r\n//                   value={password}\r\n//                 >\r\n//                   {warning}\r\n//                 </TextInput>\r\n//                 break;\r\n//             }\r\n//           }\r\n//         }\r\n//       }\r\n\r\n//       // Continue with login logic (e.g., connect to MongoDB, verify credentials)\r\n//       // ...\r\n\r\n//       console.log('Login successful');\r\n//       navigation.navigate('Home');\r\n//     } catch (error) {\r\n//       console.error(error.message);\r\n//     }\r\n//   };\r\n\r\n//   // Added these lines to close the component\r\n//   return (\r\n//     <View style={styles.container}>\r\n//       <View style={{ flexDirection: 'row', justifyContent: 'flex-end' }}>\r\n//         <Button\r\n//           title=\"Register\"\r\n//           style={styles.register}\r\n//           onPress={() => navigation.navigate('Register')}\r\n//         />\r\n//       </View>\r\n//       <Text style={styles.header}>Login</Text>\r\n//       <TextInput\r\n//         style={styles.input}\r\n//         placeholder=\"Email\"\r\n//         onChangeText={handleChangeEmail}\r\n//         value={email}\r\n//       >\r\n//         {errors.email && <Text style={styles.warningText}>{errors.email}</Text>}\r\n//       </TextInput>\r\n//       <Button\r\n//         title=\"Login\"\r\n//         onPress={handleLogin} />\r\n//     </View>\r\n//   );\r\n// }\r\n// const styles = StyleSheet.create({\r\n//   container: {\r\n//     flex: 1,\r\n//     justifyContent: 'center',\r\n//     alignItems: 'center',\r\n//   },\r\n//   header: {\r\n//     fontSize: 24,\r\n//     marginBottom: 20,\r\n//   },\r\n//   input: {\r\n//     width: '25%',\r\n//     height: 20,\r\n//     borderColor: 'gray',\r\n//     borderWidth: 1,\r\n//     marginBottom: 10,\r\n//     padding: 10,\r\n//   },\r\n//   invalidInput: {\r\n//     borderColor: 'red',\r\n//   },\r\n//   warningText: {\r\n//     color: 'red',\r\n//     fontSize: 12,\r\n//     marginBottom: 5,\r\n//   },\r\n//   forgotPassword: {\r\n//     fontSize: 16,\r\n//     color: 'blue',\r\n//     textDecorationLine: 'underline',\r\n//     marginBottom: 10,\r\n//   },\r\n//   register: {\r\n//     fontSize: 16,\r\n//     color: 'blue',\r\n//     flex: 1,\r\n//     justifyContent: \"flex-start\",\r\n//   }\r\n// });\r\n\r\n// export default Login;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}