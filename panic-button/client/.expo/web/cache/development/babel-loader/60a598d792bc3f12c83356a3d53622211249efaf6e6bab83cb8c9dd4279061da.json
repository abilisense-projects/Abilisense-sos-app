{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar MedicalConditionsList = function MedicalConditionsList(_ref) {\n  var route = _ref.route,\n    navigation = _ref.navigation;\n  var _route$params = route.params,\n    selectedConditions = _route$params.selectedConditions,\n    setSelectedConditions = _route$params.setSelectedConditions;\n  var medicalConditions = ['Gallstones', 'Myocarditis', 'Infertility in Men', 'Infertility in Women', 'Chronic Instability of the Ankle', 'Alzheimer\\'s Disease', 'Endometriosis', 'Insulin', 'Asthma of the Skin in Children', 'Hammer Finger'];\n  var handleSelectCondition = function handleSelectCondition(condition) {\n    var isConditionSelected = selectedConditions.includes(condition);\n    if (isConditionSelected) {\n      setSelectedConditions(selectedConditions.filter(function (c) {\n        return c !== condition;\n      }));\n    } else {\n      setSelectedConditions([].concat(_toConsumableArray(selectedConditions), [condition]));\n    }\n  };\n  return _jsxs(ScrollView, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      children: \"List of Medical Conditions:\"\n    }), medicalConditions.map(function (condition, index) {\n      return _jsx(TouchableOpacity, {\n        onPress: function onPress() {\n          return handleSelectCondition(condition);\n        },\n        style: [styles.conditionButton, {\n          backgroundColor: selectedConditions.includes(condition) ? '#90caf9' : '#e0e0e0'\n        }],\n        children: _jsx(Text, {\n          children: condition\n        })\n      }, index);\n    }), _jsx(View, {\n      style: styles.selectedConditionsContainer,\n      children: selectedConditions.map(function (selectedCondition, index) {\n        return _jsxs(View, {\n          style: styles.conditionBox,\n          children: [_jsx(Text, {\n            children: selectedCondition\n          }), _jsx(TouchableOpacity, {\n            onPress: function onPress() {\n              setSelectedConditions(selectedConditions.filter(function (c) {\n                return c !== selectedCondition;\n              }));\n            },\n            children: _jsx(Text, {\n              style: styles.removeButton,\n              children: \"X\"\n            })\n          })]\n        }, index);\n      })\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 20\n  },\n  conditionButton: {\n    borderRadius: 10,\n    padding: 10,\n    marginVertical: 5,\n    alignItems: 'center'\n  },\n  selectedConditionsContainer: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    marginVertical: 10\n  },\n  conditionBox: {\n    backgroundColor: '#90caf9',\n    borderRadius: 20,\n    padding: 10,\n    margin: 5,\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  removeButton: {\n    marginLeft: 5,\n    color: 'red'\n  }\n});\nexport default MedicalConditionsList;","map":{"version":3,"names":["React","useState","View","Text","TouchableOpacity","StyleSheet","ScrollView","jsx","_jsx","jsxs","_jsxs","MedicalConditionsList","_ref","route","navigation","_route$params","params","selectedConditions","setSelectedConditions","medicalConditions","handleSelectCondition","condition","isConditionSelected","includes","filter","c","concat","_toConsumableArray","style","styles","container","children","map","index","onPress","conditionButton","backgroundColor","selectedConditionsContainer","selectedCondition","conditionBox","removeButton","create","flex","padding","borderRadius","marginVertical","alignItems","flexDirection","flexWrap","margin","marginLeft","color"],"sources":["C:/Users/n0548/Desktop/Abilisence Project/project1/panic-button/client/components/signUp/MedicalConditionsList.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { View, Text, TouchableOpacity, StyleSheet, ScrollView } from 'react-native';\r\n\r\nconst MedicalConditionsList = ({ route, navigation }) => {\r\n  const { selectedConditions, setSelectedConditions } = route.params;\r\n\r\n  const medicalConditions = [\r\n    'Gallstones', 'Myocarditis', 'Infertility in Men', 'Infertility in Women', 'Chronic Instability of the Ankle', \r\n    'Alzheimer\\'s Disease', 'Endometriosis', 'Insulin', 'Asthma of the Skin in Children', 'Hammer Finger', /* ... add other conditions */\r\n  ];\r\n\r\n  const handleSelectCondition = (condition) => {\r\n    const isConditionSelected = selectedConditions.includes(condition);\r\n\r\n    if (isConditionSelected) {\r\n      // If the condition is already selected, remove it\r\n      setSelectedConditions(selectedConditions.filter((c) => c !== condition));\r\n    } else {\r\n      // If the condition is not selected, add it\r\n      setSelectedConditions([...selectedConditions, condition]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ScrollView style={styles.container}>\r\n      <Text>List of Medical Conditions:</Text>\r\n      {medicalConditions.map((condition, index) => (\r\n        <TouchableOpacity\r\n          key={index}\r\n          onPress={() => handleSelectCondition(condition)}\r\n          style={[\r\n            styles.conditionButton,\r\n            {\r\n              backgroundColor: selectedConditions.includes(condition) ? '#90caf9' : '#e0e0e0',\r\n            },\r\n          ]}\r\n        >\r\n          <Text>{condition}</Text>\r\n        </TouchableOpacity>\r\n      ))}\r\n      <View style={styles.selectedConditionsContainer}>\r\n        {selectedConditions.map((selectedCondition, index) => (\r\n          <View key={index} style={styles.conditionBox}>\r\n            <Text>{selectedCondition}</Text>\r\n            <TouchableOpacity\r\n              onPress={() => {\r\n                setSelectedConditions(selectedConditions.filter((c) => c !== selectedCondition));\r\n              }}\r\n            >\r\n              <Text style={styles.removeButton}>X</Text>\r\n            </TouchableOpacity>\r\n          </View>\r\n        ))}\r\n      </View>\r\n    </ScrollView>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    padding: 20,\r\n  },\r\n  conditionButton: {\r\n    borderRadius: 10,\r\n    padding: 10,\r\n    marginVertical: 5,\r\n    alignItems: 'center',\r\n  },\r\n  selectedConditionsContainer: {\r\n    flexDirection: 'row',\r\n    flexWrap: 'wrap',\r\n    marginVertical: 10,\r\n  },\r\n  conditionBox: {\r\n    backgroundColor: '#90caf9',\r\n    borderRadius: 20,\r\n    padding: 10,\r\n    margin: 5,\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n  },\r\n  removeButton: {\r\n    marginLeft: 5,\r\n    color: 'red',\r\n  },\r\n});\r\n\r\nexport default MedicalConditionsList;\r\n\r\n\r\n// import React, { useState } from 'react';\r\n// import { View, Text, TouchableOpacity, StyleSheet, Modal, ScrollView } from 'react-native';\r\n\r\n// const MedicalConditionsList = ({ route, navigation }) => {\r\n//   const { onSelectCondition } = route.params;\r\n//   const [isModalVisible, setModalVisible] = useState(false);\r\n\r\n//   const medicalConditions = [\r\n//     'Gallstones', 'Myocarditis', 'Infertility in Men', 'Infertility in Women', 'Chronic Instability of the Ankle', \r\n//     'Alzheimer\\'s Disease', 'Endometriosis', 'Insulin', 'Asthma of the Skin in Children', 'Hammer Finger', /* ... add other conditions */\r\n//   ];\r\n\r\n//   const handleSelectCondition = (condition) => {\r\n//     onSelectCondition(condition);\r\n//   };\r\n\r\n// //   \r\n\r\n//   return (\r\n//     <View style={styles.container}>\r\n//       <Text>List of Medical Conditions:</Text>\r\n//       {medicalConditions.map((condition, index) => (\r\n//         <TouchableOpacity\r\n//           key={index}\r\n//           onPress={() => handleSelectCondition(condition)}\r\n//           style={styles.conditionButton}\r\n//         >\r\n//           <Text>{condition}</Text>\r\n//         </TouchableOpacity>\r\n//       ))}\r\n\r\n//     </View>\r\n//   );\r\n// };\r\n\r\n// const styles = StyleSheet.create({\r\n//   container: {\r\n//     flex: 1,\r\n//     padding: 20,\r\n//   },\r\n//   conditionButton: {\r\n//     backgroundColor: '#e0e0e0',\r\n//     borderRadius: 10,\r\n//     padding: 10,\r\n//     marginVertical: 5,\r\n//     alignItems: 'center',\r\n//   },\r\n//   modalContainer: {\r\n//     flex: 1,\r\n//     backgroundColor: 'white',\r\n//     padding: 20,\r\n//   },\r\n//   closeModalButton: {\r\n//     backgroundColor: '#454',\r\n//     borderRadius: 10,\r\n//     padding: 10,\r\n//     marginVertical: 5,\r\n//     alignItems: 'center',\r\n//   },\r\n// });\r\n\r\n// export default MedicalConditionsList;\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}