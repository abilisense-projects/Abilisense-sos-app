{"ast":null,"code":"'use strict';\n\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return typeof key === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n  if (typeof input !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (typeof res !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nimport { runOnUIImmediately } from \"../../threads\";\nimport { registerEventHandler, unregisterEventHandler } from \"../../core\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { isJest, shouldBeUseWeb } from \"../../PlatformChecker\";\nvar IS_ANDROID = Platform.OS === 'android';\nexport var ProgressTransitionManager = function () {\n  function ProgressTransitionManager() {\n    _classCallCheck(this, ProgressTransitionManager);\n    _defineProperty(this, \"_sharedElementCount\", 0);\n    _defineProperty(this, \"_eventHandler\", {\n      isRegistered: false,\n      onTransitionProgress: -1,\n      onAppear: -1,\n      onDisappear: -1,\n      onSwipeDismiss: -1\n    });\n  }\n  _createClass(ProgressTransitionManager, [{\n    key: \"addProgressAnimation\",\n    value: function addProgressAnimation(viewTag, progressAnimation) {\n      runOnUIImmediately(function () {\n        'worklet';\n\n        global.ProgressTransitionRegister.addProgressAnimation(viewTag, progressAnimation);\n      })();\n      this.registerEventHandlers();\n    }\n  }, {\n    key: \"removeProgressAnimation\",\n    value: function removeProgressAnimation(viewTag) {\n      this.unregisterEventHandlers();\n      runOnUIImmediately(function () {\n        'worklet';\n\n        global.ProgressTransitionRegister.removeProgressAnimation(viewTag);\n      })();\n    }\n  }, {\n    key: \"registerEventHandlers\",\n    value: function registerEventHandlers() {\n      this._sharedElementCount++;\n      var eventHandler = this._eventHandler;\n      if (!eventHandler.isRegistered) {\n        eventHandler.isRegistered = true;\n        var eventPrefix = IS_ANDROID ? 'on' : 'top';\n        var lastProgressValue = -1;\n        eventHandler.onTransitionProgress = registerEventHandler(function (event) {\n          'worklet';\n\n          var progress = event.progress;\n          if (progress === lastProgressValue) {\n            return;\n          }\n          lastProgressValue = progress;\n          global.ProgressTransitionRegister.frame(progress);\n        }, eventPrefix + 'TransitionProgress');\n        eventHandler.onAppear = registerEventHandler(function () {\n          'worklet';\n\n          global.ProgressTransitionRegister.onTransitionEnd();\n        }, eventPrefix + 'Appear');\n        if (IS_ANDROID) {\n          eventHandler.onDisappear = registerEventHandler(function () {\n            'worklet';\n\n            global.ProgressTransitionRegister.onAndroidFinishTransitioning();\n          }, 'onFinishTransitioning');\n        } else if (Platform.OS === 'ios') {\n          eventHandler.onDisappear = registerEventHandler(function () {\n            'worklet';\n\n            global.ProgressTransitionRegister.onTransitionEnd(true);\n          }, 'topDisappear');\n          eventHandler.onSwipeDismiss = registerEventHandler(function () {\n            'worklet';\n\n            global.ProgressTransitionRegister.onTransitionEnd();\n          }, 'topGestureCancel');\n        }\n      }\n    }\n  }, {\n    key: \"unregisterEventHandlers\",\n    value: function unregisterEventHandlers() {\n      this._sharedElementCount--;\n      if (this._sharedElementCount === 0) {\n        var eventHandler = this._eventHandler;\n        eventHandler.isRegistered = false;\n        if (eventHandler.onTransitionProgress !== -1) {\n          unregisterEventHandler(eventHandler.onTransitionProgress);\n          eventHandler.onTransitionProgress = -1;\n        }\n        if (eventHandler.onAppear !== -1) {\n          unregisterEventHandler(eventHandler.onAppear);\n          eventHandler.onAppear = -1;\n        }\n        if (eventHandler.onDisappear !== -1) {\n          unregisterEventHandler(eventHandler.onDisappear);\n          eventHandler.onDisappear = -1;\n        }\n        if (eventHandler.onSwipeDismiss !== -1) {\n          unregisterEventHandler(eventHandler.onSwipeDismiss);\n          eventHandler.onSwipeDismiss = -1;\n        }\n      }\n    }\n  }]);\n  return ProgressTransitionManager;\n}();\nfunction createProgressTransitionRegister() {\n  'worklet';\n\n  var progressAnimations = new Map();\n  var snapshots = new Map();\n  var currentTransitions = new Set();\n  var toRemove = new Set();\n  var skipCleaning = false;\n  var isTransitionRestart = false;\n  var progressTransitionManager = {\n    addProgressAnimation: function addProgressAnimation(viewTag, progressAnimation) {\n      if (currentTransitions.size > 0) {\n        isTransitionRestart = !IS_ANDROID;\n      }\n      progressAnimations.set(viewTag, progressAnimation);\n    },\n    removeProgressAnimation: function removeProgressAnimation(viewTag) {\n      if (currentTransitions.size > 0) {\n        isTransitionRestart = !IS_ANDROID;\n      }\n      toRemove.add(viewTag);\n    },\n    onTransitionStart: function onTransitionStart(viewTag, snapshot) {\n      skipCleaning = isTransitionRestart;\n      snapshots.set(viewTag, snapshot);\n      currentTransitions.add(viewTag);\n      progressTransitionManager.frame(0);\n    },\n    frame: function frame(progress) {\n      for (var viewTag of currentTransitions) {\n        var progressAnimation = progressAnimations.get(viewTag);\n        if (!progressAnimation) {\n          continue;\n        }\n        var snapshot = snapshots.get(viewTag);\n        progressAnimation(viewTag, snapshot, progress);\n      }\n    },\n    onAndroidFinishTransitioning: function onAndroidFinishTransitioning() {\n      if (toRemove.size > 0) {\n        progressTransitionManager.onTransitionEnd();\n      }\n    },\n    onTransitionEnd: function onTransitionEnd() {\n      var removeViews = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      if (currentTransitions.size === 0) {\n        toRemove.clear();\n        return;\n      }\n      if (skipCleaning) {\n        skipCleaning = false;\n        isTransitionRestart = false;\n        return;\n      }\n      for (var viewTag of currentTransitions) {\n        _notifyAboutEnd(viewTag, removeViews);\n      }\n      currentTransitions.clear();\n      if (isTransitionRestart) {\n        return;\n      }\n      snapshots.clear();\n      if (toRemove.size > 0) {\n        for (var _viewTag of toRemove) {\n          progressAnimations.delete(_viewTag);\n          _notifyAboutEnd(_viewTag, removeViews);\n        }\n        toRemove.clear();\n      }\n    }\n  };\n  return progressTransitionManager;\n}\nif (shouldBeUseWeb()) {\n  var maybeThrowError = function maybeThrowError() {\n    if (!isJest()) {\n      throw new Error('[Reanimated] `ProgressTransitionRegister` is not available on non-native platform.');\n    }\n  };\n  global.ProgressTransitionRegister = new Proxy({}, {\n    get: maybeThrowError,\n    set: function set() {\n      maybeThrowError();\n      return false;\n    }\n  });\n} else {\n  runOnUIImmediately(function () {\n    'worklet';\n\n    global.ProgressTransitionRegister = createProgressTransitionRegister();\n  })();\n}","map":{"version":3,"names":["_classCallCheck","_createClass","_defineProperty","obj","key","value","_toPropertyKey","Object","defineProperty","enumerable","configurable","writable","arg","_toPrimitive","String","input","hint","prim","Symbol","toPrimitive","undefined","res","call","TypeError","Number","runOnUIImmediately","registerEventHandler","unregisterEventHandler","Platform","isJest","shouldBeUseWeb","IS_ANDROID","OS","ProgressTransitionManager","isRegistered","onTransitionProgress","onAppear","onDisappear","onSwipeDismiss","addProgressAnimation","viewTag","progressAnimation","global","ProgressTransitionRegister","registerEventHandlers","removeProgressAnimation","unregisterEventHandlers","_sharedElementCount","eventHandler","_eventHandler","eventPrefix","lastProgressValue","event","progress","frame","onTransitionEnd","onAndroidFinishTransitioning","createProgressTransitionRegister","progressAnimations","Map","snapshots","currentTransitions","Set","toRemove","skipCleaning","isTransitionRestart","progressTransitionManager","size","set","add","onTransitionStart","snapshot","get","removeViews","arguments","length","clear","_notifyAboutEnd","delete","maybeThrowError","Error","Proxy"],"sources":["C:\\Users\\user1\\Desktop\\Abilicence\\project1\\panic-button\\client\\node_modules\\react-native-reanimated\\lib\\module\\reanimated2\\layoutReanimation\\sharedTransitions\\ProgressTransitionManager.ts"],"sourcesContent":["'use strict';\nimport { runOnUIImmediately } from '../../threads';\nimport type {\n  ProgressAnimation,\n  SharedTransitionAnimationsValues,\n} from '../animationBuilder/commonTypes';\nimport { registerEventHandler, unregisterEventHandler } from '../../core';\nimport { Platform } from 'react-native';\nimport { isJest, shouldBeUseWeb } from '../../PlatformChecker';\n\ntype TransitionProgressEvent = {\n  closing: number;\n  goingForward: number;\n  eventName: string;\n  progress: number;\n  target: number;\n};\n\nconst IS_ANDROID = Platform.OS === 'android';\n\nexport class ProgressTransitionManager {\n  private _sharedElementCount = 0;\n  private _eventHandler = {\n    isRegistered: false,\n    onTransitionProgress: -1,\n    onAppear: -1,\n    onDisappear: -1,\n    onSwipeDismiss: -1,\n  };\n\n  public addProgressAnimation(\n    viewTag: number,\n    progressAnimation: ProgressAnimation\n  ) {\n    runOnUIImmediately(() => {\n      'worklet';\n      global.ProgressTransitionRegister.addProgressAnimation(\n        viewTag,\n        progressAnimation\n      );\n    })();\n    this.registerEventHandlers();\n  }\n\n  public removeProgressAnimation(viewTag: number) {\n    this.unregisterEventHandlers();\n    runOnUIImmediately(() => {\n      'worklet';\n      global.ProgressTransitionRegister.removeProgressAnimation(viewTag);\n    })();\n  }\n\n  private registerEventHandlers() {\n    this._sharedElementCount++;\n    const eventHandler = this._eventHandler;\n    if (!eventHandler.isRegistered) {\n      eventHandler.isRegistered = true;\n      const eventPrefix = IS_ANDROID ? 'on' : 'top';\n      let lastProgressValue = -1;\n      eventHandler.onTransitionProgress = registerEventHandler(\n        (event: TransitionProgressEvent) => {\n          'worklet';\n          const progress = event.progress;\n          if (progress === lastProgressValue) {\n            // During screen transition, handler receives two events with the same progress\n            // value for both screens, but for modals, there is only one event. To optimize\n            // performance and avoid unnecessary worklet calls, let's skip the second event.\n            return;\n          }\n          lastProgressValue = progress;\n          global.ProgressTransitionRegister.frame(progress);\n        },\n        eventPrefix + 'TransitionProgress'\n      );\n      eventHandler.onAppear = registerEventHandler(() => {\n        'worklet';\n        global.ProgressTransitionRegister.onTransitionEnd();\n      }, eventPrefix + 'Appear');\n\n      if (IS_ANDROID) {\n        // onFinishTransitioning event is available only on Android and\n        // is used to handle closing modals\n        eventHandler.onDisappear = registerEventHandler(() => {\n          'worklet';\n          global.ProgressTransitionRegister.onAndroidFinishTransitioning();\n        }, 'onFinishTransitioning');\n      } else if (Platform.OS === 'ios') {\n        // topDisappear event is required to handle closing modals on iOS\n        eventHandler.onDisappear = registerEventHandler(() => {\n          'worklet';\n          global.ProgressTransitionRegister.onTransitionEnd(true);\n        }, 'topDisappear');\n        eventHandler.onSwipeDismiss = registerEventHandler(() => {\n          'worklet';\n          global.ProgressTransitionRegister.onTransitionEnd();\n        }, 'topGestureCancel');\n      }\n    }\n  }\n\n  private unregisterEventHandlers(): void {\n    this._sharedElementCount--;\n    if (this._sharedElementCount === 0) {\n      const eventHandler = this._eventHandler;\n      eventHandler.isRegistered = false;\n      if (eventHandler.onTransitionProgress !== -1) {\n        unregisterEventHandler(eventHandler.onTransitionProgress);\n        eventHandler.onTransitionProgress = -1;\n      }\n      if (eventHandler.onAppear !== -1) {\n        unregisterEventHandler(eventHandler.onAppear);\n        eventHandler.onAppear = -1;\n      }\n      if (eventHandler.onDisappear !== -1) {\n        unregisterEventHandler(eventHandler.onDisappear);\n        eventHandler.onDisappear = -1;\n      }\n      if (eventHandler.onSwipeDismiss !== -1) {\n        unregisterEventHandler(eventHandler.onSwipeDismiss);\n        eventHandler.onSwipeDismiss = -1;\n      }\n    }\n  }\n}\n\nfunction createProgressTransitionRegister() {\n  'worklet';\n  const progressAnimations = new Map<number, ProgressAnimation>();\n  const snapshots = new Map<\n    number,\n    Partial<SharedTransitionAnimationsValues>\n  >();\n  const currentTransitions = new Set<number>();\n  const toRemove = new Set<number>();\n\n  let skipCleaning = false;\n  let isTransitionRestart = false;\n\n  const progressTransitionManager = {\n    addProgressAnimation: (\n      viewTag: number,\n      progressAnimation: ProgressAnimation\n    ) => {\n      if (currentTransitions.size > 0) {\n        // there is no need to prevent cleaning on android\n        isTransitionRestart = !IS_ANDROID;\n      }\n      progressAnimations.set(viewTag, progressAnimation);\n    },\n    removeProgressAnimation: (viewTag: number) => {\n      if (currentTransitions.size > 0) {\n        // there is no need to prevent cleaning on android\n        isTransitionRestart = !IS_ANDROID;\n      }\n      // Remove the animation config after the transition is finished\n      toRemove.add(viewTag);\n    },\n    onTransitionStart: (\n      viewTag: number,\n      snapshot: Partial<SharedTransitionAnimationsValues>\n    ) => {\n      skipCleaning = isTransitionRestart;\n      snapshots.set(viewTag, snapshot);\n      currentTransitions.add(viewTag);\n      // set initial style for re-parented components\n      progressTransitionManager.frame(0);\n    },\n    frame: (progress: number) => {\n      for (const viewTag of currentTransitions) {\n        const progressAnimation = progressAnimations.get(viewTag);\n        if (!progressAnimation) {\n          continue;\n        }\n        const snapshot = snapshots.get(\n          viewTag\n        )! as SharedTransitionAnimationsValues;\n        progressAnimation!(viewTag, snapshot, progress);\n      }\n    },\n    onAndroidFinishTransitioning: () => {\n      if (toRemove.size > 0) {\n        // it should be ran only on modal closing\n        progressTransitionManager.onTransitionEnd();\n      }\n    },\n    onTransitionEnd: (removeViews = false) => {\n      if (currentTransitions.size === 0) {\n        toRemove.clear();\n        return;\n      }\n      if (skipCleaning) {\n        skipCleaning = false;\n        isTransitionRestart = false;\n        return;\n      }\n      for (const viewTag of currentTransitions) {\n        _notifyAboutEnd(viewTag, removeViews);\n      }\n      currentTransitions.clear();\n      if (isTransitionRestart) {\n        // on transition restart, progressAnimations should be saved\n        // because they potentially can be used in the next transition\n        return;\n      }\n      snapshots.clear();\n      if (toRemove.size > 0) {\n        for (const viewTag of toRemove) {\n          progressAnimations.delete(viewTag);\n          _notifyAboutEnd(viewTag, removeViews);\n        }\n        toRemove.clear();\n      }\n    },\n  };\n  return progressTransitionManager;\n}\n\nif (shouldBeUseWeb()) {\n  const maybeThrowError = () => {\n    // Jest attempts to access a property of this object to check if it is a Jest mock\n    // so we can't throw an error in the getter.\n    if (!isJest()) {\n      throw new Error(\n        '[Reanimated] `ProgressTransitionRegister` is not available on non-native platform.'\n      );\n    }\n  };\n  global.ProgressTransitionRegister = new Proxy(\n    {} as ProgressTransitionRegister,\n    {\n      get: maybeThrowError,\n      set: () => {\n        maybeThrowError();\n        return false;\n      },\n    }\n  );\n} else {\n  runOnUIImmediately(() => {\n    'worklet';\n    global.ProgressTransitionRegister = createProgressTransitionRegister();\n  })();\n}\n\nexport type ProgressTransitionRegister = ReturnType<\n  typeof createProgressTransitionRegister\n>;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}