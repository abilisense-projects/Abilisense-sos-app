{"ast":null,"code":"'use strict';\n\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return typeof key === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n  if (typeof input !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (typeof res !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nimport { flattenArray } from \"./utils\";\nimport { makeViewDescriptorsSet } from \"../reanimated2/ViewDescriptorsSet\";\nimport { adaptViewConfig } from \"../ConfigHelper\";\nimport updateProps from \"../reanimated2/UpdateProps\";\nimport { stopMapper, startMapper } from \"../reanimated2/mappers\";\nimport { isSharedValue } from \"../reanimated2/isSharedValue\";\nimport { shouldBeUseWeb } from \"../reanimated2/PlatformChecker\";\nvar SHOULD_BE_USE_WEB = shouldBeUseWeb();\nfunction isInlineStyleTransform(transform) {\n  if (!Array.isArray(transform)) {\n    return false;\n  }\n  return transform.some(function (t) {\n    return hasInlineStyles(t);\n  });\n}\nfunction inlinePropsHasChanged(styles1, styles2) {\n  if (Object.keys(styles1).length !== Object.keys(styles2).length) {\n    return true;\n  }\n  for (var key of Object.keys(styles1)) {\n    if (styles1[key] !== styles2[key]) return true;\n  }\n  return false;\n}\nfunction getInlinePropsUpdate(inlineProps) {\n  'worklet';\n\n  var update = {};\n  for (var _ref of Object.entries(inlineProps)) {\n    var _ref2 = _slicedToArray(_ref, 2);\n    var key = _ref2[0];\n    var styleValue = _ref2[1];\n    if (isSharedValue(styleValue)) {\n      update[key] = styleValue.value;\n    } else if (Array.isArray(styleValue)) {\n      update[key] = styleValue.map(function (item) {\n        return getInlinePropsUpdate(item);\n      });\n    } else if (typeof styleValue === 'object') {\n      update[key] = getInlinePropsUpdate(styleValue);\n    } else {\n      update[key] = styleValue;\n    }\n  }\n  return update;\n}\nfunction extractSharedValuesMapFromProps(props) {\n  var inlineProps = {};\n  for (var key in props) {\n    var value = props[key];\n    if (key === 'style') {\n      var _props$style;\n      var styles = flattenArray((_props$style = props.style) != null ? _props$style : []);\n      styles.forEach(function (style) {\n        if (!style) {\n          return;\n        }\n        for (var _ref3 of Object.entries(style)) {\n          var _ref4 = _slicedToArray(_ref3, 2);\n          var _key = _ref4[0];\n          var styleValue = _ref4[1];\n          if (isSharedValue(styleValue)) {\n            inlineProps[_key] = styleValue;\n          } else if (_key === 'transform' && isInlineStyleTransform(styleValue)) {\n            inlineProps[_key] = styleValue;\n          }\n        }\n      });\n    } else if (isSharedValue(value)) {\n      inlineProps[key] = value;\n    }\n  }\n  return inlineProps;\n}\nexport function hasInlineStyles(style) {\n  if (!style) {\n    return false;\n  }\n  return Object.keys(style).some(function (key) {\n    var styleValue = style[key];\n    return isSharedValue(styleValue) || key === 'transform' && isInlineStyleTransform(styleValue);\n  });\n}\nexport function getInlineStyle(style, isFirstRender) {\n  if (isFirstRender) {\n    return getInlinePropsUpdate(style);\n  }\n  var newStyle = {};\n  for (var _ref5 of Object.entries(style)) {\n    var _ref6 = _slicedToArray(_ref5, 2);\n    var key = _ref6[0];\n    var styleValue = _ref6[1];\n    if (!isSharedValue(styleValue) && !(key === 'transform' && isInlineStyleTransform(styleValue))) {\n      newStyle[key] = styleValue;\n    }\n  }\n  return newStyle;\n}\nexport var InlinePropManager = function () {\n  function InlinePropManager() {\n    _classCallCheck(this, InlinePropManager);\n    _defineProperty(this, \"_inlinePropsViewDescriptors\", null);\n    _defineProperty(this, \"_inlinePropsMapperId\", null);\n    _defineProperty(this, \"_inlineProps\", {});\n  }\n  _createClass(InlinePropManager, [{\n    key: \"attachInlineProps\",\n    value: function attachInlineProps(animatedComponent, viewInfo) {\n      var newInlineProps = extractSharedValuesMapFromProps(animatedComponent.props);\n      var hasChanged = inlinePropsHasChanged(newInlineProps, this._inlineProps);\n      if (hasChanged) {\n        if (!this._inlinePropsViewDescriptors) {\n          this._inlinePropsViewDescriptors = makeViewDescriptorsSet();\n          var viewTag = viewInfo.viewTag,\n            viewName = viewInfo.viewName,\n            shadowNodeWrapper = viewInfo.shadowNodeWrapper,\n            viewConfig = viewInfo.viewConfig;\n          if (Object.keys(newInlineProps).length && viewConfig) {\n            adaptViewConfig(viewConfig);\n          }\n          this._inlinePropsViewDescriptors.add({\n            tag: viewTag,\n            name: viewName,\n            shadowNodeWrapper: shadowNodeWrapper\n          });\n        }\n        var shareableViewDescriptors = this._inlinePropsViewDescriptors.shareableViewDescriptors;\n        var maybeViewRef = SHOULD_BE_USE_WEB ? {\n          items: new Set([animatedComponent])\n        } : undefined;\n        var updaterFunction = function updaterFunction() {\n          'worklet';\n\n          var update = getInlinePropsUpdate(newInlineProps);\n          updateProps(shareableViewDescriptors, update, maybeViewRef);\n        };\n        this._inlineProps = newInlineProps;\n        if (this._inlinePropsMapperId) {\n          stopMapper(this._inlinePropsMapperId);\n        }\n        this._inlinePropsMapperId = null;\n        if (Object.keys(newInlineProps).length) {\n          this._inlinePropsMapperId = startMapper(updaterFunction, Object.values(newInlineProps));\n        }\n      }\n    }\n  }, {\n    key: \"detachInlineProps\",\n    value: function detachInlineProps() {\n      if (this._inlinePropsMapperId) {\n        stopMapper(this._inlinePropsMapperId);\n      }\n    }\n  }]);\n  return InlinePropManager;\n}();","map":{"version":3,"names":["_classCallCheck","_createClass","_slicedToArray","_defineProperty","obj","key","value","_toPropertyKey","Object","defineProperty","enumerable","configurable","writable","arg","_toPrimitive","String","input","hint","prim","Symbol","toPrimitive","undefined","res","call","TypeError","Number","flattenArray","makeViewDescriptorsSet","adaptViewConfig","updateProps","stopMapper","startMapper","isSharedValue","shouldBeUseWeb","SHOULD_BE_USE_WEB","isInlineStyleTransform","transform","Array","isArray","some","t","hasInlineStyles","inlinePropsHasChanged","styles1","styles2","keys","length","getInlinePropsUpdate","inlineProps","update","_ref","entries","_ref2","styleValue","map","item","extractSharedValuesMapFromProps","props","_props$style","styles","style","forEach","_ref3","_ref4","getInlineStyle","isFirstRender","newStyle","_ref5","_ref6","InlinePropManager","attachInlineProps","animatedComponent","viewInfo","newInlineProps","hasChanged","_inlineProps","_inlinePropsViewDescriptors","viewTag","viewName","shadowNodeWrapper","viewConfig","add","tag","name","shareableViewDescriptors","maybeViewRef","items","Set","updaterFunction","_inlinePropsMapperId","values","detachInlineProps"],"sources":["C:\\Users\\inbal\\Documents\\abilisense-project\\project1\\panic-button\\client\\node_modules\\react-native-reanimated\\lib\\module\\createAnimatedComponent\\InlinePropManager.ts"],"sourcesContent":["'use strict';\nimport type { StyleProps } from '../reanimated2';\nimport type {\n  IAnimatedComponentInternal,\n  AnimatedComponentProps,\n  IInlinePropManager,\n  ViewInfo,\n} from './commonTypes';\nimport { flattenArray } from './utils';\nimport { makeViewDescriptorsSet } from '../reanimated2/ViewDescriptorsSet';\nimport type {\n  ViewDescriptorsSet,\n  ViewRefSet,\n} from '../reanimated2/ViewDescriptorsSet';\nimport { adaptViewConfig } from '../ConfigHelper';\nimport updateProps from '../reanimated2/UpdateProps';\nimport { stopMapper, startMapper } from '../reanimated2/mappers';\nimport { isSharedValue } from '../reanimated2/isSharedValue';\nimport { shouldBeUseWeb } from '../reanimated2/PlatformChecker';\n\nconst SHOULD_BE_USE_WEB = shouldBeUseWeb();\n\nfunction isInlineStyleTransform(transform: unknown): boolean {\n  if (!Array.isArray(transform)) {\n    return false;\n  }\n\n  return transform.some((t: Record<string, unknown>) => hasInlineStyles(t));\n}\n\nfunction inlinePropsHasChanged(\n  styles1: StyleProps,\n  styles2: StyleProps\n): boolean {\n  if (Object.keys(styles1).length !== Object.keys(styles2).length) {\n    return true;\n  }\n\n  for (const key of Object.keys(styles1)) {\n    if (styles1[key] !== styles2[key]) return true;\n  }\n\n  return false;\n}\n\nfunction getInlinePropsUpdate(inlineProps: Record<string, unknown>) {\n  'worklet';\n  const update: Record<string, unknown> = {};\n  for (const [key, styleValue] of Object.entries(inlineProps)) {\n    if (isSharedValue(styleValue)) {\n      update[key] = styleValue.value;\n    } else if (Array.isArray(styleValue)) {\n      update[key] = styleValue.map((item) => {\n        return getInlinePropsUpdate(item);\n      });\n    } else if (typeof styleValue === 'object') {\n      update[key] = getInlinePropsUpdate(styleValue as Record<string, unknown>);\n    } else {\n      update[key] = styleValue;\n    }\n  }\n  return update;\n}\n\nfunction extractSharedValuesMapFromProps(\n  props: AnimatedComponentProps<\n    Record<string, unknown> /* Initial component props */\n  >\n): Record<string, unknown> {\n  const inlineProps: Record<string, unknown> = {};\n\n  for (const key in props) {\n    const value = props[key];\n    if (key === 'style') {\n      const styles = flattenArray<StyleProps>(props.style ?? []);\n      styles.forEach((style) => {\n        if (!style) {\n          return;\n        }\n        for (const [key, styleValue] of Object.entries(style)) {\n          if (isSharedValue(styleValue)) {\n            inlineProps[key] = styleValue;\n          } else if (\n            key === 'transform' &&\n            isInlineStyleTransform(styleValue)\n          ) {\n            inlineProps[key] = styleValue;\n          }\n        }\n      });\n    } else if (isSharedValue(value)) {\n      inlineProps[key] = value;\n    }\n  }\n\n  return inlineProps;\n}\n\nexport function hasInlineStyles(style: StyleProps): boolean {\n  if (!style) {\n    return false;\n  }\n  return Object.keys(style).some((key) => {\n    const styleValue = style[key];\n    return (\n      isSharedValue(styleValue) ||\n      (key === 'transform' && isInlineStyleTransform(styleValue))\n    );\n  });\n}\n\nexport function getInlineStyle(\n  style: Record<string, unknown>,\n  isFirstRender: boolean\n) {\n  if (isFirstRender) {\n    return getInlinePropsUpdate(style);\n  }\n  const newStyle: StyleProps = {};\n  for (const [key, styleValue] of Object.entries(style)) {\n    if (\n      !isSharedValue(styleValue) &&\n      !(key === 'transform' && isInlineStyleTransform(styleValue))\n    ) {\n      newStyle[key] = styleValue;\n    }\n  }\n  return newStyle;\n}\n\nexport class InlinePropManager implements IInlinePropManager {\n  _inlinePropsViewDescriptors: ViewDescriptorsSet | null = null;\n  _inlinePropsMapperId: number | null = null;\n  _inlineProps: StyleProps = {};\n\n  public attachInlineProps(\n    animatedComponent: React.Component<unknown, unknown> &\n      IAnimatedComponentInternal,\n    viewInfo: ViewInfo\n  ) {\n    const newInlineProps: Record<string, unknown> =\n      extractSharedValuesMapFromProps(animatedComponent.props);\n    const hasChanged = inlinePropsHasChanged(newInlineProps, this._inlineProps);\n\n    if (hasChanged) {\n      if (!this._inlinePropsViewDescriptors) {\n        this._inlinePropsViewDescriptors = makeViewDescriptorsSet();\n\n        const { viewTag, viewName, shadowNodeWrapper, viewConfig } = viewInfo;\n\n        if (Object.keys(newInlineProps).length && viewConfig) {\n          adaptViewConfig(viewConfig);\n        }\n\n        this._inlinePropsViewDescriptors.add({\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          tag: viewTag as number,\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          name: viewName!,\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          shadowNodeWrapper: shadowNodeWrapper!,\n        });\n      }\n      const shareableViewDescriptors =\n        this._inlinePropsViewDescriptors.shareableViewDescriptors;\n\n      const maybeViewRef = SHOULD_BE_USE_WEB\n        ? ({ items: new Set([animatedComponent]) } as ViewRefSet<unknown>) // see makeViewsRefSet\n        : undefined;\n      const updaterFunction = () => {\n        'worklet';\n        const update = getInlinePropsUpdate(newInlineProps);\n        updateProps(shareableViewDescriptors, update, maybeViewRef);\n      };\n      this._inlineProps = newInlineProps;\n      if (this._inlinePropsMapperId) {\n        stopMapper(this._inlinePropsMapperId);\n      }\n      this._inlinePropsMapperId = null;\n      if (Object.keys(newInlineProps).length) {\n        this._inlinePropsMapperId = startMapper(\n          updaterFunction,\n          Object.values(newInlineProps)\n        );\n      }\n    }\n  }\n\n  public detachInlineProps() {\n    if (this._inlinePropsMapperId) {\n      stopMapper(this._inlinePropsMapperId);\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}