{"ast":null,"code":"export function getValueWithNonCurrencyMask(_ref) {\n  var value = _ref.value,\n    mask = _ref.mask;\n  var unmasked = value.replace(/[^0-9A-Za-z]/g, '');\n  var positions = [];\n  for (var i = 0; i < mask.length; i++) {\n    if (mask[i].match(/[^0-9A-Za-z]/)) {\n      positions.push(i);\n    }\n  }\n  var newValue = '';\n  var offset = 0;\n  for (var j = 0; j < unmasked.length; j++) {\n    while ((_mask = mask[j + offset]) != null && _mask.match(/[^0-9A-Za-z]/)) {\n      var _mask;\n      newValue += mask[j + offset];\n      offset++;\n    }\n    newValue += unmasked[j];\n  }\n  return newValue;\n}\nfunction getCurrencyDividerAndDecimal(divider) {\n  if (divider === ',') {\n    return {\n      divider: ',',\n      decimal: '.'\n    };\n  } else return {\n    divider: '.',\n    decimal: ','\n  };\n}\nexport function getValueWithCurrencyMask(_ref2) {\n  var value = _ref2.value,\n    newValue = _ref2.newValue,\n    currencyDivider = _ref2.currencyDivider;\n  var _getCurrencyDividerAn = getCurrencyDividerAndDecimal(currencyDivider),\n    divider = _getCurrencyDividerAn.divider,\n    decimal = _getCurrencyDividerAn.decimal;\n  if (value !== undefined) {\n    if (!newValue.includes(decimal)) {\n      var _newValue, _newValue$replace;\n      if (((_newValue = newValue) == null ? void 0 : (_newValue$replace = _newValue.replace(/[,.]/g, '')) == null ? void 0 : _newValue$replace.length) > 3) {\n        var arr = [];\n        var unmasked = newValue.replace(/[,.]/g, '');\n        for (var i = 0; i < unmasked.length; i += 3) {\n          arr.push(unmasked.split('').splice(unmasked.length - i, 3).join(''));\n        }\n        arr = arr.reverse();\n        arr.pop();\n        var initial = arr.join('');\n        if (unmasked.includes(initial)) {\n          unmasked = unmasked.replace(initial, '');\n        }\n        newValue = unmasked + divider + arr.join(divider);\n      } else {\n        var _newValue2;\n        newValue = (_newValue2 = newValue) == null ? void 0 : _newValue2.replace(/[,.]/g, '');\n      }\n    } else {\n      var _newValue3, _newValue4;\n      if (((_newValue3 = newValue) == null ? void 0 : _newValue3.split(decimal).length) > 2 || (_newValue4 = newValue) != null && _newValue4.split(decimal)[1].includes(divider)) {\n        return value;\n      }\n    }\n  }\n  return newValue;\n}","map":{"version":3,"names":["getValueWithNonCurrencyMask","_ref","value","mask","unmasked","replace","positions","i","length","match","push","newValue","offset","j","_mask","getCurrencyDividerAndDecimal","divider","decimal","getValueWithCurrencyMask","_ref2","currencyDivider","_getCurrencyDividerAn","undefined","includes","_newValue","_newValue$replace","arr","split","splice","join","reverse","pop","initial","_newValue2","_newValue3","_newValue4"],"sources":["C:/Users/inbal/Documents/abilisense-project/project1/panic-button/client/node_modules/react-native-floating-label-input/src/utils.tsx"],"sourcesContent":["type Mask = string;\r\ntype CurrencyDivider = ',' | '.';\r\n\r\ntype CurrencyMaskTypeArgs = {\r\n  value: string;\r\n  newValue: string;\r\n  currencyDivider: CurrencyDivider | undefined;\r\n  maxDecimalPlaces: number | undefined;\r\n};\r\n\r\ntype NonCurrencyMaskTypeArgs = {\r\n  value: string;\r\n  mask: Mask;\r\n};\r\n\r\ntype ResultType = string | undefined;\r\n\r\nexport function getValueWithNonCurrencyMask({\r\n  value,\r\n  mask,\r\n}: NonCurrencyMaskTypeArgs): ResultType {\r\n  const unmasked = value.replace(/[^0-9A-Za-z]/g, '');\r\n\r\n  // mark positions of special characters\r\n  const positions: number[] = [];\r\n  for (let i = 0; i < mask.length; i++) {\r\n    if (mask[i].match(/[^0-9A-Za-z]/)) {\r\n      positions.push(i);\r\n    }\r\n  }\r\n\r\n  let newValue = '';\r\n  let offset = 0;\r\n  for (let j = 0; j < unmasked.length; j++) {\r\n    // add special characters\r\n    while (mask[j + offset]?.match(/[^0-9A-Za-z]/)) {\r\n      newValue += mask[j + offset];\r\n      offset++;\r\n    }\r\n    newValue += unmasked[j];\r\n  }\r\n\r\n  return newValue;\r\n}\r\n\r\nfunction getCurrencyDividerAndDecimal(divider: CurrencyDivider | undefined) {\r\n  if (divider === ',') {\r\n    return {\r\n      divider: ',' as const,\r\n      decimal: '.' as const,\r\n    };\r\n  } else\r\n    return {\r\n      divider: '.' as const,\r\n      decimal: ',' as const,\r\n    };\r\n}\r\n\r\nexport function getValueWithCurrencyMask({\r\n  value,\r\n  newValue,\r\n  currencyDivider,\r\n}: CurrencyMaskTypeArgs): ResultType {\r\n  const { divider, decimal } = getCurrencyDividerAndDecimal(currencyDivider);\r\n\r\n  if (value !== undefined) {\r\n    if (!newValue.includes(decimal)) {\r\n      if (newValue?.replace(/[,.]/g, '')?.length > 3) {\r\n        let arr: string[] = [];\r\n        let unmasked = newValue.replace(/[,.]/g, '');\r\n        for (let i = 0; i < unmasked.length; i += 3) {\r\n          arr.push(\r\n            unmasked\r\n              .split('')\r\n              .splice(unmasked.length - i, 3)\r\n              .join(''),\r\n          );\r\n        }\r\n\r\n        arr = arr.reverse();\r\n        arr.pop();\r\n        const initial = arr.join('');\r\n        if (unmasked.includes(initial)) {\r\n          unmasked = unmasked.replace(initial, '');\r\n        }\r\n        newValue = unmasked + divider + arr.join(divider);\r\n      } else {\r\n        newValue = newValue?.replace(/[,.]/g, '');\r\n      }\r\n    } else {\r\n      if (\r\n        newValue?.split(decimal).length > 2 ||\r\n        newValue?.split(decimal)[1].includes(divider)\r\n      ) {\r\n        return value;\r\n      }\r\n    }\r\n  }\r\n\r\n  return newValue;\r\n}\r\n"],"mappings":"AAiBA,OAAO,SAASA,2BAA2BA,CAAAC,IAAA,EAGH;EAAA,IAFtCC,KAAK,GAAAD,IAAA,CAALC,KAAK;IACLC,IAAI,GAAAF,IAAA,CAAJE,IAAI;EAEJ,IAAMC,QAAQ,GAAGF,KAAK,CAACG,OAAO,CAAC,eAAe,EAAE,EAAE,CAAC;EAGnD,IAAMC,SAAmB,GAAG,EAAE;EAC9B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,IAAI,CAACK,MAAM,EAAED,CAAC,EAAE,EAAE;IACpC,IAAIJ,IAAI,CAACI,CAAC,CAAC,CAACE,KAAK,CAAC,cAAc,CAAC,EAAE;MACjCH,SAAS,CAACI,IAAI,CAACH,CAAC,CAAC;IACnB;EACF;EAEA,IAAII,QAAQ,GAAG,EAAE;EACjB,IAAIC,MAAM,GAAG,CAAC;EACd,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGT,QAAQ,CAACI,MAAM,EAAEK,CAAC,EAAE,EAAE;IAExC,QAAAC,KAAA,GAAOX,IAAI,CAACU,CAAC,GAAGD,MAAM,CAAC,aAAhBE,KAAA,CAAkBL,KAAK,CAAC,cAAc,CAAC,EAAE;MAAA,IAAAK,KAAA;MAC9CH,QAAQ,IAAIR,IAAI,CAACU,CAAC,GAAGD,MAAM,CAAC;MAC5BA,MAAM,EAAE;IACV;IACAD,QAAQ,IAAIP,QAAQ,CAACS,CAAC,CAAC;EACzB;EAEA,OAAOF,QAAQ;AACjB;AAEA,SAASI,4BAA4BA,CAACC,OAAoC,EAAE;EAC1E,IAAIA,OAAO,KAAK,GAAG,EAAE;IACnB,OAAO;MACLA,OAAO,EAAE,GAAY;MACrBC,OAAO,EAAE;IACX,CAAC;EACH,CAAC,MACC,OAAO;IACLD,OAAO,EAAE,GAAY;IACrBC,OAAO,EAAE;EACX,CAAC;AACL;AAEA,OAAO,SAASC,wBAAwBA,CAAAC,KAAA,EAIH;EAAA,IAHnCjB,KAAK,GAAAiB,KAAA,CAALjB,KAAK;IACLS,QAAQ,GAAAQ,KAAA,CAARR,QAAQ;IACRS,eAAe,GAAAD,KAAA,CAAfC,eAAe;EAEf,IAAAC,qBAAA,GAA6BN,4BAA4B,CAACK,eAAe,CAAC;IAAlEJ,OAAO,GAAAK,qBAAA,CAAPL,OAAO;IAAEC,OAAO,GAAAI,qBAAA,CAAPJ,OAAO;EAExB,IAAIf,KAAK,KAAKoB,SAAS,EAAE;IACvB,IAAI,CAACX,QAAQ,CAACY,QAAQ,CAACN,OAAO,CAAC,EAAE;MAAA,IAAAO,SAAA,EAAAC,iBAAA;MAC/B,IAAI,EAAAD,SAAA,GAAAb,QAAQ,sBAAAc,iBAAA,GAARD,SAAA,CAAUnB,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,qBAA9BoB,iBAAA,CAAgCjB,MAAM,IAAG,CAAC,EAAE;QAC9C,IAAIkB,GAAa,GAAG,EAAE;QACtB,IAAItB,QAAQ,GAAGO,QAAQ,CAACN,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC;QAC5C,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,QAAQ,CAACI,MAAM,EAAED,CAAC,IAAI,CAAC,EAAE;UAC3CmB,GAAG,CAAChB,IAAI,CACNN,QAAQ,CACLuB,KAAK,CAAC,EAAE,CAAC,CACTC,MAAM,CAACxB,QAAQ,CAACI,MAAM,GAAGD,CAAC,EAAE,CAAC,CAAC,CAC9BsB,IAAI,CAAC,EAAE,CACZ,CAAC;QACH;QAEAH,GAAG,GAAGA,GAAG,CAACI,OAAO,CAAC,CAAC;QACnBJ,GAAG,CAACK,GAAG,CAAC,CAAC;QACT,IAAMC,OAAO,GAAGN,GAAG,CAACG,IAAI,CAAC,EAAE,CAAC;QAC5B,IAAIzB,QAAQ,CAACmB,QAAQ,CAACS,OAAO,CAAC,EAAE;UAC9B5B,QAAQ,GAAGA,QAAQ,CAACC,OAAO,CAAC2B,OAAO,EAAE,EAAE,CAAC;QAC1C;QACArB,QAAQ,GAAGP,QAAQ,GAAGY,OAAO,GAAGU,GAAG,CAACG,IAAI,CAACb,OAAO,CAAC;MACnD,CAAC,MAAM;QAAA,IAAAiB,UAAA;QACLtB,QAAQ,IAAAsB,UAAA,GAAGtB,QAAQ,qBAARsB,UAAA,CAAU5B,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC;MAC3C;IACF,CAAC,MAAM;MAAA,IAAA6B,UAAA,EAAAC,UAAA;MACL,IACE,EAAAD,UAAA,GAAAvB,QAAQ,qBAARuB,UAAA,CAAUP,KAAK,CAACV,OAAO,CAAC,CAACT,MAAM,IAAG,CAAC,KAAA2B,UAAA,GACnCxB,QAAQ,aAARwB,UAAA,CAAUR,KAAK,CAACV,OAAO,CAAC,CAAC,CAAC,CAAC,CAACM,QAAQ,CAACP,OAAO,CAAC,EAC7C;QACA,OAAOd,KAAK;MACd;IACF;EACF;EAEA,OAAOS,QAAQ;AACjB"},"metadata":{},"sourceType":"module","externalDependencies":[]}