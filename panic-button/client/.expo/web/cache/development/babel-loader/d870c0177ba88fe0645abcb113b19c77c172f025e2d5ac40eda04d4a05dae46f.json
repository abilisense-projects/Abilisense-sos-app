{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport { EventTypes, PointerType } from \"../interfaces\";\nimport EventManager from \"./EventManager\";\nimport { isPointerInBounds } from \"../utils\";\nvar PointerEventManager = function (_EventManager) {\n  _inherits(PointerEventManager, _EventManager);\n  var _super = _createSuper(PointerEventManager);\n  function PointerEventManager() {\n    var _this;\n    _classCallCheck(this, PointerEventManager);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _defineProperty(_assertThisInitialized(_this), \"trackedPointers\", new Set());\n    return _this;\n  }\n  _createClass(PointerEventManager, [{\n    key: \"setListeners\",\n    value: function setListeners() {\n      var _this2 = this;\n      this.view.addEventListener('pointerdown', function (event) {\n        if (event.pointerType === PointerType.TOUCH) {\n          return;\n        }\n        if (!isPointerInBounds(_this2.view, {\n          x: event.clientX,\n          y: event.clientY\n        })) {\n          return;\n        }\n        var adaptedEvent = _this2.mapEvent(event, EventTypes.DOWN);\n        var target = event.target;\n        if (target instanceof HTMLDivElement) {\n          target.setPointerCapture(adaptedEvent.pointerId);\n        }\n        _this2.markAsInBounds(adaptedEvent.pointerId);\n        _this2.trackedPointers.add(adaptedEvent.pointerId);\n        if (++_this2.activePointersCounter > 1) {\n          adaptedEvent.eventType = EventTypes.ADDITIONAL_POINTER_DOWN;\n          _this2.onPointerAdd(adaptedEvent);\n        } else {\n          _this2.onPointerDown(adaptedEvent);\n        }\n      });\n      this.view.addEventListener('pointerup', function (event) {\n        if (event.pointerType === PointerType.TOUCH) {\n          return;\n        }\n        if (_this2.activePointersCounter === 0) {\n          return;\n        }\n        var adaptedEvent = _this2.mapEvent(event, EventTypes.UP);\n        var target = event.target;\n        if (target instanceof HTMLDivElement) {\n          target.releasePointerCapture(adaptedEvent.pointerId);\n        }\n        _this2.markAsOutOfBounds(adaptedEvent.pointerId);\n        _this2.trackedPointers.delete(adaptedEvent.pointerId);\n        if (--_this2.activePointersCounter > 0) {\n          adaptedEvent.eventType = EventTypes.ADDITIONAL_POINTER_UP;\n          _this2.onPointerRemove(adaptedEvent);\n        } else {\n          _this2.onPointerUp(adaptedEvent);\n        }\n      });\n      this.view.addEventListener('pointermove', function (event) {\n        if (event.pointerType === PointerType.TOUCH) {\n          return;\n        }\n        var adaptedEvent = _this2.mapEvent(event, EventTypes.MOVE);\n        var target = event.target;\n        if (!target.hasPointerCapture(event.pointerId) && target instanceof HTMLDivElement) {\n          target.setPointerCapture(event.pointerId);\n        }\n        var inBounds = isPointerInBounds(_this2.view, {\n          x: adaptedEvent.x,\n          y: adaptedEvent.y\n        });\n        var pointerIndex = _this2.pointersInBounds.indexOf(adaptedEvent.pointerId);\n        if (inBounds) {\n          if (pointerIndex < 0) {\n            adaptedEvent.eventType = EventTypes.ENTER;\n            _this2.onPointerEnter(adaptedEvent);\n            _this2.markAsInBounds(adaptedEvent.pointerId);\n          } else {\n            _this2.onPointerMove(adaptedEvent);\n          }\n        } else {\n          if (pointerIndex >= 0) {\n            adaptedEvent.eventType = EventTypes.LEAVE;\n            _this2.onPointerLeave(adaptedEvent);\n            _this2.markAsOutOfBounds(adaptedEvent.pointerId);\n          } else {\n            _this2.onPointerOutOfBounds(adaptedEvent);\n          }\n        }\n      });\n      this.view.addEventListener('pointercancel', function (event) {\n        if (event.pointerType === PointerType.TOUCH) {\n          return;\n        }\n        var adaptedEvent = _this2.mapEvent(event, EventTypes.CANCEL);\n        _this2.onPointerCancel(adaptedEvent);\n        _this2.markAsOutOfBounds(adaptedEvent.pointerId);\n        _this2.activePointersCounter = 0;\n        _this2.trackedPointers.clear();\n      });\n      this.view.addEventListener('pointerenter', function (event) {\n        if (event.pointerType === PointerType.TOUCH) {\n          return;\n        }\n        var adaptedEvent = _this2.mapEvent(event, EventTypes.ENTER);\n        _this2.onPointerMoveOver(adaptedEvent);\n      });\n      this.view.addEventListener('pointerleave', function (event) {\n        if (event.pointerType === PointerType.TOUCH) {\n          return;\n        }\n        var adaptedEvent = _this2.mapEvent(event, EventTypes.LEAVE);\n        _this2.onPointerMoveOut(adaptedEvent);\n      });\n      this.view.addEventListener('lostpointercapture', function (event) {\n        var adaptedEvent = _this2.mapEvent(event, EventTypes.CANCEL);\n        if (_this2.trackedPointers.has(adaptedEvent.pointerId)) {\n          _this2.onPointerCancel(adaptedEvent);\n          _this2.activePointersCounter = 0;\n          _this2.trackedPointers.clear();\n        }\n      });\n    }\n  }, {\n    key: \"mapEvent\",\n    value: function mapEvent(event, eventType) {\n      return {\n        x: event.clientX,\n        y: event.clientY,\n        offsetX: event.offsetX,\n        offsetY: event.offsetY,\n        pointerId: event.pointerId,\n        eventType: eventType,\n        pointerType: event.pointerType,\n        buttons: event.buttons,\n        time: event.timeStamp\n      };\n    }\n  }, {\n    key: \"resetManager\",\n    value: function resetManager() {\n      _get(_getPrototypeOf(PointerEventManager.prototype), \"resetManager\", this).call(this);\n      this.trackedPointers.clear();\n    }\n  }]);\n  return PointerEventManager;\n}(EventManager);\nexport { PointerEventManager as default };","map":{"version":3,"names":["EventTypes","PointerType","EventManager","isPointerInBounds","PointerEventManager","_EventManager","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","_defineProperty","_assertThisInitialized","Set","_createClass","key","value","setListeners","_this2","view","addEventListener","event","pointerType","TOUCH","x","clientX","y","clientY","adaptedEvent","mapEvent","DOWN","target","HTMLDivElement","setPointerCapture","pointerId","markAsInBounds","trackedPointers","add","activePointersCounter","eventType","ADDITIONAL_POINTER_DOWN","onPointerAdd","onPointerDown","UP","releasePointerCapture","markAsOutOfBounds","delete","ADDITIONAL_POINTER_UP","onPointerRemove","onPointerUp","MOVE","hasPointerCapture","inBounds","pointerIndex","pointersInBounds","indexOf","ENTER","onPointerEnter","onPointerMove","LEAVE","onPointerLeave","onPointerOutOfBounds","CANCEL","onPointerCancel","clear","onPointerMoveOver","onPointerMoveOut","has","offsetX","offsetY","buttons","time","timeStamp","resetManager","_get","_getPrototypeOf","prototype","default"],"sources":["C:\\Users\\user1\\Desktop\\Abilicence\\project1\\panic-button\\client\\node_modules\\react-native-gesture-handler\\lib\\module\\web\\tools\\PointerEventManager.ts"],"sourcesContent":["import { AdaptedEvent, EventTypes, PointerType } from '../interfaces';\nimport EventManager from './EventManager';\nimport { isPointerInBounds } from '../utils';\n\nexport default class PointerEventManager extends EventManager<HTMLElement> {\n  private trackedPointers = new Set<number>();\n\n  public setListeners(): void {\n    this.view.addEventListener('pointerdown', (event: PointerEvent): void => {\n      if (event.pointerType === PointerType.TOUCH) {\n        return;\n      }\n      if (\n        !isPointerInBounds(this.view, { x: event.clientX, y: event.clientY })\n      ) {\n        return;\n      }\n\n      const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.DOWN);\n      const target = event.target as HTMLElement;\n\n      if (target instanceof HTMLDivElement) {\n        target.setPointerCapture(adaptedEvent.pointerId);\n      }\n\n      this.markAsInBounds(adaptedEvent.pointerId);\n      this.trackedPointers.add(adaptedEvent.pointerId);\n\n      if (++this.activePointersCounter > 1) {\n        adaptedEvent.eventType = EventTypes.ADDITIONAL_POINTER_DOWN;\n        this.onPointerAdd(adaptedEvent);\n      } else {\n        this.onPointerDown(adaptedEvent);\n      }\n    });\n\n    this.view.addEventListener('pointerup', (event: PointerEvent): void => {\n      if (event.pointerType === PointerType.TOUCH) {\n        return;\n      }\n\n      // When we call reset on gesture handlers, it also resets their event managers\n      // In some handlers (like RotationGestureHandler) reset is called before all pointers leave view\n      // This means, that activePointersCounter will be set to 0, while there are still remaining pointers on view\n      // Removing them will end in activePointersCounter going below 0, therefore handlers won't behave properly\n      if (this.activePointersCounter === 0) {\n        return;\n      }\n\n      const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.UP);\n      const target = event.target as HTMLElement;\n\n      if (target instanceof HTMLDivElement) {\n        target.releasePointerCapture(adaptedEvent.pointerId);\n      }\n\n      this.markAsOutOfBounds(adaptedEvent.pointerId);\n      this.trackedPointers.delete(adaptedEvent.pointerId);\n\n      if (--this.activePointersCounter > 0) {\n        adaptedEvent.eventType = EventTypes.ADDITIONAL_POINTER_UP;\n        this.onPointerRemove(adaptedEvent);\n      } else {\n        this.onPointerUp(adaptedEvent);\n      }\n    });\n\n    this.view.addEventListener('pointermove', (event: PointerEvent): void => {\n      if (event.pointerType === PointerType.TOUCH) {\n        return;\n      }\n\n      const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.MOVE);\n      const target = event.target as HTMLElement;\n\n      // You may be wondering why are we setting pointer capture here, when we\n      // already set it in `pointerdown` handler. Well, that's a great question,\n      // for which I don't have an answer. Specification (https://www.w3.org/TR/pointerevents2/#dom-element-setpointercapture)\n      // says that the requirement for `setPointerCapture` to work is that pointer\n      // must be in 'active buttons state`, otherwise it will fail silently, which\n      // is lovely. Obviously, when `pointerdown` is fired, one of the buttons\n      // (when using mouse) is pressed, but that doesn't mean that `setPointerCapture`\n      // will succeed, for some reason. Since it fails silently, we don't actually know\n      // if it worked or not (there's `gotpointercapture` event, but the complexity of\n      // incorporating it here seems stupid), so we just call it again here, every time\n      // pointer moves until it succeeds.\n      // God, I do love web development.\n      if (\n        !target.hasPointerCapture(event.pointerId) &&\n        target instanceof HTMLDivElement\n      ) {\n        target.setPointerCapture(event.pointerId);\n      }\n\n      const inBounds: boolean = isPointerInBounds(this.view, {\n        x: adaptedEvent.x,\n        y: adaptedEvent.y,\n      });\n\n      const pointerIndex: number = this.pointersInBounds.indexOf(\n        adaptedEvent.pointerId\n      );\n\n      if (inBounds) {\n        if (pointerIndex < 0) {\n          adaptedEvent.eventType = EventTypes.ENTER;\n          this.onPointerEnter(adaptedEvent);\n          this.markAsInBounds(adaptedEvent.pointerId);\n        } else {\n          this.onPointerMove(adaptedEvent);\n        }\n      } else {\n        if (pointerIndex >= 0) {\n          adaptedEvent.eventType = EventTypes.LEAVE;\n          this.onPointerLeave(adaptedEvent);\n          this.markAsOutOfBounds(adaptedEvent.pointerId);\n        } else {\n          this.onPointerOutOfBounds(adaptedEvent);\n        }\n      }\n    });\n\n    this.view.addEventListener('pointercancel', (event: PointerEvent): void => {\n      if (event.pointerType === PointerType.TOUCH) {\n        return;\n      }\n\n      const adaptedEvent: AdaptedEvent = this.mapEvent(\n        event,\n        EventTypes.CANCEL\n      );\n\n      this.onPointerCancel(adaptedEvent);\n      this.markAsOutOfBounds(adaptedEvent.pointerId);\n      this.activePointersCounter = 0;\n      this.trackedPointers.clear();\n    });\n\n    // onPointerEnter and onPointerLeave are triggered by a custom logic responsible for\n    // handling shouldCancelWhenOutside flag, and are unreliable unless the pointer is down.\n    // We therefore use pointerenter and pointerleave events to handle the hover gesture,\n    // mapping them to onPointerMoveOver and onPointerMoveOut respectively.\n\n    this.view.addEventListener('pointerenter', (event: PointerEvent): void => {\n      if (event.pointerType === PointerType.TOUCH) {\n        return;\n      }\n\n      const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.ENTER);\n\n      this.onPointerMoveOver(adaptedEvent);\n    });\n\n    this.view.addEventListener('pointerleave', (event: PointerEvent): void => {\n      if (event.pointerType === PointerType.TOUCH) {\n        return;\n      }\n\n      const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.LEAVE);\n\n      this.onPointerMoveOut(adaptedEvent);\n    });\n\n    this.view.addEventListener(\n      'lostpointercapture',\n      (event: PointerEvent): void => {\n        const adaptedEvent: AdaptedEvent = this.mapEvent(\n          event,\n          EventTypes.CANCEL\n        );\n\n        if (this.trackedPointers.has(adaptedEvent.pointerId)) {\n          // in some cases the `pointerup` event is not fired, but `lostpointercapture` is\n          // we simulate the `pointercancel` event here to make sure the gesture handler stops tracking it\n          this.onPointerCancel(adaptedEvent);\n\n          this.activePointersCounter = 0;\n          this.trackedPointers.clear();\n        }\n      }\n    );\n  }\n\n  protected mapEvent(event: PointerEvent, eventType: EventTypes): AdaptedEvent {\n    return {\n      x: event.clientX,\n      y: event.clientY,\n      offsetX: event.offsetX,\n      offsetY: event.offsetY,\n      pointerId: event.pointerId,\n      eventType: eventType,\n      pointerType: event.pointerType as PointerType,\n      buttons: event.buttons,\n      time: event.timeStamp,\n    };\n  }\n\n  public resetManager(): void {\n    super.resetManager();\n    this.trackedPointers.clear();\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}