{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport * as Yup from 'yup';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar SignUpScreen = function SignUpScreen(_ref) {\n  var onStepChange = _ref.onStepChange;\n  var _useState = useState({\n      firstname: '',\n      lastname: '',\n      email: '',\n      password: ''\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    formData = _useState2[0],\n    setFormData = _useState2[1];\n  var _useState3 = useState({}),\n    _useState4 = _slicedToArray(_useState3, 2),\n    errors = _useState4[0],\n    setErrors = _useState4[1];\n  var validationSchema = Yup.object().shape({\n    firstname: Yup.string().required('First name is required').max(50, 'First name is too long'),\n    lastname: Yup.string().required('Last name is required').max(50, 'Last name is too long'),\n    email: Yup.string().required('Email is required').email('Invalid email address'),\n    password: Yup.string().required('Password is required').matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/, 'Password must contain at least one uppercase letter, one lowercase letter, and one number')\n  });\n  var handleInputChange = function handleInputChange(key, text) {\n    setFormData(_objectSpread(_objectSpread({}, formData), {}, _defineProperty({}, key, text)));\n  };\n  var handleSignUp = function () {\n    var _ref2 = _asyncToGenerator(function* (newStep) {\n      try {\n        yield validationSchema.validate(formData, {\n          abortEarly: false\n        });\n        setErrors({});\n        onStepChange(newStep);\n      } catch (validationErrors) {\n        var errorsObject = {};\n        validationErrors.inner.forEach(function (error) {\n          errorsObject[error.path] = error.message;\n        });\n        setErrors(errorsObject);\n      }\n    });\n    return function handleSignUp(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: styles.title,\n      children: \"Sign Up\"\n    }), Object.keys(formData).map(function (key) {\n      return _jsxs(View, {\n        children: [_jsx(TextInput, {\n          style: [styles.input, errors[key] ? {\n            borderColor: 'red'\n          } : null],\n          placeholder: key.charAt(0).toUpperCase() + key.slice(1),\n          onChangeText: function onChangeText(text) {\n            return handleInputChange(key, text);\n          },\n          value: formData[key],\n          keyboardType: key === 'email' ? 'email-address' : 'default',\n          secureTextEntry: key === 'password'\n        }), errors[key] && _jsx(Text, {\n          style: styles.error,\n          children: errors[key]\n        })]\n      }, key);\n    }), _jsxs(View, {\n      style: styles.buttonContainer,\n      children: [_jsx(TouchableOpacity, {\n        style: styles.buttonPrev,\n        onPress: function onPress() {\n          return onStepChange(1);\n        },\n        children: _jsx(Text, {\n          style: styles.buttonText,\n          children: \"Prev\"\n        })\n      }), _jsx(TouchableOpacity, {\n        style: styles.buttonNext,\n        onPress: function onPress() {\n          return handleSignUp(2);\n        },\n        children: _jsx(Text, {\n          style: styles.buttonText,\n          children: \"Next\"\n        })\n      })]\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    marginBottom: 20\n  },\n  input: {\n    width: '80%',\n    height: 40,\n    borderColor: 'gray',\n    borderWidth: 1,\n    marginBottom: 10,\n    paddingLeft: 10\n  },\n  buttonText: {\n    color: 'white',\n    fontWeight: 'bold',\n    textAlign: 'center'\n  },\n  error: {\n    color: 'red',\n    marginBottom: 10\n  },\n  buttonContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    width: '80%',\n    marginTop: 20\n  },\n  buttonPrev: {\n    backgroundColor: '#ccc',\n    padding: 10,\n    borderRadius: 5,\n    flex: 1,\n    marginRight: 10\n  },\n  buttonNext: {\n    backgroundColor: 'blue',\n    padding: 10,\n    borderRadius: 5,\n    flex: 1\n  }\n});\nexport default SignUpScreen;","map":{"version":3,"names":["React","useState","View","Text","TextInput","TouchableOpacity","StyleSheet","Yup","jsx","_jsx","jsxs","_jsxs","SignUpScreen","_ref","onStepChange","_useState","firstname","lastname","email","password","_useState2","_slicedToArray","formData","setFormData","_useState3","_useState4","errors","setErrors","validationSchema","object","shape","string","required","max","matches","handleInputChange","key","text","_objectSpread","_defineProperty","handleSignUp","_ref2","_asyncToGenerator","newStep","validate","abortEarly","validationErrors","errorsObject","inner","forEach","error","path","message","_x","apply","arguments","style","styles","container","children","title","Object","keys","map","input","borderColor","placeholder","charAt","toUpperCase","slice","onChangeText","value","keyboardType","secureTextEntry","buttonContainer","buttonPrev","onPress","buttonText","buttonNext","create","flex","justifyContent","alignItems","fontSize","fontWeight","marginBottom","width","height","borderWidth","paddingLeft","color","textAlign","flexDirection","marginTop","backgroundColor","padding","borderRadius","marginRight"],"sources":["C:/Users/n0548/Desktop/Abilisence Project/project1/panic-button/client/components/signUp/signUp1.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { View, Text, TextInput, TouchableOpacity, StyleSheet } from 'react-native';\r\nimport * as Yup from 'yup';\r\n\r\nconst SignUpScreen = ({ onStepChange }) => {\r\n    const [formData, setFormData] = useState({\r\n        firstname: '',\r\n        lastname: '',\r\n        email: '',\r\n        password: '',\r\n    });\r\n\r\n    const [errors, setErrors] = useState({});\r\n\r\n    const validationSchema = Yup.object().shape({\r\n        firstname: Yup.string().required('First name is required').max(50, 'First name is too long'),\r\n        lastname: Yup.string().required('Last name is required').max(50, 'Last name is too long'),\r\n        email: Yup.string().required('Email is required').email('Invalid email address'),\r\n        password: Yup.string()\r\n            .required('Password is required')\r\n            .matches(\r\n                /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/,\r\n                'Password must contain at least one uppercase letter, one lowercase letter, and one number'\r\n            ),\r\n    });\r\n\r\n    const handleInputChange = (key, text) => {\r\n        setFormData({ ...formData, [key]: text });\r\n    };\r\n\r\n    const handleSignUp = async (newStep) => {\r\n        try {\r\n            await validationSchema.validate(formData, { abortEarly: false });\r\n            // Validation successful\r\n            setErrors({});\r\n            onStepChange(newStep);\r\n        } catch (validationErrors) {\r\n            // Validation failed\r\n            const errorsObject = {};\r\n            validationErrors.inner.forEach((error) => {\r\n                errorsObject[error.path] = error.message;\r\n            });\r\n            setErrors(errorsObject);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <View style={styles.container}>\r\n            <Text style={styles.title}>Sign Up</Text>\r\n\r\n            {Object.keys(formData).map((key) => (\r\n                <View key={key}>\r\n                    <TextInput\r\n                        style={[\r\n                            styles.input,\r\n                            errors[key] ? { borderColor: 'red' } : null,\r\n                        ]}\r\n                        placeholder={key.charAt(0).toUpperCase() + key.slice(1)}\r\n                        onChangeText={(text) => handleInputChange(key, text)}\r\n                        value={formData[key]}\r\n                        keyboardType={key === 'email' ? 'email-address' : 'default'}\r\n                        secureTextEntry={key === 'password'}\r\n                    />\r\n                    {errors[key] && <Text style={styles.error}>{errors[key]}</Text>}\r\n                </View>\r\n            ))}\r\n\r\n            <View style={styles.buttonContainer}>\r\n                <TouchableOpacity style={styles.buttonPrev} onPress={() => onStepChange(1)}>\r\n                    <Text style={styles.buttonText}>Prev</Text>\r\n                </TouchableOpacity>\r\n\r\n                <TouchableOpacity style={styles.buttonNext} onPress={() => handleSignUp(2)}>\r\n                    <Text style={styles.buttonText}>Next</Text>\r\n                </TouchableOpacity>\r\n            </View>\r\n        </View>\r\n    );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n    },\r\n    title: {\r\n        fontSize: 24,\r\n        fontWeight: 'bold',\r\n        marginBottom: 20,\r\n    },\r\n    input: {\r\n        width: '80%',\r\n        height: 40,\r\n        borderColor: 'gray',\r\n        borderWidth: 1,\r\n        marginBottom: 10,\r\n        paddingLeft: 10,\r\n    },\r\n    buttonText: {\r\n        color: 'white',\r\n        fontWeight: 'bold',\r\n        textAlign: 'center',\r\n    },\r\n    error: {\r\n        color: 'red',\r\n        marginBottom: 10,\r\n    },\r\n    buttonContainer: {\r\n        flexDirection: 'row',\r\n        justifyContent: 'space-between',\r\n        width: '80%',\r\n        marginTop: 20,\r\n    },\r\n    buttonPrev: {\r\n        backgroundColor: '#ccc',\r\n        padding: 10,\r\n        borderRadius: 5,\r\n        flex: 1,\r\n        marginRight: 10,\r\n    },\r\n    buttonNext: {\r\n        backgroundColor: 'blue',\r\n        padding: 10,\r\n        borderRadius: 5,\r\n        flex: 1,\r\n    },\r\n});\r\n\r\nexport default SignUpScreen;\r\n\r\n\r\n// import React, { useState } from 'react';\r\n// import { View, Text, TextInput, TouchableOpacity, StyleSheet, Alert } from 'react-native';\r\n\r\n// const SignUpScreen = ({ onStepChange }) => {\r\n//     // State to manage user input\r\n//     const [formData, setFormData] = useState({\r\n//         firstname: '',\r\n//         lastname: '',\r\n//         email: '',\r\n//         password: '',\r\n//     });\r\n\r\n//     // State for error messages\r\n//     const [error, setError] = useState('');\r\n\r\n//     // Define the input fields\r\n//     const inputFields = [\r\n//         { key: 'firstname', placeholder: 'Firstname' },\r\n//         { key: 'lastname', placeholder: 'Lastname' },\r\n//         { key: 'email', placeholder: 'Email', keyboardType: 'email-address' },\r\n//         { key: 'password', placeholder: 'Password', secureTextEntry: true },\r\n//     ];\r\n\r\n//     // Function to handle form validation\r\n//     const validateForm = () => {\r\n//         setError('');\r\n\r\n//         for (const field of inputFields) {\r\n//             if (!formData[field.key]) {\r\n//                 setError('All fields are required');\r\n//                 return false;\r\n//             }\r\n//         }\r\n\r\n//         // Add more sophisticated validation logic if needed\r\n\r\n//         return true;\r\n//     };\r\n\r\n//     // Function to handle sign-up action\r\n//     const handleSignUp = (newStep) => {\r\n//         if (validateForm()) {\r\n//             onStepChange(newStep); // Call the callback to move to another step\r\n//         }\r\n//     };\r\n\r\n//     // Function to update form data\r\n//     const handleInputChange = (key, text) => {\r\n//         setFormData({ ...formData, [key]: text });\r\n//     };\r\n\r\n//     return (\r\n//         <View style={styles.container}>\r\n//             <Text style={styles.title}>Sign Up</Text>\r\n\r\n//             {inputFields.map((field) => (\r\n//                 <TextInput\r\n//                     key={field.key}\r\n//                     style={styles.input}\r\n//                     placeholder={field.placeholder}\r\n//                     onChangeText={(text) => handleInputChange(field.key, text)}\r\n//                     value={formData[field.key]}\r\n//                     keyboardType={field.keyboardType}\r\n//                     secureTextEntry={field.secureTextEntry}\r\n//                 />\r\n//             ))}\r\n\r\n//             {/* Display error message if there is one */}\r\n//             {error ? <Text style={styles.error}>{error}</Text> : null}\r\n\r\n//             <View style={styles.buttonContainer}>\r\n//                 <TouchableOpacity style={styles.buttonPrev} onPress={() => onStepChange(1)}>\r\n//                     <Text style={styles.buttonText}>Prev</Text>\r\n//                 </TouchableOpacity>\r\n\r\n//                 <TouchableOpacity style={styles.buttonNext} onPress={() => handleSignUp(2)}>\r\n//                     <Text style={styles.buttonText}>Next</Text>\r\n//                 </TouchableOpacity>\r\n//             </View>\r\n//         </View>\r\n//     );\r\n// };\r\n\r\n// const styles = StyleSheet.create({\r\n//     container: {\r\n//         flex: 1,\r\n//         justifyContent: 'center',\r\n//         alignItems: 'center',\r\n//     },\r\n//     title: {\r\n//         fontSize: 24,\r\n//         fontWeight: 'bold',\r\n//         marginBottom: 20,\r\n//     },\r\n//     input: {\r\n//         width: '80%',\r\n//         height: 40,\r\n//         borderColor: 'gray',\r\n//         borderWidth: 1,\r\n//         marginBottom: 10,\r\n//         paddingLeft: 10,\r\n//     },\r\n//     buttonText: {\r\n//         color: 'white',\r\n//         fontWeight: 'bold',\r\n//         textAlign: 'center',\r\n//     },\r\n//     error: {\r\n//         color: 'red',\r\n//         marginBottom: 10,\r\n//     },\r\n    \r\n//   buttonContainer: {\r\n//     flexDirection: 'row',\r\n//     justifyContent: 'space-between',\r\n//     width: '80%',\r\n//     marginTop: 20,\r\n//   },\r\n//   buttonPrev: {\r\n//     backgroundColor: '#ccc', // Light gray\r\n//     padding: 10,\r\n//     borderRadius: 5,\r\n//     flex: 1,\r\n//     marginRight: 10,\r\n//   },\r\n//   buttonNext: {\r\n//     backgroundColor: 'blue',\r\n//     padding: 10,\r\n//     borderRadius: 5,\r\n//     flex: 1,\r\n//   },\r\n// });\r\n\r\n// export default SignUpScreen;\r\n\r\n// // import React, { useState } from 'react';\r\n// // import { View, Text, TextInput, TouchableOpacity, StyleSheet, Alert } from 'react-native';\r\n\r\n// // const SignUpScreen =  ({ onStepChange }) => {\r\n\r\n// //     // State to manage user input\r\n// //     const [firstname, setFirstname] = useState('');\r\n// //     const [lastname, setLastname] = useState('');\r\n// //     const [email, setEmail] = useState('');\r\n// //     const [password, setPassword] = useState('');\r\n\r\n// //     // State for error messages\r\n// //     const [error, setError] = useState('');\r\n\r\n// //     // Function to handle form validation\r\n// //     const validateForm = () => {\r\n// //         setError('');\r\n\r\n// //         if (!firstname) {\r\n// //             setError('All fields are required');\r\n// //             return false;\r\n// //         }\r\n\r\n// //         // if (!firstname || !lastname || !email || !password) {\r\n// //         //     setError('All fields are required');\r\n// //         //     return false;\r\n// //         // }\r\n\r\n// //         // Add more sophisticated validation logic if needed\r\n\r\n// //         return true;\r\n// //     };\r\n\r\n// //     // Function to handle sign-up action\r\n// //     // const handleSignUp = () => {\r\n// //     //     if (validateForm()) {\r\n// //     //         //Navigate to SignUp2 when the form is valid\r\n// //     //          navigation.navigate('SignUp2', { firstname, lastname, email, password });\r\n// //     //         // // Perform sign-up logic here (e.g., make an API request)\r\n// //     //     ;\r\n// //     //     }\r\n// //     // };\r\n\r\n// //     const handleSignUp = (newStep) => {\r\n// //         if (validateForm()) {\r\n// //             onStepChange(newStep); // Call the callback to move to another step\r\n// //         }\r\n// //     }\r\n\r\n// //     return (\r\n// //         <View style={styles.container}>\r\n// //             <Text style={styles.title}>Sign Up</Text>\r\n\r\n// //             <TextInput\r\n// //                 style={styles.input}\r\n// //                 placeholder=\"Firstname\"\r\n// //                 onChangeText={(text) => setFirstname(text)}\r\n// //                 value={firstname}\r\n// //             />\r\n\r\n// //             <TextInput\r\n// //                 style={styles.input}\r\n// //                 placeholder=\"Lastname\"\r\n// //                 onChangeText={(text) => setLastname(text)}\r\n// //                 value={lastname}\r\n// //             />\r\n\r\n// //             <TextInput\r\n// //                 style={styles.input}\r\n// //                 placeholder=\"Email\"\r\n// //                 onChangeText={(text) => setEmail(text)}\r\n// //                 value={email}\r\n// //                 keyboardType=\"email-address\"\r\n// //             />\r\n\r\n// //             <TextInput\r\n// //                 style={styles.input}\r\n// //                 placeholder=\"Password\"\r\n// //                 onChangeText={(text) => setPassword(text)}\r\n// //                 value={password}\r\n// //                 secureTextEntry\r\n// //             />\r\n\r\n// //             {/* Display error message if there is one */}\r\n// //             {error ? <Text style={styles.error}>{error}</Text> : null}\r\n\r\n// //             <View style={styles.buttonContainer}>\r\n// //                 <TouchableOpacity style={styles.buttonPrev} onPress={() =>onStepChange(1)}>\r\n// //                 <Text style={styles.buttonText}>Prev</Text>\r\n// //                 </TouchableOpacity>\r\n\r\n// //                 <TouchableOpacity style={styles.buttonNext} onPress={() =>handleSignUp(2)}>\r\n// //                 <Text style={styles.buttonText}>Next</Text>\r\n// //                 </TouchableOpacity> \r\n// //             </View>\r\n// //         </View>\r\n// //     );\r\n// // };\r\n\r\n// // const styles = StyleSheet.create({\r\n// //     container: {\r\n// //         flex: 1,\r\n// //         justifyContent: 'center',\r\n// //         alignItems: 'center',\r\n// //     },\r\n// //     title: {\r\n// //         fontSize: 24,\r\n// //         fontWeight: 'bold',\r\n// //         marginBottom: 20,\r\n// //     },\r\n// //     input: {\r\n// //         width: '80%',\r\n// //         height: 40,\r\n// //         borderColor: 'gray',\r\n// //         borderWidth: 1,\r\n// //         marginBottom: 10,\r\n// //         paddingLeft: 10,\r\n// //     },\r\n// //     buttonText: {\r\n// //         color: 'white',\r\n// //         fontWeight: 'bold',\r\n// //         textAlign: 'center',\r\n// //     },\r\n// //     error: {\r\n// //         color: 'red',\r\n// //         marginBottom: 10,\r\n// //     },\r\n    \r\n// //   buttonContainer: {\r\n// //     flexDirection: 'row',\r\n// //     justifyContent: 'space-between',\r\n// //     width: '80%',\r\n// //     marginTop: 20,\r\n// //   },\r\n// //   buttonPrev: {\r\n// //     backgroundColor: '#ccc', // Light gray\r\n// //     padding: 10,\r\n// //     borderRadius: 5,\r\n// //     flex: 1,\r\n// //     marginRight: 10,\r\n// //   },\r\n// //   buttonNext: {\r\n// //     backgroundColor: 'blue',\r\n// //     padding: 10,\r\n// //     borderRadius: 5,\r\n// //     flex: 1,\r\n// //   },\r\n// // });\r\n\r\n// // export default SignUpScreen;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}