{"ast":null,"code":"import { getPathFromState, NavigationContainerRefContext, NavigationHelpersContext } from '@react-navigation/core';\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport LinkingContext from \"./LinkingContext\";\nimport useLinkTo from \"./useLinkTo\";\nvar getStateFromParams = function getStateFromParams(params) {\n  if (params !== null && params !== void 0 && params.state) {\n    return params.state;\n  }\n  if (params !== null && params !== void 0 && params.screen) {\n    return {\n      routes: [{\n        name: params.screen,\n        params: params.params,\n        state: params.screen ? getStateFromParams(params.params) : undefined\n      }]\n    };\n  }\n  return undefined;\n};\nexport default function useLinkProps(_ref) {\n  var to = _ref.to,\n    action = _ref.action;\n  var _options$getPathFromS;\n  var root = React.useContext(NavigationContainerRefContext);\n  var navigation = React.useContext(NavigationHelpersContext);\n  var _React$useContext = React.useContext(LinkingContext),\n    options = _React$useContext.options;\n  var linkTo = useLinkTo();\n  var onPress = function onPress(e) {\n    var _e$currentTarget;\n    var shouldHandle = false;\n    if (Platform.OS !== 'web' || !e) {\n      shouldHandle = e ? !e.defaultPrevented : true;\n    } else if (!e.defaultPrevented && !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && (e.button == null || e.button === 0) && [undefined, null, '', 'self'].includes((_e$currentTarget = e.currentTarget) === null || _e$currentTarget === void 0 ? void 0 : _e$currentTarget.target)) {\n      e.preventDefault();\n      shouldHandle = true;\n    }\n    if (shouldHandle) {\n      if (action) {\n        if (navigation) {\n          navigation.dispatch(action);\n        } else if (root) {\n          root.dispatch(action);\n        } else {\n          throw new Error(\"Couldn't find a navigation object. Is your component inside NavigationContainer?\");\n        }\n      } else {\n        linkTo(to);\n      }\n    }\n  };\n  var getPathFromStateHelper = (_options$getPathFromS = options === null || options === void 0 ? void 0 : options.getPathFromState) !== null && _options$getPathFromS !== void 0 ? _options$getPathFromS : getPathFromState;\n  var href = typeof to === 'string' ? to : getPathFromStateHelper({\n    routes: [{\n      name: to.screen,\n      params: to.params,\n      state: getStateFromParams(to.params)\n    }]\n  }, options === null || options === void 0 ? void 0 : options.config);\n  return {\n    href: href,\n    accessibilityRole: 'link',\n    onPress: onPress\n  };\n}","map":{"version":3,"names":["getPathFromState","NavigationContainerRefContext","NavigationHelpersContext","React","Platform","LinkingContext","useLinkTo","getStateFromParams","params","state","screen","routes","name","undefined","useLinkProps","_ref","to","action","_options$getPathFromS","root","useContext","navigation","_React$useContext","options","linkTo","onPress","e","_e$currentTarget","shouldHandle","OS","defaultPrevented","metaKey","altKey","ctrlKey","shiftKey","button","includes","currentTarget","target","preventDefault","dispatch","Error","getPathFromStateHelper","href","config","accessibilityRole"],"sources":["C:\\Users\\inbal\\Documents\\abilisense-project\\project1\\panic-button\\client\\node_modules\\@react-navigation\\native\\lib\\module\\useLinkProps.tsx"],"sourcesContent":["import {\n  getPathFromState,\n  NavigationAction,\n  NavigationContainerRefContext,\n  NavigationHelpersContext,\n  NavigatorScreenParams,\n  ParamListBase,\n} from '@react-navigation/core';\nimport type { NavigationState, PartialState } from '@react-navigation/routers';\nimport * as React from 'react';\nimport { GestureResponderEvent, Platform } from 'react-native';\n\nimport LinkingContext from './LinkingContext';\nimport useLinkTo, { To } from './useLinkTo';\n\ntype Props<ParamList extends ReactNavigation.RootParamList> = {\n  to: To<ParamList>;\n  action?: NavigationAction;\n};\n\nconst getStateFromParams = (\n  params: NavigatorScreenParams<ParamListBase, NavigationState> | undefined\n): PartialState<NavigationState> | NavigationState | undefined => {\n  if (params?.state) {\n    return params.state;\n  }\n\n  if (params?.screen) {\n    return {\n      routes: [\n        {\n          name: params.screen,\n          params: params.params,\n          // @ts-expect-error\n          state: params.screen\n            ? getStateFromParams(\n                params.params as\n                  | NavigatorScreenParams<ParamListBase, NavigationState>\n                  | undefined\n              )\n            : undefined,\n        },\n      ],\n    };\n  }\n\n  return undefined;\n};\n\n/**\n * Hook to get props for an anchor tag so it can work with in page navigation.\n *\n * @param props.to Absolute path to screen (e.g. `/feeds/hot`).\n * @param props.action Optional action to use for in-page navigation. By default, the path is parsed to an action based on linking config.\n */\nexport default function useLinkProps<\n  ParamList extends ReactNavigation.RootParamList\n>({ to, action }: Props<ParamList>) {\n  const root = React.useContext(NavigationContainerRefContext);\n  const navigation = React.useContext(NavigationHelpersContext);\n  const { options } = React.useContext(LinkingContext);\n  const linkTo = useLinkTo<ParamList>();\n\n  const onPress = (\n    e?: React.MouseEvent<HTMLAnchorElement, MouseEvent> | GestureResponderEvent\n  ) => {\n    let shouldHandle = false;\n\n    if (Platform.OS !== 'web' || !e) {\n      shouldHandle = e ? !e.defaultPrevented : true;\n    } else if (\n      !e.defaultPrevented && // onPress prevented default\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && // ignore clicks with modifier keys\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      (e.button == null || e.button === 0) && // ignore everything but left clicks\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      [undefined, null, '', 'self'].includes(e.currentTarget?.target) // let browser handle \"target=_blank\" etc.\n    ) {\n      e.preventDefault();\n      shouldHandle = true;\n    }\n\n    if (shouldHandle) {\n      if (action) {\n        if (navigation) {\n          navigation.dispatch(action);\n        } else if (root) {\n          root.dispatch(action);\n        } else {\n          throw new Error(\n            \"Couldn't find a navigation object. Is your component inside NavigationContainer?\"\n          );\n        }\n      } else {\n        linkTo(to);\n      }\n    }\n  };\n\n  const getPathFromStateHelper = options?.getPathFromState ?? getPathFromState;\n\n  const href =\n    typeof to === 'string'\n      ? to\n      : getPathFromStateHelper(\n          {\n            routes: [\n              {\n                name: to.screen,\n                // @ts-expect-error\n                params: to.params,\n                // @ts-expect-error\n                state: getStateFromParams(to.params),\n              },\n            ],\n          },\n          options?.config\n        );\n\n  return {\n    href,\n    accessibilityRole: 'link' as const,\n    onPress,\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}