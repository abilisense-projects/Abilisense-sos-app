{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Change = function Change() {\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    selectedConditions = _useState2[0],\n    setSelectedConditions = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    newCondition = _useState4[0],\n    setNewCondition = _useState4[1];\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    isModalVisible = _useState6[0],\n    setModalVisible = _useState6[1];\n  var toggleModal = function toggleModal() {\n    setModalVisible(!isModalVisible);\n  };\n  var addCondition = function addCondition(condition) {\n    setSelectedConditions([].concat(_toConsumableArray(selectedConditions), [condition]));\n  };\n  var removeCondition = function removeCondition(condition) {\n    var updatedConditions = selectedConditions.filter(function (c) {\n      return c !== condition;\n    });\n    setSelectedConditions(updatedConditions);\n  };\n  var renderConditions = function renderConditions() {\n    return selectedConditions.map(function (condition, index) {\n      return _jsxs(View, {\n        style: styles.conditionBox,\n        children: [_jsx(Text, {\n          children: condition\n        }), _jsx(TouchableOpacity, {\n          onPress: function onPress() {\n            return removeCondition(condition);\n          },\n          children: _jsx(Text, {\n            style: styles.removeButton,\n            children: \"X\"\n          })\n        })]\n      }, index);\n    });\n  };\n  var renderMedicalConditions = function renderMedicalConditions() {\n    var medicalConditions = ['Gallstones', 'Reddish Earth', 'Myocardial Infarction', 'Infertility in Men'];\n    return medicalConditions.map(function (condition, index) {\n      return _jsx(TouchableOpacity, {\n        onPress: function onPress() {\n          return addCondition(condition);\n        },\n        children: _jsx(Text, {\n          style: styles.medicalCondition,\n          children: condition\n        })\n      }, index);\n    });\n  };\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(TouchableOpacity, {\n      onPress: toggleModal,\n      style: styles.showConditionsButton,\n      children: _jsx(Text, {\n        children: \"Select Medical Conditions\"\n      })\n    }), _jsx(Modal, {\n      visible: isModalVisible,\n      animationType: \"slide\",\n      transparent: true,\n      children: _jsx(View, {\n        style: styles.modalContainer,\n        children: _jsxs(ScrollView, {\n          children: [renderMedicalConditions(), _jsx(TouchableOpacity, {\n            onPress: toggleModal,\n            style: styles.closeModalButton,\n            children: _jsx(Text, {\n              children: \"Close\"\n            })\n          })]\n        })\n      })\n    }), _jsx(View, {\n      style: styles.selectedConditionsContainer,\n      children: renderConditions()\n    }), _jsxs(View, {\n      style: styles.inputContainer,\n      children: [_jsx(TextInput, {\n        style: styles.input,\n        placeholder: \"Add a new medical condition\",\n        value: newCondition,\n        onChangeText: function onChangeText(text) {\n          return setNewCondition(text);\n        }\n      }), _jsx(TouchableOpacity, {\n        onPress: function onPress() {\n          return addCondition(newCondition);\n        },\n        children: _jsx(Text, {\n          style: styles.addButton,\n          children: \"Add\"\n        })\n      })]\n    }), _jsx(TouchableOpacity, {\n      style: styles.loginButton,\n      children: _jsx(Text, {\n        style: {\n          color: 'white'\n        },\n        children: \"Login\"\n      })\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 20\n  },\n  showConditionsButton: {\n    marginBottom: 10,\n    alignItems: 'center'\n  },\n  modalContainer: {\n    flex: 1,\n    backgroundColor: 'white',\n    padding: 20\n  },\n  medicalCondition: {\n    fontSize: 16,\n    marginBottom: 10\n  },\n  closeModalButton: {\n    marginTop: 10,\n    padding: 10,\n    backgroundColor: '#e0e0e0',\n    borderRadius: 10,\n    alignItems: 'center'\n  },\n  selectedConditionsContainer: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    marginVertical: 10\n  },\n  conditionBox: {\n    backgroundColor: '#e0e0e0',\n    borderRadius: 20,\n    padding: 10,\n    margin: 5,\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  removeButton: {\n    marginLeft: 5,\n    color: 'red'\n  },\n  inputContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginVertical: 10\n  },\n  input: {\n    flex: 1,\n    borderWidth: 1,\n    borderRadius: 10,\n    padding: 10,\n    marginRight: 10\n  },\n  addButton: {\n    color: 'blue'\n  },\n  loginButton: {\n    backgroundColor: 'blue',\n    borderRadius: 10,\n    padding: 15,\n    alignItems: 'center',\n    marginTop: 20\n  }\n});\nexport default Change;","map":{"version":3,"names":["React","useState","View","Text","TouchableOpacity","TextInput","ScrollView","StyleSheet","Modal","jsx","_jsx","jsxs","_jsxs","Change","_useState","_useState2","_slicedToArray","selectedConditions","setSelectedConditions","_useState3","_useState4","newCondition","setNewCondition","_useState5","_useState6","isModalVisible","setModalVisible","toggleModal","addCondition","condition","concat","_toConsumableArray","removeCondition","updatedConditions","filter","c","renderConditions","map","index","style","styles","conditionBox","children","onPress","removeButton","renderMedicalConditions","medicalConditions","medicalCondition","container","showConditionsButton","visible","animationType","transparent","modalContainer","closeModalButton","selectedConditionsContainer","inputContainer","input","placeholder","value","onChangeText","text","addButton","loginButton","color","create","flex","padding","marginBottom","alignItems","backgroundColor","fontSize","marginTop","borderRadius","flexDirection","flexWrap","marginVertical","margin","marginLeft","borderWidth","marginRight"],"sources":["C:/Users/n0548/Desktop/Abilisence Project/project1/panic-button/client/components/signUp/Change.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { View, Text, TouchableOpacity, TextInput, ScrollView, StyleSheet, Modal } from 'react-native';\r\n\r\nconst Change = () => {\r\n  const [selectedConditions, setSelectedConditions] = useState([]);\r\n  const [newCondition, setNewCondition] = useState('');\r\n  const [isModalVisible, setModalVisible] = useState(false);\r\n\r\n  const toggleModal = () => {\r\n    setModalVisible(!isModalVisible);\r\n  };\r\n\r\n  const addCondition = (condition) => {\r\n    setSelectedConditions([...selectedConditions, condition]);\r\n  };\r\n\r\n  const removeCondition = (condition) => {\r\n    const updatedConditions = selectedConditions.filter((c) => c !== condition);\r\n    setSelectedConditions(updatedConditions);\r\n  };\r\n\r\n  const renderConditions = () => {\r\n    return selectedConditions.map((condition, index) => (\r\n      <View key={index} style={styles.conditionBox}>\r\n        <Text>{condition}</Text>\r\n        <TouchableOpacity onPress={() => removeCondition(condition)}>\r\n          <Text style={styles.removeButton}>X</Text>\r\n        </TouchableOpacity>\r\n      </View>\r\n    ));\r\n  };\r\n\r\n  const renderMedicalConditions = () => {\r\n    // Add your list of medical conditions here\r\n    const medicalConditions = [\r\n      'Gallstones',\r\n      'Reddish Earth',\r\n      'Myocardial Infarction',\r\n      'Infertility in Men',\r\n      // ... (Add other conditions similarly)\r\n    ];\r\n\r\n    return medicalConditions.map((condition, index) => (\r\n      <TouchableOpacity key={index} onPress={() => addCondition(condition)}>\r\n        <Text style={styles.medicalCondition}>{condition}</Text>\r\n      </TouchableOpacity>\r\n    ));\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <TouchableOpacity onPress={toggleModal} style={styles.showConditionsButton}>\r\n        <Text>Select Medical Conditions</Text>\r\n      </TouchableOpacity>\r\n\r\n      {/* Modal for displaying medical conditions */}\r\n      <Modal visible={isModalVisible} animationType=\"slide\" transparent={true}>\r\n        <View style={styles.modalContainer}>\r\n          <ScrollView>\r\n            {renderMedicalConditions()}\r\n            {/* Close button for the modal */}\r\n            <TouchableOpacity onPress={toggleModal} style={styles.closeModalButton}>\r\n              <Text>Close</Text>\r\n            </TouchableOpacity>\r\n          </ScrollView>\r\n        </View>\r\n      </Modal>\r\n\r\n      {/* Display selected conditions */}\r\n      <View style={styles.selectedConditionsContainer}>{renderConditions()}</View>\r\n\r\n      {/* Input for adding new condition */}\r\n      <View style={styles.inputContainer}>\r\n        <TextInput\r\n          style={styles.input}\r\n          placeholder=\"Add a new medical condition\"\r\n          value={newCondition}\r\n          onChangeText={(text) => setNewCondition(text)}\r\n        />\r\n        <TouchableOpacity onPress={() => addCondition(newCondition)}>\r\n          <Text style={styles.addButton}>Add</Text>\r\n        </TouchableOpacity>\r\n      </View>\r\n\r\n      {/* Login button */}\r\n      <TouchableOpacity style={styles.loginButton}>\r\n        <Text style={{ color: 'white' }}>Login</Text>\r\n      </TouchableOpacity>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    padding: 20,\r\n  },\r\n  showConditionsButton: {\r\n    marginBottom: 10,\r\n    alignItems: 'center',\r\n  },\r\n  modalContainer: {\r\n    flex: 1,\r\n    backgroundColor: 'white',\r\n    padding: 20,\r\n  },\r\n  medicalCondition: {\r\n    fontSize: 16,\r\n    marginBottom: 10,\r\n  },\r\n  closeModalButton: {\r\n    marginTop: 10,\r\n    padding: 10,\r\n    backgroundColor: '#e0e0e0',\r\n    borderRadius: 10,\r\n    alignItems: 'center',\r\n  },\r\n  selectedConditionsContainer: {\r\n    flexDirection: 'row',\r\n    flexWrap: 'wrap',\r\n    marginVertical: 10,\r\n  },\r\n  conditionBox: {\r\n    backgroundColor: '#e0e0e0',\r\n    borderRadius: 20,\r\n    padding: 10,\r\n    margin: 5,\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n  },\r\n  removeButton: {\r\n    marginLeft: 5,\r\n    color: 'red',\r\n  },\r\n  inputContainer: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    marginVertical: 10,\r\n  },\r\n  input: {\r\n    flex: 1,\r\n    borderWidth: 1,\r\n    borderRadius: 10,\r\n    padding: 10,\r\n    marginRight: 10,\r\n  },\r\n  addButton: {\r\n    color: 'blue',\r\n  },\r\n  loginButton: {\r\n    backgroundColor: 'blue',\r\n    borderRadius: 10,\r\n    padding: 15,\r\n    alignItems: 'center',\r\n    marginTop: 20,\r\n  },\r\n});\r\n\r\nexport default Change;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}