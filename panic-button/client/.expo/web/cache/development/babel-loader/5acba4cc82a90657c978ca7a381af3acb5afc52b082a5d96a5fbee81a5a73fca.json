{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _this = this;\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { AsyncStorage } from \"react-native-web/dist/index\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Login = function Login(_ref) {\n  var navigation = _ref.navigation;\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    email = _useState2[0],\n    setEmail = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    password = _useState4[0],\n    setPassword = _useState4[1];\n  var _useState5 = useState(true),\n    _useState6 = _slicedToArray(_useState5, 2),\n    isEmailValid = _useState6[0],\n    setIsEmailValid = _useState6[1];\n  var _useState7 = useState(true),\n    _useState8 = _slicedToArray(_useState7, 2),\n    isPasswordValid = _useState8[0],\n    setIsPasswordValid = _useState8[1];\n  var validateEmail = function validateEmail(email) {\n    var emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  };\n  var validatePassword = function validatePassword(password) {\n    var isLengthValid = password.length >= 6;\n    var specialCharacterRegex = /[!@#$%^&*(),.?\":{}|<>]/;\n    var hasSpecialCharacter = specialCharacterRegex.test(password);\n    var alphanumericRegex = /^(?=.*[0-9])(?=.*[a-zA-Z])/;\n    var isAlphanumeric = alphanumericRegex.test(password);\n    setIsPasswordValid(isLengthValid && hasSpecialCharacter && isAlphanumeric);\n    return isLengthValid && hasSpecialCharacter && isAlphanumeric;\n  };\n  var handleLogin = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      try {\n        setIsEmailValid(validateEmail(email));\n        if (!isEmailValid) {\n          console.error('Invalid email format');\n          return;\n        }\n        if (!validatePassword(password)) {\n          console.error('Invalid password format');\n          return;\n        }\n        var user = {\n          username: 'test'\n        };\n        if (!user) {\n          console.error('Invalid credentials');\n          return;\n        }\n        username = \"need to get it from DB\";\n        var action = loginSuccess({\n          username: username\n        });\n        _this.props.store.dispatch(action);\n        var state = store.getState();\n        console.log(ד);\n        var token = 'example_token';\n        console.log('Login successful');\n        navigation.navigate('Home');\n      } catch (error) {\n        console.error(error.message);\n      }\n    });\n    return function handleLogin() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(View, {\n      style: {\n        flexDirection: 'row',\n        justifyContent: 'flex-end'\n      },\n      children: _jsx(Button, {\n        title: \"Register\",\n        style: styles.register,\n        onPress: function onPress() {\n          return navigation.navigate('Register');\n        }\n      })\n    }), _jsx(Text, {\n      style: styles.header,\n      children: \"Login\"\n    }), _jsx(TextInput, {\n      style: [styles.input, !isEmailValid && styles.invalidInput],\n      placeholder: \"Email\",\n      onChangeText: function onChangeText(text) {\n        setEmail(text);\n        setIsEmailValid(true);\n      },\n      value: email\n    }), !isEmailValid && _jsx(Text, {\n      style: styles.warningText,\n      children: \"Invalid email format\"\n    }), _jsx(TextInput, {\n      style: [styles.input, !isPasswordValid && styles.invalidInput],\n      placeholder: \"Password\",\n      secureTextEntry: true,\n      onChangeText: function onChangeText(text) {\n        setPassword(text);\n        setIsPasswordValid(true);\n      },\n      value: password\n    }), !isPasswordValid && _jsx(Text, {\n      style: styles.warningText,\n      children: \"Password must be at least 6 characters long and include at least one special character and one number.\"\n    }), _jsx(Text, {\n      style: styles.forgotPassword,\n      onPress: function onPress() {\n        return navigation.navigate('ForgotPassword');\n      },\n      children: \"Forgot Password?\"\n    }), _jsx(Button, {\n      title: \"Login\",\n      onPress: handleLogin\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    fle5x: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  header: {\n    fontSize: 24,\n    marginBottom: 20\n  },\n  input: {\n    width: '25%',\n    height: 20,\n    borderColor: 'gray',\n    borderWidth: 1,\n    marginBottom: 10,\n    padding: 10\n  },\n  invalidInput: {\n    borderColor: 'red'\n  },\n  warningText: {\n    color: 'red',\n    fontSize: 12,\n    marginBottom: 5\n  },\n  forgotPassword: {\n    fontSize: 16,\n    color: 'blue',\n    textDecorationLine: 'underline',\n    marginBottom: 10\n  },\n  register: {\n    fontSize: 16,\n    color: 'blue',\n    flex: 1,\n    justifyContent: \"flex-start\"\n  }\n});\nexport default Login;","map":{"version":3,"names":["React","useState","View","Text","TextInput","Button","StyleSheet","AsyncStorage","jsx","_jsx","jsxs","_jsxs","Login","_ref","navigation","_useState","_useState2","_slicedToArray","email","setEmail","_useState3","_useState4","password","setPassword","_useState5","_useState6","isEmailValid","setIsEmailValid","_useState7","_useState8","isPasswordValid","setIsPasswordValid","validateEmail","emailRegex","test","validatePassword","isLengthValid","length","specialCharacterRegex","hasSpecialCharacter","alphanumericRegex","isAlphanumeric","handleLogin","_ref2","_asyncToGenerator","console","error","user","username","action","loginSuccess","_this","props","store","dispatch","state","getState","log","ד","token","navigate","message","apply","arguments","style","styles","container","children","flexDirection","justifyContent","title","register","onPress","header","input","invalidInput","placeholder","onChangeText","text","value","warningText","secureTextEntry","forgotPassword","create","fle5x","alignItems","fontSize","marginBottom","width","height","borderColor","borderWidth","padding","color","textDecorationLine","flex"],"sources":["C:/Users/user1/Desktop/Abilicence/project1/panic-button/client/pages/Login.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { View, Text, TextInput, Button, StyleSheet, AsyncStorage } from 'react-native';\r\n\r\n\r\nconst Login = ({ navigation }) => {\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [isEmailValid, setIsEmailValid] = useState(true); // State to track email validation\r\n  const [isPasswordValid, setIsPasswordValid] = useState(true); // State to track password validation\r\n  const validateEmail = (email) => {\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    return emailRegex.test(email);\r\n  };\r\n  const validatePassword = (password) => {\r\n    // Password length validation (minimum 6 characters)\r\n    const isLengthValid = password.length >= 6;\r\n    // Password special character validation\r\n    const specialCharacterRegex = /[!@#$%^&*(),.?\":{}|<>]/;\r\n    const hasSpecialCharacter = specialCharacterRegex.test(password);\r\n    // Password alphanumeric validation\r\n    const alphanumericRegex = /^(?=.*[0-9])(?=.*[a-zA-Z])/;\r\n    const isAlphanumeric = alphanumericRegex.test(password);\r\n    // Update password validation state\r\n    setIsPasswordValid(isLengthValid && hasSpecialCharacter && isAlphanumeric);\r\n    return isLengthValid && hasSpecialCharacter && isAlphanumeric;\r\n  };\r\n  const handleLogin = async () => {\r\n    try {\r\n      // Validate email format\r\n      setIsEmailValid(validateEmail(email));\r\n      if (!isEmailValid) {\r\n        console.error('Invalid email format');\r\n        return;\r\n      }\r\n      // Validate password\r\n      if (!validatePassword(password)) {\r\n        console.error('Invalid password format');\r\n        return;\r\n      }\r\n      // Connect to MongoDB and verify user credentials\r\n      // Replace the next line with the actual logic for connecting to MongoDB\r\n      // const user = await usersCollection.findOne({ email, password });\r\n      const user = { username: 'test' }; // Example user object\r\n      if (!user) {\r\n        console.error('Invalid credentials');\r\n        return;\r\n      }\r\n      username = \"need to get it from DB\"\r\n      const action = loginSuccess({ username });\r\n      this.props.store.dispatch(action);\r\n      const state = store.getState();\r\n      console.log(ד)\r\n      // Create JWT token\r\n      // Replace the next line with the actual logic for creating a JWT token\r\n      // const token = jwt.sign({ username: user.username }, process.env.JWT_SECRET, { expiresIn: '1h' });\r\n      const token = 'example_token'; // Example token\r\n      // Store token in local storage and navigate to the home screen\r\n      // Replace the next line with the actual logic for storing the token\r\n      // await AsyncStorage.setItem('token', token);\r\n      console.log('Login successful');\r\n      navigation.navigate('Home');\r\n    } catch (error) {\r\n      console.error(error.message);\r\n    }\r\n  };\r\n  return (\r\n    <View style={styles.container}>\r\n      <View style={{ flexDirection: 'row', justifyContent: 'flex-end' }}>\r\n        <Button title=\"Register\" style={styles.register} onPress={() => navigation.navigate('Register')}>\r\n        </Button>\r\n      </View>\r\n      <Text style={styles.header}>Login</Text>\r\n      <TextInput\r\n        style={[styles.input, !isEmailValid && styles.invalidInput]}\r\n        placeholder=\"Email\"\r\n        onChangeText={(text) => {\r\n          setEmail(text);\r\n          // Reset email validation on input change\r\n          setIsEmailValid(true);\r\n        }}\r\n        value={email}\r\n      />\r\n      {!isEmailValid && <Text style={styles.warningText}>Invalid email format</Text>}\r\n      <TextInput\r\n        style={[styles.input, !isPasswordValid && styles.invalidInput]}\r\n        placeholder=\"Password\"\r\n        secureTextEntry\r\n        onChangeText={(text) => {\r\n          setPassword(text);\r\n          // Reset password validation on input change\r\n          setIsPasswordValid(true);\r\n        }}\r\n        value={password}\r\n      />\r\n      {!isPasswordValid && (\r\n        <Text style={styles.warningText}>\r\n          Password must be at least 6 characters long and include at least one special character and one number.\r\n        </Text>\r\n      )}\r\n      <Text style={styles.forgotPassword} onPress={() => navigation.navigate('ForgotPassword')}>\r\n        Forgot Password?\r\n      </Text>\r\n      <Button title=\"Login\" onPress={handleLogin} />\r\n    </View>\r\n  );\r\n};\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    fle5x: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  header: {\r\n    fontSize: 24,\r\n    marginBottom: 20,\r\n  },\r\n  input: {\r\n    width: '25%',\r\n    height: 20,\r\n    borderColor: 'gray',\r\n    borderWidth: 1,\r\n    marginBottom: 10,\r\n    padding: 10,\r\n  },\r\n  invalidInput: {\r\n    borderColor: 'red',\r\n  },\r\n  warningText: {\r\n    color: 'red',\r\n    fontSize: 12,\r\n    marginBottom: 5,\r\n  },\r\n  forgotPassword: {\r\n    fontSize: 16,\r\n    color: 'blue',\r\n    textDecorationLine: 'underline',\r\n    marginBottom: 10,\r\n  },\r\n  register: {\r\n    fontSize: 16,\r\n    color: 'blue',\r\n    flex: 1,\r\n    justifyContent: \"flex-start\",\r\n    // alignSelf: \"flex-end\"\r\n\r\n  },\r\n});\r\nexport default Login;\r\n\r\n\r\n// /validations with yup-not work well\r\n// import React, { useState } from 'react';\r\n// import { View, Text, TextInput, Button, StyleSheet, AsyncStorage } from 'react-native';\r\n// import * as Yup from 'yup';\r\n\r\n// const loginValidationSchema = Yup.object().shape({\r\n//   email: Yup.string().required('Email is required').email('Invalid email address'),\r\n\r\n//   password: Yup.string()\r\n//     .required('Password is required')\r\n//     .min(12, 'Your password must contain at least 12 characters')\r\n//     .matches(/^(?=.*[a-zA-Zא-ת])(?=.*\\d)/, 'Password must contain at least:\\n  one letter and one number'),\r\n// });\r\n\r\n// const Login = ({ navigation }) => {\r\n//   const [email, setEmail] = useState('');\r\n//   const [password, setPassword] = useState('');\r\n//   const [errors, setErrors] = useState({}); 90\r\n\r\n//   const handleChangeEmail = (text) => {\r\n//     const isValid = Yup.string().email().validate(text);\r\n//     setEmail(text);\r\n//     if (!isValid) {\r\n//       setError('email', isValid.errors.email);\r\n//     } else {\r\n//       setError('email', null);\r\n//     }\r\n//   };\r\n\r\n//   const handleChangePassword = (text) => {\r\n//     const isValid = Yup.string().min(6).validate(text);\r\n//     setPassword(text);\r\n//     if (!isValid) {\r\n//       setError('password', isValid.errors.password);\r\n//     } else {\r\n//       setError('password', null);\r\n//     }\r\n//   };\r\n\r\n//   const setError = (field, message) => {\r\n//     const errors = { ...errors };\r\n//     errors[field] = message;\r\n//     setErrors(errors);\r\n//   };\r\n\r\n//   const handleLogin = async () => {\r\n//     try {\r\n//       // Validate user input with Yup\r\n//       const isValid = await loginValidationSchema.validate({ email, password });\r\n\r\n//       if (!isValid) {\r\n//         // Show warnings in TextInput\r\n//         for (const [field, message] of Object.entries(errors)) {\r\n//           switch (field) {\r\n//             case 'email':\r\n//               // Change the border color of the email input\r\n//               setEmailInputBorderColor('red');\r\n//               break;\r\n//             case 'password':\r\n//               // Change the border color of the password input\r\n//               setPasswordInputBorderColor('red');\r\n//               break;\r\n//           }\r\n//           // Add the warning to the input\r\n//           const warning = <Text style={styles.warningText}>{message}</Text>;\r\n//           {\r\n//             switch (field) {\r\n//               case 'email':\r\n//                 <TextInput\r\n//                   style={styles.input}\r\n//                   placeholder=\"Email\"\r\n//                   onChangeText={handleChangeEmail}\r\n//                   value={email}\r\n//                 >\r\n//                   {warning}\r\n//                 </TextInput>\r\n//                 break;\r\n//               case 'password':\r\n//                 <TextInput\r\n//                   style={styles.input}\r\n//                   placeholder=\"Password\"\r\n//                   secureTextEntry\r\n//                   onChangeText={handleChangePassword}\r\n//                   value={password}\r\n//                 >\r\n//                   {warning}\r\n//                 </TextInput>\r\n//                 break;\r\n//             }\r\n//           }\r\n//         }\r\n//       }\r\n\r\n//       // Continue with login logic (e.g., connect to MongoDB, verify credentials)\r\n//       // ...\r\n\r\n//       console.log('Login successful');\r\n//       navigation.navigate('Home');\r\n//     } catch (error) {\r\n//       console.error(error.message);\r\n//     }\r\n//   };\r\n\r\n//   // Added these lines to close the component\r\n//   return (\r\n//     <View style={styles.container}>\r\n//       <View style={{ flexDirection: 'row', justifyContent: 'flex-end' }}>\r\n//         <Button\r\n//           title=\"Register\"\r\n//           style={styles.register}\r\n//           onPress={() => navigation.navigate('Register')}\r\n//         />\r\n//       </View>\r\n//       <Text style={styles.header}>Login</Text>\r\n//       <TextInput\r\n//         style={styles.input}\r\n//         placeholder=\"Email\"\r\n//         onChangeText={handleChangeEmail}\r\n//         value={email}\r\n//       >\r\n//         {errors.email && <Text style={styles.warningText}>{errors.email}</Text>}\r\n//       </TextInput>\r\n//       <Button\r\n//         title=\"Login\"\r\n//         onPress={handleLogin} />\r\n//     </View>\r\n//   );\r\n// }\r\n// const styles = StyleSheet.create({\r\n//   container: {\r\n//     flex: 1,\r\n//     justifyContent: 'center',\r\n//     alignItems: 'center',\r\n//   },\r\n//   header: {\r\n//     fontSize: 24,\r\n//     marginBottom: 20,\r\n//   },\r\n//   input: {\r\n//     width: '25%',\r\n//     height: 20,\r\n//     borderColor: 'gray',\r\n//     borderWidth: 1,\r\n//     marginBottom: 10,\r\n//     padding: 10,\r\n//   },\r\n//   invalidInput: {\r\n//     borderColor: 'red',\r\n//   },\r\n//   warningText: {\r\n//     color: 'red',\r\n//     fontSize: 12,\r\n//     marginBottom: 5,\r\n//   },\r\n//   forgotPassword: {\r\n//     fontSize: 16,\r\n//     color: 'blue',\r\n//     textDecorationLine: 'underline',\r\n//     marginBottom: 10,\r\n//   },\r\n//   register: {\r\n//     fontSize: 16,\r\n//     color: 'blue',\r\n//     flex: 1,\r\n//     justifyContent: \"flex-start\",\r\n//   }\r\n// });\r\n\r\n// export default Login;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}