{"ast":null,"code":"","map":{"version":3,"names":[],"sources":["C:/Users/user1/Desktop/Abilicence/project1/panic-button/client/pages/Login.js"],"sourcesContent":["// 50\r\n// import React, { useState } from 'react';\r\n// import { View, Text, TextInput, Button, StyleSheet, AsyncStorage } from 'react-native';\r\n// const Login = ({ navigation }) => {\r\n//   const [email, setEmail] = useState('');\r\n//   const [password, setPassword] = useState('');\r\n//   const [isEmailValid, setIsEmailValid] = useState(true); // State to track email validation\r\n//   const [isPasswordValid, setIsPasswordValid] = useState(true); // State to track password validation\r\n//   const validateEmail = (email) => {\r\n//     const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n//     return emailRegex.test(email);\r\n//   };\r\n//   const validatePassword = (password) => {\r\n//     // Password length validation (minimum 6 characters)\r\n//     const isLengthValid = password.length >= 6;\r\n//     // Password special character validation\r\n//     const specialCharacterRegex = /[!@#$%^&*(),.?\":{}|<>]/;\r\n//     const hasSpecialCharacter = specialCharacterRegex.test(password);\r\n//     // Password alphanumeric validation\r\n//     const alphanumericRegex = /^(?=.*[0-9])(?=.*[a-zA-Z])/;\r\n//     const isAlphanumeric = alphanumericRegex.test(password);\r\n//     // Update password validation state\r\n//     setIsPasswordValid(isLengthValid && hasSpecialCharacter && isAlphanumeric);\r\n//     return isLengthValid && hasSpecialCharacter && isAlphanumeric;\r\n//   };\r\n//   const handleLogin = async () => {\r\n//     try {\r\n//       // Validate email format\r\n//       setIsEmailValid(validateEmail(email));\r\n//       if (!isEmailValid) {\r\n//         console.error('Invalid email format');\r\n//         return;\r\n//       }\r\n//       // Validate password\r\n//       if (!validatePassword(password)) {\r\n//         console.error('Invalid password format');\r\n//         return;\r\n//       }\r\n//       // Connect to MongoDB and verify user credentials\r\n//       // Replace the next line with the actual logic for connecting to MongoDB\r\n//       // const user = await usersCollection.findOne({ email, password });\r\n//       const user = { username: 'test' }; // Example user object\r\n//       if (!user) {\r\n//         console.error('Invalid credentials');\r\n//         return;\r\n//       }\r\n//       // Create JWT token\r\n//       // Replace the next line with the actual logic for creating a JWT token\r\n//       // const token = jwt.sign({ username: user.username }, process.env.JWT_SECRET, { expiresIn: '1h' });\r\n//       const token = 'example_token'; // Example token\r\n//       // Store token in local storage and navigate to the home screen\r\n//       // Replace the next line with the actual logic for storing the token\r\n//       // await AsyncStorage.setItem('token', token);\r\n//       console.log('Login successful');\r\n//       navigation.navigate('Home');\r\n//     } catch (error) {\r\n//       console.error(error.message);\r\n//     }\r\n//   };\r\n//   return (\r\n//     <View style={styles.container}>\r\n//       <View style={{ flexDirection: 'row', justifyContent: 'flex-end' }}>\r\n//         <Button title=\"Register\" style={styles.register} onPress={() => navigation.navigate('Register')}>\r\n//         </Button>\r\n//       </View>\r\n//       <Text style={styles.header}>Login</Text>\r\n//       <TextInput\r\n//         style={[styles.input, !isEmailValid && styles.invalidInput]}\r\n//         placeholder=\"Email\"\r\n//         onChangeText={(text) => {\r\n//           setEmail(text);\r\n//           // Reset email validation on input change\r\n//           setIsEmailValid(true);\r\n//         }}\r\n//         value={email}\r\n//       />\r\n//       {!isEmailValid && <Text style={styles.warningText}>Invalid email format</Text>}\r\n//       <TextInput\r\n//         style={[styles.input, !isPasswordValid && styles.invalidInput]}\r\n//         placeholder=\"Password\"\r\n//         secureTextEntry\r\n//         onChangeText={(text) => {\r\n//           setPassword(text);\r\n//           // Reset password validation on input change\r\n//           setIsPasswordValid(true);\r\n//         }}\r\n//         value={password}\r\n//       />\r\n//       {!isPasswordValid && (\r\n//         <Text style={styles.warningText}>\r\n//           Password must be at least 6 characters long and include at least one special character and one number.\r\n//         </Text>\r\n//       )}\r\n//       <Text style={styles.forgotPassword} onPress={() => navigation.navigate('ForgotPassword')}>\r\n//         Forgot Password?\r\n//       </Text>\r\n//       <Button title=\"Login\" onPress={handleLogin} />\r\n//     </View>\r\n//   );\r\n// };\r\n// const styles = StyleSheet.create({\r\n//   container: {\r\n//     flex: 1,\r\n//     justifyContent: 'center',\r\n//     alignItems: 'center',\r\n//   },\r\n//   header: {\r\n//     fontSize: 24,\r\n//     marginBottom: 20,\r\n//   },\r\n//   input: {\r\n//     width: '25%',\r\n//     height: 20,\r\n//     borderColor: 'gray',\r\n//     borderWidth: 1,\r\n//     marginBottom: 10,\r\n//     padding: 10,\r\n//   },\r\n//   invalidInput: {\r\n//     borderColor: 'red',\r\n//   },\r\n//   warningText: {\r\n//     color: 'red',\r\n//     fontSize: 12,\r\n//     marginBottom: 5,\r\n//   },\r\n//   forgotPassword: {\r\n//     fontSize: 16,\r\n//     color: 'blue',\r\n//     textDecorationLine: 'underline',\r\n//     marginBottom: 10,\r\n//   },\r\n//   register: {\r\n//     fontSize: 16,\r\n//     color: 'blue',\r\n//     flex: 1,\r\n//     justifyContent: \"flex-start\",\r\n//     // alignSelf: \"flex-end\"\r\n\r\n//   },\r\n// });\r\n// export default Login;\r\n\r\n\r\n///validations with yup-not work well\r\n// import React, { useState } from 'react';\r\n// import { View, Text, TextInput, Button, StyleSheet, AsyncStorage } from 'react-native';\r\n// import * as Yup from 'yup';\r\n\r\n// const loginValidationSchema = Yup.object().shape({\r\n//   email: Yup.string().required('Email is required').email('Invalid email address'),\r\n\r\n//   password: Yup.string()\r\n//     .required('Password is required')\r\n//     .min(12, 'Your password must contain at least 12 characters')\r\n//     .matches(/^(?=.*[a-zA-Zא-ת])(?=.*\\d)/, 'Password must contain at least:\\n  one letter and one number'),\r\n// });\r\n\r\n// const Login = ({ navigation }) => {\r\n//   const [email, setEmail] = useState('');\r\n//   const [password, setPassword] = useState('');\r\n//   const [errors, setErrors] = useState({}); 90\r\n\r\n//   const handleChangeEmail = (text) => {\r\n//     const isValid = Yup.string().email().validate(text);\r\n//     setEmail(text);\r\n//     if (!isValid) {\r\n//       setError('email', isValid.errors.email);\r\n//     } else {\r\n//       setError('email', null);\r\n//     }\r\n//   };\r\n\r\n//   const handleChangePassword = (text) => {\r\n//     const isValid = Yup.string().min(6).validate(text);\r\n//     setPassword(text);\r\n//     if (!isValid) {\r\n//       setError('password', isValid.errors.password);\r\n//     } else {\r\n//       setError('password', null);\r\n//     }\r\n//   };\r\n\r\n//   const setError = (field, message) => {\r\n//     const errors = { ...errors };\r\n//     errors[field] = message;\r\n//     setErrors(errors);\r\n//   };\r\n\r\n//   const handleLogin = async () => {\r\n//     try {\r\n//       // Validate user input with Yup\r\n//       const isValid = await loginValidationSchema.validate({ email, password });\r\n\r\n//       if (!isValid) {\r\n//         // Show warnings in TextInput\r\n//         for (const [field, message] of Object.entries(errors)) {\r\n//           switch (field) {\r\n//             case 'email':\r\n//               // Change the border color of the email input\r\n//               setEmailInputBorderColor('red');\r\n//               break;\r\n//             case 'password':\r\n//               // Change the border color of the password input\r\n//               setPasswordInputBorderColor('red');\r\n//               break;\r\n//           }\r\n//           // Add the warning to the input\r\n//           const warning = <Text style={styles.warningText}>{message}</Text>;\r\n//           {\r\n//             switch (field) {\r\n//               case 'email':\r\n//                 <TextInput\r\n//                   style={styles.input}\r\n//                   placeholder=\"Email\"\r\n//                   onChangeText={handleChangeEmail}\r\n//                   value={email}\r\n//                 >\r\n//                   {warning}\r\n//                 </TextInput>\r\n//                 break;\r\n//               case 'password':\r\n//                 <TextInput\r\n//                   style={styles.input}\r\n//                   placeholder=\"Password\"\r\n//                   secureTextEntry\r\n//                   onChangeText={handleChangePassword}\r\n//                   value={password}\r\n//                 >\r\n//                   {warning}\r\n//                 </TextInput>\r\n//                 break;\r\n//             }\r\n//           }\r\n//         }\r\n//       }\r\n\r\n//       // Continue with login logic (e.g., connect to MongoDB, verify credentials)\r\n//       // ...\r\n\r\n//       console.log('Login successful');\r\n//       navigation.navigate('Home');\r\n//     } catch (error) {\r\n//       console.error(error.message);\r\n//     }\r\n//   };\r\n\r\n//   // Added these lines to close the component\r\n//   return (\r\n//     <View style={styles.container}>\r\n//       <View style={{ flexDirection: 'row', justifyContent: 'flex-end' }}>\r\n//         <Button\r\n//           title=\"Register\"\r\n//           style={styles.register}\r\n//           onPress={() => navigation.navigate('Register')}\r\n//         />\r\n//       </View>\r\n//       <Text style={styles.header}>Login</Text>\r\n//       <TextInput\r\n//         style={styles.input}\r\n//         placeholder=\"Email\"\r\n//         onChangeText={handleChangeEmail}\r\n//         value={email}\r\n//       >\r\n//         {errors.email && <Text style={styles.warningText}>{errors.email}</Text>}\r\n//       </TextInput>\r\n//       <Button\r\n//         title=\"Login\"\r\n//         onPress={handleLogin} />\r\n//     </View>\r\n//   );\r\n// }\r\n// const styles = StyleSheet.create({\r\n//   container: {\r\n//     flex: 1,\r\n//     justifyContent: 'center',\r\n//     alignItems: 'center',\r\n//   },\r\n//   header: {\r\n//     fontSize: 24,\r\n//     marginBottom: 20,\r\n//   },\r\n//   input: {\r\n//     width: '25%',\r\n//     height: 20,\r\n//     borderColor: 'gray',\r\n//     borderWidth: 1,\r\n//     marginBottom: 10,\r\n//     padding: 10,\r\n//   },\r\n//   invalidInput: {\r\n//     borderColor: 'red',\r\n//   },\r\n//   warningText: {\r\n//     color: 'red',\r\n//     fontSize: 12,\r\n//     marginBottom: 5,\r\n//   },\r\n//   forgotPassword: {\r\n//     fontSize: 16,\r\n//     color: 'blue',\r\n//     textDecorationLine: 'underline',\r\n//     marginBottom: 10,\r\n//   },\r\n//   register: {\r\n//     fontSize: 16,\r\n//     color: 'blue',\r\n//     flex: 1,\r\n//     justifyContent: \"flex-start\",\r\n//   }\r\n// });\r\n\r\n// export default Login;"],"mappings":""},"metadata":{},"sourceType":"script","externalDependencies":[]}