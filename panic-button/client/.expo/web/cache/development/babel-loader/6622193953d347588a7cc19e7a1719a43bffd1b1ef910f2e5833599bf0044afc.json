{"ast":null,"code":"var validations = {\n  firstName: {\n    required: \"Name is required.\",\n    maxLength: {\n      value: 50,\n      message: \"Name must not exceed 50 characters.\"\n    }\n  },\n  lastName: {\n    required: \"Name is required.\",\n    maxLength: {\n      value: 50,\n      message: \"Name must not exceed 50 characters.\"\n    }\n  },\n  email: {\n    required: \"Email is required.\",\n    pattern: {\n      value: /\\S+@\\S+\\.\\S+/,\n      message: \"Email is invalid.\"\n    }\n  },\n  password: {\n    required: \"Password is required.\",\n    minLength: {\n      value: 8,\n      message: \"Password must be at least 8 characters.\"\n    },\n    pattern: {\n      value: /^(?=.*[a-zA-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]+$/,\n      message: \"Password must include at least one letter, one number, and one symbolic character.\"\n    }\n  },\n  phoneNumber: {\n    required: \"Phone number is required.\",\n    pattern: {\n      value: /^\\d+$/,\n      message: \"Phone number must contain only numbers.\"\n    },\n    minLength: {\n      value: 10,\n      message: \"Phone number must be at least 10 digits.\"\n    },\n    maxLength: {\n      value: 15,\n      message: \"Phone number must not exceed 15 digits.\"\n    }\n  },\n  repeatPassword: {\n    required: \"Password is required.\"\n  }\n};\nexport default validations;","map":{"version":3,"names":["validations","firstName","required","maxLength","value","message","lastName","email","pattern","password","minLength","phoneNumber","repeatPassword"],"sources":["C:/Users/n0548/Desktop/Abilisence Project/project1/panic-button/client/config/validations.js"],"sourcesContent":["const validations = {\r\n    firstName: {\r\n      required: \"Name is required.\",\r\n      maxLength: {\r\n        value: 50,\r\n        message: \"Name must not exceed 50 characters.\",\r\n      },\r\n    },\r\n    lastName: {\r\n        required: \"Name is required.\",\r\n        maxLength: {\r\n          value: 50,\r\n          message: \"Name must not exceed 50 characters.\",\r\n        },\r\n      },\r\n    email: {\r\n        required: \"Email is required.\",\r\n        pattern: {\r\n          value: /\\S+@\\S+\\.\\S+/,\r\n          message: \"Email is invalid.\",\r\n        },\r\n      },\r\n      \r\n      password: {\r\n        required: \"Password is required.\",\r\n        minLength: {\r\n          value: 8,\r\n          message: \"Password must be at least 8 characters.\",\r\n        },\r\n        pattern: {\r\n          value: /^(?=.*[a-zA-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]+$/,\r\n          message:\r\n            \"Password must include at least one letter, one number, and one symbolic character.\",\r\n        },\r\n      },\r\n\r\n    phoneNumber: {\r\n      required: \"Phone number is required.\",\r\n      pattern: {\r\n        value: /^\\d+$/,\r\n        message: \"Phone number must contain only numbers.\",\r\n      },\r\n      minLength: {\r\n        value: 10,\r\n        message: \"Phone number must be at least 10 digits.\",\r\n      },\r\n      maxLength: {\r\n        value: 15,\r\n        message: \"Phone number must not exceed 15 digits.\",\r\n      },\r\n    },\r\n\r\n    repeatPassword: {\r\n      required: \"Password is required.\",\r\n      \r\n    },\r\n   };\r\n  \r\n  export default validations;"],"mappings":"AAAA,IAAMA,WAAW,GAAG;EAChBC,SAAS,EAAE;IACTC,QAAQ,EAAE,mBAAmB;IAC7BC,SAAS,EAAE;MACTC,KAAK,EAAE,EAAE;MACTC,OAAO,EAAE;IACX;EACF,CAAC;EACDC,QAAQ,EAAE;IACNJ,QAAQ,EAAE,mBAAmB;IAC7BC,SAAS,EAAE;MACTC,KAAK,EAAE,EAAE;MACTC,OAAO,EAAE;IACX;EACF,CAAC;EACHE,KAAK,EAAE;IACHL,QAAQ,EAAE,oBAAoB;IAC9BM,OAAO,EAAE;MACPJ,KAAK,EAAE,cAAc;MACrBC,OAAO,EAAE;IACX;EACF,CAAC;EAEDI,QAAQ,EAAE;IACRP,QAAQ,EAAE,uBAAuB;IACjCQ,SAAS,EAAE;MACTN,KAAK,EAAE,CAAC;MACRC,OAAO,EAAE;IACX,CAAC;IACDG,OAAO,EAAE;MACPJ,KAAK,EAAE,2DAA2D;MAClEC,OAAO,EACL;IACJ;EACF,CAAC;EAEHM,WAAW,EAAE;IACXT,QAAQ,EAAE,2BAA2B;IACrCM,OAAO,EAAE;MACPJ,KAAK,EAAE,OAAO;MACdC,OAAO,EAAE;IACX,CAAC;IACDK,SAAS,EAAE;MACTN,KAAK,EAAE,EAAE;MACTC,OAAO,EAAE;IACX,CAAC;IACDF,SAAS,EAAE;MACTC,KAAK,EAAE,EAAE;MACTC,OAAO,EAAE;IACX;EACF,CAAC;EAEDO,cAAc,EAAE;IACdV,QAAQ,EAAE;EAEZ;AACD,CAAC;AAEF,eAAeF,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}