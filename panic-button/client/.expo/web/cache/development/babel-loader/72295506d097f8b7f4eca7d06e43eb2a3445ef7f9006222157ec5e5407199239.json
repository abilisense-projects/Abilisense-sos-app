{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { signUpValidationSchema } from \"../../config/validations\";\nimport { MaterialIcons } from '@expo/vector-icons';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar SignUpScreen = function SignUpScreen(_ref) {\n  var onStepChange = _ref.onStepChange;\n  var _useState = useState({\n      firstname: '',\n      lastname: '',\n      email: '',\n      password: ''\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    formData = _useState2[0],\n    setFormData = _useState2[1];\n  var _useState3 = useState({}),\n    _useState4 = _slicedToArray(_useState3, 2),\n    errors = _useState4[0],\n    setErrors = _useState4[1];\n  var handleInputChange = function handleInputChange(key, text) {\n    setFormData(_objectSpread(_objectSpread({}, formData), {}, _defineProperty({}, key, text)));\n    setErrors(_objectSpread(_objectSpread({}, errors), {}, _defineProperty({}, key, null)));\n  };\n  var isFieldValid = function isFieldValid(key) {\n    if (formData[key] && !errors[key]) {\n      try {\n        signUpValidationSchema.validateSyncAt(key, formData);\n        return true;\n      } catch (validationError) {\n        return false;\n      }\n    }\n    return false;\n  };\n  var renderLabel = function renderLabel(key) {\n    var fieldNames = {\n      firstname: 'First name',\n      lastname: 'Last name',\n      email: 'Email',\n      password: 'Password'\n    };\n    return _jsx(Text, {\n      style: styles.placeholderLabel,\n      children: fieldNames[key]\n    });\n  };\n  var handleSignUp = function handleSignUp(newStep) {\n    var formErrors = {};\n    Object.keys(formData).forEach(function (key) {\n      try {\n        signUpValidationSchema.validateSyncAt(key, formData);\n      } catch (validationError) {\n        formErrors[key] = validationError.message;\n      }\n    });\n    if (Object.keys(formErrors).length === 0) {\n      setErrors({});\n      onStepChange(newStep);\n    } else {\n      setErrors(formErrors);\n    }\n  };\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: styles.title,\n      children: \"Sign Up\"\n    }), Object.keys(formData).map(function (key) {\n      return _jsxs(View, {\n        style: styles.inputContainer,\n        children: [renderLabel(key), _jsx(TextInput, {\n          style: _objectSpread(_objectSpread({}, styles.input), {}, {\n            height: 40,\n            borderColor: isFieldValid(key) ? 'green' : errors[key] ? 'red' : 'gray'\n          }),\n          placeholder: key.charAt(0).toUpperCase() + key.slice(1),\n          onChangeText: function onChangeText(text) {\n            return handleInputChange(key, text);\n          },\n          value: formData[key],\n          keyboardType: key === 'email' ? 'email-address' : 'default',\n          secureTextEntry: key === 'password'\n        }), isFieldValid(key) && _jsx(View, {\n          style: styles.iconContainer,\n          children: _jsx(MaterialIcons, {\n            name: \"check\",\n            size: 24,\n            color: \"green\",\n            style: styles.icon\n          })\n        }), errors[key] && _jsx(Text, {\n          style: styles.error,\n          children: errors[key]\n        })]\n      }, key);\n    }), _jsxs(View, {\n      style: styles.buttonContainer,\n      children: [_jsx(Pressable, {\n        style: styles.buttonPrev,\n        onPress: function onPress() {\n          return onStepChange(1);\n        },\n        children: _jsx(Text, {\n          style: styles.buttonText,\n          children: \"Prev\"\n        })\n      }), _jsx(Pressable, {\n        style: styles.buttonNext,\n        onPress: function onPress() {\n          return handleSignUp(2);\n        },\n        children: _jsx(Text, {\n          style: styles.buttonText,\n          children: \"Next\"\n        })\n      })]\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    marginBottom: 20\n  },\n  inputContainer: {\n    position: 'relative',\n    marginBottom: 20\n  },\n  input: {\n    width: '80%',\n    borderWidth: 1,\n    paddingLeft: 10,\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  buttonText: {\n    color: 'white',\n    fontWeight: 'bold',\n    textAlign: 'center'\n  },\n  error: {\n    color: 'red',\n    marginTop: 5\n  },\n  buttonContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    width: '80%',\n    marginTop: 20\n  },\n  buttonPrev: {\n    backgroundColor: '#ccc',\n    padding: 10,\n    borderRadius: 5,\n    flex: 1,\n    marginRight: 10\n  },\n  buttonNext: {\n    backgroundColor: 'blue',\n    padding: 10,\n    borderRadius: 5,\n    flex: 1\n  },\n  icon: {\n    marginLeft: 10\n  },\n  iconContainer: {\n    position: 'absolute',\n    top: 12,\n    right: 12\n  },\n  placeholderLabel: {\n    position: 'absolute',\n    left: 10,\n    top: -8,\n    backgroundColor: 'rgb(243, 243, 243)',\n    paddingHorizontal: 5,\n    color: 'black'\n  }\n});\nexport default SignUpScreen;","map":{"version":3,"names":["React","useState","View","Text","TextInput","Pressable","StyleSheet","signUpValidationSchema","MaterialIcons","jsx","_jsx","jsxs","_jsxs","SignUpScreen","_ref","onStepChange","_useState","firstname","lastname","email","password","_useState2","_slicedToArray","formData","setFormData","_useState3","_useState4","errors","setErrors","handleInputChange","key","text","_objectSpread","_defineProperty","isFieldValid","validateSyncAt","validationError","renderLabel","fieldNames","style","styles","placeholderLabel","children","handleSignUp","newStep","formErrors","Object","keys","forEach","message","length","container","title","map","inputContainer","input","height","borderColor","placeholder","charAt","toUpperCase","slice","onChangeText","value","keyboardType","secureTextEntry","iconContainer","name","size","color","icon","error","buttonContainer","buttonPrev","onPress","buttonText","buttonNext","create","flex","justifyContent","alignItems","fontSize","fontWeight","marginBottom","position","width","borderWidth","paddingLeft","flexDirection","textAlign","marginTop","backgroundColor","padding","borderRadius","marginRight","marginLeft","top","right","left","paddingHorizontal"],"sources":["C:/Users/n0548/Desktop/Abilisence Project/project1/panic-button/client/components/signUp/signUp1.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { View, Text, TextInput, Pressable, StyleSheet } from 'react-native';\r\nimport { signUpValidationSchema } from '../../config/validations';\r\nimport { MaterialIcons } from '@expo/vector-icons';\r\n\r\nconst SignUpScreen = ({ onStepChange }) => {\r\n  const [formData, setFormData] = useState({\r\n    firstname: '',\r\n    lastname: '',\r\n    email: '',\r\n    password: '',\r\n  });\r\n\r\n  const [errors, setErrors] = useState({});\r\n\r\n  const handleInputChange = (key, text) => {\r\n    setFormData({ ...formData, [key]: text });\r\n    setErrors({ ...errors, [key]: null }); // Reset error when the user starts typing\r\n  };\r\n\r\n  const isFieldValid = (key) => {\r\n    if (formData[key] && !errors[key]) {\r\n      // Check validation conditions\r\n      try {\r\n        signUpValidationSchema.validateSyncAt(key, formData);\r\n        return true;\r\n      } catch (validationError) {\r\n        return false;\r\n      }\r\n    }\r\n    return false;\r\n  };\r\n\r\n  const renderLabel = (key) => {\r\n    const fieldNames = {\r\n      firstname: 'First name',\r\n      lastname: 'Last name',\r\n      email: 'Email',\r\n      password: 'Password',\r\n    };\r\n\r\n    return (\r\n      <Text style={styles.placeholderLabel}>\r\n        {fieldNames[key]}\r\n      </Text>\r\n    );\r\n  };\r\n\r\n  const handleSignUp = (newStep) => {\r\n    const formErrors = {};\r\n    Object.keys(formData).forEach((key) => {\r\n      try {\r\n        signUpValidationSchema.validateSyncAt(key, formData);\r\n      } catch (validationError) {\r\n        formErrors[key] = validationError.message;\r\n      }\r\n    });\r\n\r\n    if (Object.keys(formErrors).length === 0) {\r\n      // No errors, proceed to the next step\r\n      setErrors({});\r\n      onStepChange(newStep);\r\n    } else {\r\n      // Validation failed, set the errors\r\n      setErrors(formErrors);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <Text style={styles.title}>Sign Up</Text>\r\n\r\n      {Object.keys(formData).map((key) => (\r\n        <View key={key} style={styles.inputContainer}>\r\n          {renderLabel(key)}\r\n          <TextInput\r\n            style={{\r\n              ...styles.input,\r\n              height: 40, // Set a fixed height for the input\r\n              borderColor: isFieldValid(key) ? 'green' : errors[key] ? 'red' : 'gray',\r\n            }}\r\n            placeholder={key.charAt(0).toUpperCase() + key.slice(1)}\r\n            onChangeText={(text) => handleInputChange(key, text)}\r\n            value={formData[key]}\r\n            keyboardType={key === 'email' ? 'email-address' : 'default'}\r\n            secureTextEntry={key === 'password'}\r\n          />\r\n          {isFieldValid(key) && (\r\n            <View style={styles.iconContainer}>\r\n              <MaterialIcons name=\"check\" size={24} color=\"green\" style={styles.icon} />\r\n            </View>\r\n          )}\r\n          {errors[key] && <Text style={styles.error}>{errors[key]}</Text>}\r\n        </View>\r\n      ))}\r\n\r\n      <View style={styles.buttonContainer}>\r\n        <Pressable style={styles.buttonPrev} onPress={() => onStepChange(1)}>\r\n          <Text style={styles.buttonText}>Prev</Text>\r\n        </Pressable>\r\n\r\n        <Pressable style={styles.buttonNext} onPress={() => handleSignUp(2)}>\r\n          <Text style={styles.buttonText}>Next</Text>\r\n        </Pressable>\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  title: {\r\n    fontSize: 24,\r\n    fontWeight: 'bold',\r\n    marginBottom: 20,\r\n  },\r\n  inputContainer: {\r\n    position: 'relative',\r\n    marginBottom: 20,\r\n  },\r\n  input: {\r\n    width: '80%',\r\n    borderWidth: 1,\r\n    paddingLeft: 10,\r\n    flexDirection: 'row',\r\n    alignItems: 'center', // Center the icon vertically\r\n  },\r\n  buttonText: {\r\n    color: 'white',\r\n    fontWeight: 'bold',\r\n    textAlign: 'center',\r\n  },\r\n  error: {\r\n    color: 'red',\r\n    marginTop: 5,\r\n  },\r\n  buttonContainer: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    width: '80%',\r\n    marginTop: 20,\r\n  },\r\n  buttonPrev: {\r\n    backgroundColor: '#ccc',\r\n    padding: 10,\r\n    borderRadius: 5,\r\n    flex: 1,\r\n    marginRight: 10,\r\n  },\r\n  buttonNext: {\r\n    backgroundColor: 'blue',\r\n    padding: 10,\r\n    borderRadius: 5,\r\n    flex: 1,\r\n  },\r\n  icon: {\r\n    marginLeft: 10, // Adjust the margin as needed\r\n  },\r\n  iconContainer: {\r\n    position: 'absolute',\r\n    top: 12,\r\n    right: 12,\r\n  },\r\n  placeholderLabel: {\r\n    position: 'absolute',\r\n    left: 10,\r\n    top: -8,\r\n    backgroundColor: 'rgb(243, 243, 243)',\r\n    paddingHorizontal: 5,\r\n    color: 'black',\r\n  },\r\n});\r\n\r\nexport default SignUpScreen;\r\n\r\n\r\n// import React, { useState } from 'react';\r\n// import { View, Text, TextInput, Pressable, TouchableOpacity, StyleSheet } from 'react-native';\r\n// import { signUpValidationSchema } from '../../config/validations';\r\n// import { MaterialIcons } from '@expo/vector-icons';\r\n\r\n// const SignUpScreen = ({ onStepChange }) => {\r\n//   const [formData, setFormData] = useState({\r\n//     firstname: '',\r\n//     lastname: '',\r\n//     email: '',\r\n//     password: '',\r\n//   });\r\n\r\n//   const [errors, setErrors] = useState({});\r\n\r\n//   const handleInputChange = (key, text) => {\r\n//     setFormData({ ...formData, [key]: text });\r\n//     setErrors({ ...errors, [key]: null }); // Reset error when the user starts typing\r\n//   };\r\n\r\n//   const isFieldValid = (key) => {\r\n//     if (formData[key] && !errors[key]) {\r\n//       // Check validation conditions\r\n//       try {\r\n//         signUpValidationSchema.validateSyncAt(key, formData);\r\n//         return true;\r\n//       } catch (validationError) {\r\n//         return false;\r\n//       }\r\n//     }\r\n//     return false;\r\n//   };\r\n\r\n//   const renderLabel = (key) => {\r\n//     return (\r\n//       <Text style={styles.placeholderLabel}>\r\n//         {formData[key] ? key.charAt(0).toUpperCase() + key.slice(1) : ''}\r\n//       </Text>\r\n//     );\r\n//   };\r\n\r\n//   const handleSignUp = (newStep) => {\r\n//     const formErrors = {};\r\n//     Object.keys(formData).forEach((key) => {\r\n//       try {\r\n//         signUpValidationSchema.validateSyncAt(key, formData);\r\n//       } catch (validationError) {\r\n//         formErrors[key] = validationError.message;\r\n//       }\r\n//     });\r\n\r\n//     if (Object.keys(formErrors).length === 0) {\r\n//       // No errors, proceed to the next step\r\n//       setErrors({});\r\n//       onStepChange(newStep);\r\n//     } else {\r\n//       // Validation failed, set the errors\r\n//       setErrors(formErrors);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <View style={styles.container}>\r\n//       <Text style={styles.title}>Sign Up</Text>\r\n\r\n//       {Object.keys(formData).map((key) => (\r\n//         <View key={key} style={styles.inputContainer}>\r\n//           {renderLabel(key)}\r\n//           <TextInput\r\n//             style={{\r\n//               ...styles.input,\r\n//               height: 40, // Set a fixed height for the input\r\n//               borderColor: isFieldValid(key) ? 'green' : errors[key] ? 'red' : 'gray',\r\n//             }}\r\n//             placeholder={key.charAt(0).toUpperCase() + key.slice(1)}\r\n//             onChangeText={(text) => handleInputChange(key, text)}\r\n//             value={formData[key]}\r\n//             keyboardType={key === 'email' ? 'email-address' : 'default'}\r\n//             secureTextEntry={key === 'password'}\r\n//           />\r\n//           {isFieldValid(key) && (\r\n//             <View style={styles.iconContainer}>\r\n//               <MaterialIcons name=\"check\" size={24} color=\"green\" style={styles.icon} />\r\n//             </View>\r\n//           )}\r\n//           {errors[key] && <Text style={styles.error}>{errors[key]}</Text>}\r\n//         </View>\r\n//       ))}\r\n\r\n//       <View style={styles.buttonContainer}>\r\n//         <Pressable style={styles.buttonPrev} onPress={() => onStepChange(1)}>\r\n//           <Text style={styles.buttonText}>Prev</Text>\r\n//         </Pressable>\r\n\r\n//         <Pressable style={styles.buttonNext} onPress={() => handleSignUp(2)}>\r\n//           <Text style={styles.buttonText}>Next</Text>\r\n//         </Pressable>\r\n//       </View>\r\n//     </View>\r\n//   );\r\n// };\r\n\r\n// const styles = StyleSheet.create({\r\n//   container: {\r\n//     flex: 1,\r\n//     justifyContent: 'center',\r\n//     alignItems: 'center',\r\n//   },\r\n//   title: {\r\n//     fontSize: 24,\r\n//     fontWeight: 'bold',\r\n//     marginBottom: 20,\r\n//   },\r\n//   inputContainer: {\r\n//     position: 'relative',\r\n//     marginBottom: 20,\r\n//   },\r\n//   input: {\r\n//     width: '80%',\r\n//     borderWidth: 1,\r\n//     paddingLeft: 10,\r\n//     flexDirection: 'row',\r\n//     alignItems: 'center', // Center the icon vertically\r\n//   },\r\n//   buttonText: {\r\n//     color: 'white',\r\n//     fontWeight: 'bold',\r\n//     textAlign: 'center',\r\n//   },\r\n//   error: {\r\n//     color: 'red',\r\n//     marginTop: 5,\r\n//   },\r\n//   buttonContainer: {\r\n//     flexDirection: 'row',\r\n//     justifyContent: 'space-between',\r\n//     width: '80%',\r\n//     marginTop: 20,\r\n//   },\r\n//   buttonPrev: {\r\n//     backgroundColor: '#ccc',\r\n//     padding: 10,\r\n//     borderRadius: 5,\r\n//     flex: 1,\r\n//     marginRight: 10,\r\n//   },\r\n//   buttonNext: {\r\n//     backgroundColor: 'blue',\r\n//     padding: 10,\r\n//     borderRadius: 5,\r\n//     flex: 1,\r\n//   },\r\n//   icon: {\r\n//     marginLeft: 10, // Adjust the margin as needed\r\n//   },\r\n//   iconContainer: {\r\n//     position: 'absolute',\r\n//     top: 12,\r\n//     right: 12,\r\n//   },\r\n//   placeholderLabel: {\r\n//     position: 'absolute',\r\n//     left: 10,\r\n//     top: -8,\r\n//     backgroundColor: 'rgb(243, 243, 243), 195, 197',\r\n//     paddingHorizontal: 5,\r\n//     color: 'black',\r\n//   },\r\n// });\r\n\r\n// export default SignUpScreen;\r\n\r\n\r\n//מצוין 3\r\n// import React, { useState } from 'react';\r\n// import { View, Text, TextInput, Pressable, TouchableOpacity, StyleSheet } from 'react-native';\r\n// import { signUpValidationSchema } from '../../config/validations';\r\n// import { MaterialIcons } from '@expo/vector-icons';\r\n\r\n// const SignUpScreen = ({ onStepChange }) => {\r\n//   const [formData, setFormData] = useState({\r\n//     firstname: '',\r\n//     lastname: '',\r\n//     email: '',\r\n//     password: '',\r\n//   });\r\n\r\n//   const [errors, setErrors] = useState({});\r\n\r\n//   const handleInputChange = (key, text) => {\r\n//     setFormData({ ...formData, [key]: text });\r\n//     setErrors({ ...errors, [key]: null }); // Reset error when the user starts typing\r\n//   };\r\n\r\n//   const isFieldValid = (key) => {\r\n//     if (formData[key] && !errors[key]) {\r\n//       // Check validation conditions\r\n//       try {\r\n//         signUpValidationSchema.validateSyncAt(key, formData);\r\n//         return true;\r\n//       } catch (validationError) {\r\n//         return false;\r\n//       }\r\n//     }\r\n//     return false;\r\n//   };\r\n\r\n//   const renderLabel = (key) => {\r\n//     return (\r\n//       <Text style={styles.placeholderLabel}>\r\n//         {formData[key] ? key.charAt(0).toUpperCase() + key.slice(1) : ''}\r\n//       </Text>\r\n//     );\r\n//   };\r\n\r\n//   const handleSignUp = (newStep) => {\r\n//     const formErrors = {};\r\n//     Object.keys(formData).forEach((key) => {\r\n//       try {\r\n//         signUpValidationSchema.validateSyncAt(key, formData);\r\n//       } catch (validationError) {\r\n//         formErrors[key] = validationError.message;\r\n//       }\r\n//     });\r\n\r\n//     if (Object.keys(formErrors).length === 0) {\r\n//       // No errors, proceed to the next step\r\n//       setErrors({});\r\n//       onStepChange(newStep);\r\n//     } else {\r\n//       // Validation failed, set the errors\r\n//       setErrors(formErrors);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <View style={styles.container}>\r\n//       <Text style={styles.title}>Sign Up</Text>\r\n\r\n//       {Object.keys(formData).map((key) => (\r\n//         <View key={key} style={{ position: 'relative' }}>\r\n//           {renderLabel(key)}\r\n//           <TextInput\r\n//             style={{\r\n//               ...styles.input,\r\n//               borderColor: isFieldValid(key) ? 'green' : errors[key] ? 'red' : 'gray',\r\n//             }}\r\n//             placeholder={key.charAt(0).toUpperCase() + key.slice(1)}\r\n//             onChangeText={(text) => handleInputChange(key, text)}\r\n//             value={formData[key]}\r\n//             keyboardType={key === 'email' ? 'email-address' : 'default'}\r\n//             secureTextEntry={key === 'password'}\r\n//           />\r\n//           {isFieldValid(key) && (\r\n//             <View style={styles.iconContainer}>\r\n//               <MaterialIcons name=\"check\" size={24} color=\"green\" style={styles.icon} />\r\n//             </View>\r\n//           )}\r\n//           {errors[key] && <Text style={styles.error}>{errors[key]}</Text>}\r\n//         </View>\r\n//       ))}\r\n\r\n//       <View style={styles.buttonContainer}>\r\n//         <Pressable style={styles.buttonPrev} onPress={() => onStepChange(1)}>\r\n//           <Text style={styles.buttonText}>Prev</Text>\r\n//         </Pressable>\r\n\r\n//         <Pressable style={styles.buttonNext} onPress={() => handleSignUp(2)}>\r\n//           <Text style={styles.buttonText}>Next</Text>\r\n//         </Pressable>\r\n//       </View>\r\n//     </View>\r\n//   );\r\n// };\r\n\r\n// const styles = StyleSheet.create({\r\n//   container: {\r\n//     flex: 1,\r\n//     justifyContent: 'center',\r\n//     alignItems: 'center',\r\n//   },\r\n//   title: {\r\n//     fontSize: 24,\r\n//     fontWeight: 'bold',\r\n//     marginBottom: 20,\r\n//   },\r\n//   input: {\r\n//     width: '80%',\r\n//     height: 40,\r\n//     borderWidth: 1,\r\n//     marginBottom: 10,\r\n//     paddingLeft: 10,\r\n//     flexDirection: 'row',\r\n//     alignItems: 'center', // Center the icon vertically\r\n//   },\r\n//   buttonText: {\r\n//     color: 'white',\r\n//     fontWeight: 'bold',\r\n//     textAlign: 'center',\r\n//   },\r\n//   error: {\r\n//     color: 'red',\r\n//     marginBottom: 10,\r\n//   },\r\n//   buttonContainer: {\r\n//     flexDirection: 'row',\r\n//     justifyContent: 'space-between',\r\n//     width: '80%',\r\n//     marginTop: 20,\r\n//   },\r\n//   buttonPrev: {\r\n//     backgroundColor: '#ccc',\r\n//     padding: 10,\r\n//     borderRadius: 5,\r\n//     flex: 1,\r\n//     marginRight: 10,\r\n//   },\r\n//   buttonNext: {\r\n//     backgroundColor: 'blue',\r\n//     padding: 10,\r\n//     borderRadius: 5,\r\n//     flex: 1,\r\n//   },\r\n//   icon: {\r\n//     marginLeft: 10, // Adjust the margin as needed\r\n//   },\r\n//   iconContainer: {\r\n//     position: 'absolute',\r\n//     top: 12,\r\n//     right: 12,\r\n//   },\r\n//   placeholderLabel: {\r\n//     position: 'absolute',\r\n//     left: 10,\r\n//     top: -8,\r\n//     backgroundColor:'rgb(243, 243, 243), 195, 197',\r\n//     paddingHorizontal: 5,\r\n//     color: 'black',\r\n//   },\r\n// });\r\n\r\n// export default SignUpScreen;\r\n\r\n\r\n//מצוין2 \r\n\r\n// import React, { useState } from 'react';\r\n// import { View, Text, TextInput,Pressable, TouchableOpacity, StyleSheet } from 'react-native';\r\n// import { signUpValidationSchema } from '../../config/validations';\r\n// import { MaterialIcons } from '@expo/vector-icons'; \r\n\r\n// const SignUpScreen = ({ onStepChange }) => {\r\n//     const [formData, setFormData] = useState({\r\n//         firstname: '',\r\n//         lastname: '',\r\n//         email: '',\r\n//         password: '',\r\n//     });\r\n\r\n//     const [errors, setErrors] = useState({});\r\n\r\n//     const handleInputChange = (key, text) => {\r\n//         setFormData({ ...formData, [key]: text });\r\n//         setErrors({ ...errors, [key]: null }); // Reset error when the user starts typing\r\n//     };\r\n\r\n//     const isFieldValid = (key) => {\r\n//         if (formData[key] && !errors[key]) {\r\n//             // Check validation conditions\r\n//             try {\r\n//                 signUpValidationSchema.validateSyncAt(key, formData);\r\n//                 return true;\r\n//             } catch (validationError) {\r\n//                 return false;\r\n//             }\r\n//         }\r\n//         return false;\r\n//     };\r\n\r\n//     const handleSignUp = (newStep) => {\r\n//         const formErrors = {};\r\n//         Object.keys(formData).forEach((key) => {\r\n//             try {\r\n//                 signUpValidationSchema.validateSyncAt(key, formData);\r\n//             } catch (validationError) {\r\n//                 formErrors[key] = validationError.message;\r\n//             }\r\n//         });\r\n\r\n//         if (Object.keys(formErrors).length === 0) {\r\n//             // No errors, proceed to the next step\r\n//             setErrors({});\r\n//             onStepChange(newStep);\r\n//         } else {\r\n//             // Validation failed, set the errors\r\n//             setErrors(formErrors);\r\n//         }\r\n//     };\r\n\r\n//     return (\r\n//         <View style={styles.container}>\r\n//             <Text style={styles.title}>Sign Up</Text>\r\n\r\n//             {Object.keys(formData).map((key) => (\r\n//                 <View key={key} style={{ position: 'relative' }}>\r\n//                     <Text style={styles.placeholderLabel}>{key.charAt(0).toUpperCase() + key.slice(1)}</Text>\r\n//                     <TextInput\r\n//                         style={{\r\n//                             ...styles.input,\r\n//                             borderColor: isFieldValid(key) ? 'green' : errors[key] ? 'red' : 'gray',\r\n//                         }}\r\n//                         placeholder={key.charAt(0).toUpperCase() + key.slice(1)}\r\n//                         onChangeText={(text) => handleInputChange(key, text)}\r\n//                         value={formData[key]}\r\n//                         keyboardType={key === 'email' ? 'email-address' : 'default'}\r\n//                         secureTextEntry={key === 'password'}\r\n//                     />\r\n//                     {isFieldValid(key) && (\r\n//                         <View style={styles.iconContainer}>\r\n//                             <MaterialIcons name=\"check\" size={24} color=\"green\" style={styles.icon} />\r\n//                         </View>\r\n//                     )}\r\n//                     {errors[key] && <Text style={styles.error}>{errors[key]}</Text>}\r\n//                 </View>\r\n//             ))}\r\n\r\n//             <View style={styles.buttonContainer}>\r\n//                 <Pressable style={styles.buttonPrev} onPress={() => onStepChange(1)}>\r\n//                     <Text style={styles.buttonText}>Prev</Text>\r\n//                 </Pressable>\r\n\r\n//                 <Pressable style={styles.buttonNext} onPress={() => handleSignUp(2)}>\r\n//                     <Text style={styles.buttonText}>Next</Text>\r\n//                 </Pressable>\r\n//             </View>\r\n//         </View>\r\n//     );\r\n// };\r\n\r\n// const styles = StyleSheet.create({\r\n//     container: {\r\n//         flex: 1,\r\n//         justifyContent: 'center',\r\n//         alignItems: 'center',\r\n//     },\r\n//     title: {\r\n//         fontSize: 24,\r\n//         fontWeight: 'bold',\r\n//         marginBottom: 20,\r\n//     },\r\n//     input: {\r\n//         width: '80%',\r\n//         height: 40,\r\n//         borderWidth: 1,\r\n//         marginBottom: 10,\r\n//         paddingLeft: 10,\r\n//         flexDirection: 'row',\r\n//         alignItems: 'center', // Center the icon vertically\r\n//     },\r\n//     buttonText: {\r\n//         color: 'white',\r\n//         fontWeight: 'bold',\r\n//         textAlign: 'center',\r\n//     },\r\n//     error: {\r\n//         color: 'red',\r\n//         marginBottom: 10,\r\n//     },\r\n//     buttonContainer: {\r\n//         flexDirection: 'row',\r\n//         justifyContent: 'space-between',\r\n//         width: '80%',\r\n//         marginTop: 20,\r\n//     },\r\n//     buttonPrev: {\r\n//         backgroundColor: '#ccc',\r\n//         padding: 10,\r\n//         borderRadius: 5,\r\n//         flex: 1,\r\n//         marginRight: 10,\r\n//     },\r\n//     buttonNext: {\r\n//         backgroundColor: 'blue',\r\n//         padding: 10,\r\n//         borderRadius: 5,\r\n//         flex: 1,\r\n//     },\r\n//     icon: {\r\n//         marginLeft: 10, // Adjust the margin as needed\r\n//     },\r\n//     iconContainer: {\r\n//         position: 'absolute',\r\n//         top: 12,\r\n//         right: 12,\r\n//     },\r\n//     placeholderLabel: {\r\n//         position: 'absolute',\r\n//         left: 10,\r\n//         top: -8,\r\n//         backgroundColor:'rgb(243, 243, 243), 195, 197',\r\n//         paddingHorizontal: 5,\r\n//         color: 'black',\r\n//     },\r\n// });\r\n\r\n// export default SignUpScreen;\r\n\r\n\r\n\r\n\r\n\r\n//מצוין!\r\n// import React, { useState } from 'react';\r\n// import { View, Text, TextInput,Pressable, TouchableOpacity, StyleSheet } from 'react-native';\r\n// import { signUpValidationSchema } from '../../config/validations';\r\n// import { MaterialIcons } from '@expo/vector-icons'; // Make sure to install @expo/vector-icons if not already installed\r\n\r\n\r\n// const SignUpScreen = ({ onStepChange }) => {\r\n//     const [formData, setFormData] = useState({\r\n//         firstname: '',\r\n//         lastname: '',\r\n//         email: '',\r\n//         password: '',\r\n//     });\r\n\r\n//     const [errors, setErrors] = useState({});\r\n\r\n//     const handleInputChange = (key, text) => {\r\n//         setFormData({ ...formData, [key]: text });\r\n//         setErrors({ ...errors, [key]: null }); // Reset error when the user starts typing\r\n//     };\r\n\r\n//     const isFieldValid = (key) => {\r\n//         if (formData[key] && !errors[key]) {\r\n//             // Check validation conditions\r\n//             try {\r\n//                 signUpValidationSchema.validateSyncAt(key, formData);\r\n//                 return true;\r\n//             } catch (validationError) {\r\n//                 return false;\r\n//             }\r\n//         }\r\n//         return false;\r\n//     };\r\n\r\n//     const handleSignUp = (newStep) => {\r\n//         const formErrors = {};\r\n//         Object.keys(formData).forEach((key) => {\r\n//             try {\r\n//                 signUpValidationSchema.validateSyncAt(key, formData);\r\n//             } catch (validationError) {\r\n//                 formErrors[key] = validationError.message;\r\n//             }\r\n//         });\r\n\r\n//         if (Object.keys(formErrors).length === 0) {\r\n//             // No errors, proceed to the next step\r\n//             setErrors({});\r\n//             onStepChange(newStep);\r\n//         } else {\r\n//             // Validation failed, set the errors\r\n//             setErrors(formErrors);\r\n//         }\r\n//     };\r\n\r\n//     return (\r\n//         <View style={styles.container}>\r\n//             <Text style={styles.title}>Sign Up</Text>\r\n\r\n//             {Object.keys(formData).map((key) => (\r\n//                 <View key={key} style={{ position: 'relative' }}>\r\n//                     <TextInput\r\n//                         style={{\r\n//                             ...styles.input,\r\n//                             borderColor: isFieldValid(key) ? 'green' : errors[key] ? 'red' : 'gray',\r\n//                         }}\r\n//                         placeholder={key.charAt(0).toUpperCase() + key.slice(1)}\r\n//                         onChangeText={(text) => handleInputChange(key, text)}\r\n//                         value={formData[key]}\r\n//                         keyboardType={key === 'email' ? 'email-address' : 'default'}\r\n//                         secureTextEntry={key === 'password'}\r\n//                     />\r\n//                     {isFieldValid(key) && (\r\n//                         <View style={styles.iconContainer}>\r\n//                             <MaterialIcons name=\"check\" size={24} color=\"green\" style={styles.icon} />\r\n//                         </View>\r\n//                     )}\r\n//                     {errors[key] && <Text style={styles.error}>{errors[key]}</Text>}\r\n//                 </View>\r\n//             ))}\r\n\r\n//             <View style={styles.buttonContainer}>\r\n//                 <Pressable style={styles.buttonPrev} onPress={() => onStepChange(1)}>\r\n//                     <Text style={styles.buttonText}>Prev</Text>\r\n//                 </Pressable>\r\n\r\n//                 <Pressable style={styles.buttonNext} onPress={() => handleSignUp(2)}>\r\n//                     <Text style={styles.buttonText}>Next</Text>\r\n//                 </Pressable>\r\n//             </View>\r\n//         </View>\r\n//     );\r\n// };\r\n\r\n// const styles = StyleSheet.create({\r\n//     container: {\r\n//         flex: 1,\r\n//         justifyContent: 'center',\r\n//         alignItems: 'center',\r\n//     },\r\n//     title: {\r\n//         fontSize: 24,\r\n//         fontWeight: 'bold',\r\n//         marginBottom: 20,\r\n//     },\r\n//     input: {\r\n//         width: '80%',\r\n//         height: 40,\r\n//         borderColor: 'gray',\r\n//         borderWidth: 1,\r\n//         marginBottom: 10,\r\n//         paddingLeft: 10,\r\n//         flexDirection: 'row',\r\n//         alignItems: 'center', // Center the icon vertically\r\n//     },\r\n//     buttonText: {\r\n//         color: 'white',\r\n//         fontWeight: 'bold',\r\n//         textAlign: 'center',\r\n//     },\r\n//     error: {\r\n//         color: 'red',\r\n//         marginBottom: 10,\r\n//     },\r\n//     buttonContainer: {\r\n//         flexDirection: 'row',\r\n//         justifyContent: 'space-between',\r\n//         width: '80%',\r\n//         marginTop: 20,\r\n//     },\r\n//     buttonPrev: {\r\n//         backgroundColor: '#ccc',\r\n//         padding: 10,\r\n//         borderRadius: 5,\r\n//         flex: 1,\r\n//         marginRight: 10,\r\n//     },\r\n//     buttonNext: {\r\n//         backgroundColor: 'blue',\r\n//         padding: 10,\r\n//         borderRadius: 5,\r\n//         flex: 1,\r\n//     },\r\n//     icon: {\r\n//         marginLeft: 10, // Adjust the margin as needed\r\n//     },\r\n//     iconContainer: {\r\n//         position: 'absolute',\r\n//         top: 12,\r\n//         right: 12,\r\n//     },\r\n\r\n// });\r\n\r\n// export default SignUpScreen;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// 2טוב\r\n\r\n// import React, { useState } from 'react';\r\n// import { View, Text, TextInput, TouchableOpacity, StyleSheet } from 'react-native';\r\n// import * as Yup from 'yup';\r\n\r\n// const SignUpScreen = ({ onStepChange }) => {\r\n//     const [formData, setFormData] = useState({\r\n//         firstname: '',\r\n//         lastname: '',\r\n//         email: '',\r\n//         password: '',\r\n//     });\r\n\r\n//     const [errors, setErrors] = useState({});\r\n\r\n//     const validationSchema = Yup.object().shape({\r\n//         firstname: Yup.string().required('First name is required').max(50, 'First name is too long'),\r\n//         lastname: Yup.string().required('Last name is required').max(50, 'Last name is too long'),\r\n//         email: Yup.string().required('Email is required').email('Invalid email address'),\r\n//         password: Yup.string()\r\n//             .required('Password is required')\r\n//             .matches(\r\n//                 /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/,\r\n//                 'Password must contain at least one uppercase letter, one lowercase letter, and one number'\r\n//             ),\r\n//     });\r\n\r\n//     const handleInputChange = (key, text) => {\r\n//         setFormData({ ...formData, [key]: text });\r\n//     };\r\n\r\n//     const handleSignUp = async (newStep) => {\r\n//         try {\r\n//             await validationSchema.validate(formData, { abortEarly: false });\r\n//             // Validation successful\r\n//             setErrors({});\r\n//             onStepChange(newStep);\r\n//         } catch (validationErrors) {\r\n//             // Validation failed\r\n//             const errorsObject = {};\r\n//             validationErrors.inner.forEach((error) => {\r\n//                 errorsObject[error.path] = error.message;\r\n//             });\r\n//             setErrors(errorsObject);\r\n//         }\r\n//     };\r\n\r\n//     return (\r\n//         <View style={styles.container}>\r\n//             <Text style={styles.title}>Sign Up</Text>\r\n\r\n//             {Object.keys(formData).map((key) => (\r\n//                 <View key={key}>\r\n//                     <TextInput\r\n//                         style={[\r\n//                             styles.input,\r\n//                             errors[key] ? { borderColor: 'red' } : null,\r\n//                         ]}\r\n//                         placeholder={key.charAt(0).toUpperCase() + key.slice(1)}\r\n//                         onChangeText={(text) => handleInputChange(key, text)}\r\n//                         value={formData[key]}\r\n//                         keyboardType={key === 'email' ? 'email-address' : 'default'}\r\n//                         secureTextEntry={key === 'password'}\r\n//                     />\r\n//                     {errors[key] && <Text style={styles.error}>{errors[key]}</Text>}\r\n//                 </View>\r\n//             ))}\r\n\r\n//             <View style={styles.buttonContainer}>\r\n//                 <TouchableOpacity style={styles.buttonPrev} onPress={() => onStepChange(1)}>\r\n//                     <Text style={styles.buttonText}>Prev</Text>\r\n//                 </TouchableOpacity>\r\n\r\n//                 <TouchableOpacity style={styles.buttonNext} onPress={() => handleSignUp(2)}>\r\n//                     <Text style={styles.buttonText}>Next</Text>\r\n//                 </TouchableOpacity>\r\n//             </View>\r\n//         </View>\r\n//     );\r\n// };\r\n\r\n// const styles = StyleSheet.create({\r\n//     container: {\r\n//         flex: 1,\r\n//         justifyContent: 'center',\r\n//         alignItems: 'center',\r\n//     },\r\n//     title: {\r\n//         fontSize: 24,\r\n//         fontWeight: 'bold',\r\n//         marginBottom: 20,\r\n//     },\r\n//     input: {\r\n//         width: '80%',\r\n//         height: 40,\r\n//         borderColor: 'gray',\r\n//         borderWidth: 1,\r\n//         marginBottom: 10,\r\n//         paddingLeft: 10,\r\n//     },\r\n//     buttonText: {\r\n//         color: 'white',\r\n//         fontWeight: 'bold',\r\n//         textAlign: 'center',\r\n//     },\r\n//     error: {\r\n//         color: 'red',\r\n//         marginBottom: 10,\r\n//     },\r\n//     buttonContainer: {\r\n//         flexDirection: 'row',\r\n//         justifyContent: 'space-between',\r\n//         width: '80%',\r\n//         marginTop: 20,\r\n//     },\r\n//     buttonPrev: {\r\n//         backgroundColor: '#ccc',\r\n//         padding: 10,\r\n//         borderRadius: 5,\r\n//         flex: 1,\r\n//         marginRight: 10,\r\n//     },\r\n//     buttonNext: {\r\n//         backgroundColor: 'blue',\r\n//         padding: 10,\r\n//         borderRadius: 5,\r\n//         flex: 1,\r\n//     },\r\n// });\r\n\r\n// export default SignUpScreen;\r\n\r\n//ישן\r\n// import React, { useState } from 'react';\r\n// import { View, Text, TextInput, TouchableOpacity, StyleSheet, Alert } from 'react-native';\r\n\r\n// const SignUpScreen = ({ onStepChange }) => {\r\n//     // State to manage user input\r\n//     const [formData, setFormData] = useState({\r\n//         firstname: '',\r\n//         lastname: '',\r\n//         email: '',\r\n//         password: '',\r\n//     });\r\n\r\n//     // State for error messages\r\n//     const [error, setError] = useState('');\r\n\r\n//     // Define the input fields\r\n//     const inputFields = [\r\n//         { key: 'firstname', placeholder: 'Firstname' },\r\n//         { key: 'lastname', placeholder: 'Lastname' },\r\n//         { key: 'email', placeholder: 'Email', keyboardType: 'email-address' },\r\n//         { key: 'password', placeholder: 'Password', secureTextEntry: true },\r\n//     ];\r\n\r\n//     // Function to handle form validation\r\n//     const validateForm = () => {\r\n//         setError('');\r\n\r\n//         for (const field of inputFields) {\r\n//             if (!formData[field.key]) {\r\n//                 setError('All fields are required');\r\n//                 return false;\r\n//             }\r\n//         }\r\n\r\n//         // Add more sophisticated validation logic if needed\r\n\r\n//         return true;\r\n//     };\r\n\r\n//     // Function to handle sign-up action\r\n//     const handleSignUp = (newStep) => {\r\n//         if (validateForm()) {\r\n//             onStepChange(newStep); // Call the callback to move to another step\r\n//         }\r\n//     };\r\n\r\n//     // Function to update form data\r\n//     const handleInputChange = (key, text) => {\r\n//         setFormData({ ...formData, [key]: text });\r\n//     };\r\n\r\n//     return (\r\n//         <View style={styles.container}>\r\n//             <Text style={styles.title}>Sign Up</Text>\r\n\r\n//             {inputFields.map((field) => (\r\n//                 <TextInput\r\n//                     key={field.key}\r\n//                     style={styles.input}\r\n//                     placeholder={field.placeholder}\r\n//                     onChangeText={(text) => handleInputChange(field.key, text)}\r\n//                     value={formData[field.key]}\r\n//                     keyboardType={field.keyboardType}\r\n//                     secureTextEntry={field.secureTextEntry}\r\n//                 />\r\n//             ))}\r\n\r\n//             {/* Display error message if there is one */}\r\n//             {error ? <Text style={styles.error}>{error}</Text> : null}\r\n\r\n//             <View style={styles.buttonContainer}>\r\n//                 <TouchableOpacity style={styles.buttonPrev} onPress={() => onStepChange(1)}>\r\n//                     <Text style={styles.buttonText}>Prev</Text>\r\n//                 </TouchableOpacity>\r\n\r\n//                 <TouchableOpacity style={styles.buttonNext} onPress={() => handleSignUp(2)}>\r\n//                     <Text style={styles.buttonText}>Next</Text>\r\n//                 </TouchableOpacity>\r\n//             </View>\r\n//         </View>\r\n//     );\r\n// };\r\n\r\n// const styles = StyleSheet.create({\r\n//     container: {\r\n//         flex: 1,\r\n//         justifyContent: 'center',\r\n//         alignItems: 'center',\r\n//     },\r\n//     title: {\r\n//         fontSize: 24,\r\n//         fontWeight: 'bold',\r\n//         marginBottom: 20,\r\n//     },\r\n//     input: {\r\n//         width: '80%',\r\n//         height: 40,\r\n//         borderColor: 'gray',\r\n//         borderWidth: 1,\r\n//         marginBottom: 10,\r\n//         paddingLeft: 10,\r\n//     },\r\n//     buttonText: {\r\n//         color: 'white',\r\n//         fontWeight: 'bold',\r\n//         textAlign: 'center',\r\n//     },\r\n//     error: {\r\n//         color: 'red',\r\n//         marginBottom: 10,\r\n//     },\r\n    \r\n//   buttonContainer: {\r\n//     flexDirection: 'row',\r\n//     justifyContent: 'space-between',\r\n//     width: '80%',\r\n//     marginTop: 20,\r\n//   },\r\n//   buttonPrev: {\r\n//     backgroundColor: '#ccc', // Light gray\r\n//     padding: 10,\r\n//     borderRadius: 5,\r\n//     flex: 1,\r\n//     marginRight: 10,\r\n//   },\r\n//   buttonNext: {\r\n//     backgroundColor: 'blue',\r\n//     padding: 10,\r\n//     borderRadius: 5,\r\n//     flex: 1,\r\n//   },\r\n// });\r\n\r\n// export default SignUpScreen;\r\n\r\n// // import React, { useState } from 'react';\r\n// // import { View, Text, TextInput, TouchableOpacity, StyleSheet, Alert } from 'react-native';\r\n\r\n// // const SignUpScreen =  ({ onStepChange }) => {\r\n\r\n// //     // State to manage user input\r\n// //     const [firstname, setFirstname] = useState('');\r\n// //     const [lastname, setLastname] = useState('');\r\n// //     const [email, setEmail] = useState('');\r\n// //     const [password, setPassword] = useState('');\r\n\r\n// //     // State for error messages\r\n// //     const [error, setError] = useState('');\r\n\r\n// //     // Function to handle form validation\r\n// //     const validateForm = () => {\r\n// //         setError('');\r\n\r\n// //         if (!firstname) {\r\n// //             setError('All fields are required');\r\n// //             return false;\r\n// //         }\r\n\r\n// //         // if (!firstname || !lastname || !email || !password) {\r\n// //         //     setError('All fields are required');\r\n// //         //     return false;\r\n// //         // }\r\n\r\n// //         // Add more sophisticated validation logic if needed\r\n\r\n// //         return true;\r\n// //     };\r\n\r\n// //     // Function to handle sign-up action\r\n// //     // const handleSignUp = () => {\r\n// //     //     if (validateForm()) {\r\n// //     //         //Navigate to SignUp2 when the form is valid\r\n// //     //          navigation.navigate('SignUp2', { firstname, lastname, email, password });\r\n// //     //         // // Perform sign-up logic here (e.g., make an API request)\r\n// //     //     ;\r\n// //     //     }\r\n// //     // };\r\n\r\n// //     const handleSignUp = (newStep) => {\r\n// //         if (validateForm()) {\r\n// //             onStepChange(newStep); // Call the callback to move to another step\r\n// //         }\r\n// //     }\r\n\r\n// //     return (\r\n// //         <View style={styles.container}>\r\n// //             <Text style={styles.title}>Sign Up</Text>\r\n\r\n// //             <TextInput\r\n// //                 style={styles.input}\r\n// //                 placeholder=\"Firstname\"\r\n// //                 onChangeText={(text) => setFirstname(text)}\r\n// //                 value={firstname}\r\n// //             />\r\n\r\n// //             <TextInput\r\n// //                 style={styles.input}\r\n// //                 placeholder=\"Lastname\"\r\n// //                 onChangeText={(text) => setLastname(text)}\r\n// //                 value={lastname}\r\n// //             />\r\n\r\n// //             <TextInput\r\n// //                 style={styles.input}\r\n// //                 placeholder=\"Email\"\r\n// //                 onChangeText={(text) => setEmail(text)}\r\n// //                 value={email}\r\n// //                 keyboardType=\"email-address\"\r\n// //             />\r\n\r\n// //             <TextInput\r\n// //                 style={styles.input}\r\n// //                 placeholder=\"Password\"\r\n// //                 onChangeText={(text) => setPassword(text)}\r\n// //                 value={password}\r\n// //                 secureTextEntry\r\n// //             />\r\n\r\n// //             {/* Display error message if there is one */}\r\n// //             {error ? <Text style={styles.error}>{error}</Text> : null}\r\n\r\n// //             <View style={styles.buttonContainer}>\r\n// //                 <TouchableOpacity style={styles.buttonPrev} onPress={() =>onStepChange(1)}>\r\n// //                 <Text style={styles.buttonText}>Prev</Text>\r\n// //                 </TouchableOpacity>\r\n\r\n// //                 <TouchableOpacity style={styles.buttonNext} onPress={() =>handleSignUp(2)}>\r\n// //                 <Text style={styles.buttonText}>Next</Text>\r\n// //                 </TouchableOpacity> \r\n// //             </View>\r\n// //         </View>\r\n// //     );\r\n// // };\r\n\r\n// // const styles = StyleSheet.create({\r\n// //     container: {\r\n// //         flex: 1,\r\n// //         justifyContent: 'center',\r\n// //         alignItems: 'center',\r\n// //     },\r\n// //     title: {\r\n// //         fontSize: 24,\r\n// //         fontWeight: 'bold',\r\n// //         marginBottom: 20,\r\n// //     },\r\n// //     input: {\r\n// //         width: '80%',\r\n// //         height: 40,\r\n// //         borderColor: 'gray',\r\n// //         borderWidth: 1,\r\n// //         marginBottom: 10,\r\n// //         paddingLeft: 10,\r\n// //     },\r\n// //     buttonText: {\r\n// //         color: 'white',\r\n// //         fontWeight: 'bold',\r\n// //         textAlign: 'center',\r\n// //     },\r\n// //     error: {\r\n// //         color: 'red',\r\n// //         marginBottom: 10,\r\n// //     },\r\n    \r\n// //   buttonContainer: {\r\n// //     flexDirection: 'row',\r\n// //     justifyContent: 'space-between',\r\n// //     width: '80%',\r\n// //     marginTop: 20,\r\n// //   },\r\n// //   buttonPrev: {\r\n// //     backgroundColor: '#ccc', // Light gray\r\n// //     padding: 10,\r\n// //     borderRadius: 5,\r\n// //     flex: 1,\r\n// //     marginRight: 10,\r\n// //   },\r\n// //   buttonNext: {\r\n// //     backgroundColor: 'blue',\r\n// //     padding: 10,\r\n// //     borderRadius: 5,\r\n// //     flex: 1,\r\n// //   },\r\n// // });\r\n\r\n// // export default SignUpScreen;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}