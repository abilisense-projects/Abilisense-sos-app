{"version":3,"names":["setRNConfiguration","_config","Error","requestAuthorization","_success","_error","getCurrentPosition","success","error","options","navigator","geolocation","console","watchPosition","clearWatch","watchID","stopObserving"],"sources":["implementation.ts"],"sourcesContent":["/**\n * Copyright (c) React Native Community\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport type {\n  GeolocationOptions,\n  GeolocationConfiguration,\n  GeolocationResponse,\n  GeolocationError,\n} from './NativeRNCGeolocation';\n\nexport function setRNConfiguration(_config: GeolocationConfiguration) {\n  throw new Error('setRNConfiguration is not supported by the browser');\n}\n\nexport function requestAuthorization(\n  _success?: () => void,\n  _error?: (error: GeolocationError) => void\n) {\n  throw new Error('requestAuthorization is not supported by the browser');\n}\n\nexport async function getCurrentPosition(\n  success: (position: GeolocationResponse) => void,\n  error?: (error: GeolocationError) => void,\n  options?: GeolocationOptions\n) {\n  if (typeof success !== 'function') {\n    throw new Error('success callback must be a function');\n  } else if (!navigator || !navigator.geolocation) {\n    console.error('Navigator is undefined');\n    return;\n  }\n  navigator.geolocation.getCurrentPosition(success, error, options);\n}\n\nexport function watchPosition(\n  success: (position: GeolocationResponse) => void,\n  error?: (error: GeolocationError) => void,\n  options?: GeolocationOptions\n): number {\n  if (typeof success !== 'function') {\n    throw new Error('success callback must be a function');\n  } else if (!navigator || !navigator.geolocation) {\n    throw new Error('Navigator is undefined');\n  }\n  return navigator.geolocation.watchPosition(success, error, options);\n}\n\nexport function clearWatch(watchID: number) {\n  if (!navigator || !navigator.geolocation) {\n    console.error('Navigator is undefined');\n    return;\n  }\n  navigator.geolocation.clearWatch(watchID);\n}\n\nexport function stopObserving() {\n  throw new Error('stopObserving is not supported by the browser');\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASA,OAAO,SAASA,kBAAT,CAA4BC,OAA5B,EAA+D;EACpE,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;AACD;AAED,OAAO,SAASC,oBAAT,CACLC,QADK,EAELC,MAFK,EAGL;EACA,MAAM,IAAIH,KAAJ,CAAU,sDAAV,CAAN;AACD;AAED,OAAO,eAAeI,kBAAf,CACLC,OADK,EAELC,KAFK,EAGLC,OAHK,EAIL;EACA,IAAI,OAAOF,OAAP,KAAmB,UAAvB,EAAmC;IACjC,MAAM,IAAIL,KAAJ,CAAU,qCAAV,CAAN;EACD,CAFD,MAEO,IAAI,CAACQ,SAAD,IAAc,CAACA,SAAS,CAACC,WAA7B,EAA0C;IAC/CC,OAAO,CAACJ,KAAR,CAAc,wBAAd;IACA;EACD;;EACDE,SAAS,CAACC,WAAV,CAAsBL,kBAAtB,CAAyCC,OAAzC,EAAkDC,KAAlD,EAAyDC,OAAzD;AACD;AAED,OAAO,SAASI,aAAT,CACLN,OADK,EAELC,KAFK,EAGLC,OAHK,EAIG;EACR,IAAI,OAAOF,OAAP,KAAmB,UAAvB,EAAmC;IACjC,MAAM,IAAIL,KAAJ,CAAU,qCAAV,CAAN;EACD,CAFD,MAEO,IAAI,CAACQ,SAAD,IAAc,CAACA,SAAS,CAACC,WAA7B,EAA0C;IAC/C,MAAM,IAAIT,KAAJ,CAAU,wBAAV,CAAN;EACD;;EACD,OAAOQ,SAAS,CAACC,WAAV,CAAsBE,aAAtB,CAAoCN,OAApC,EAA6CC,KAA7C,EAAoDC,OAApD,CAAP;AACD;AAED,OAAO,SAASK,UAAT,CAAoBC,OAApB,EAAqC;EAC1C,IAAI,CAACL,SAAD,IAAc,CAACA,SAAS,CAACC,WAA7B,EAA0C;IACxCC,OAAO,CAACJ,KAAR,CAAc,wBAAd;IACA;EACD;;EACDE,SAAS,CAACC,WAAV,CAAsBG,UAAtB,CAAiCC,OAAjC;AACD;AAED,OAAO,SAASC,aAAT,GAAyB;EAC9B,MAAM,IAAId,KAAJ,CAAU,+CAAV,CAAN;AACD"}